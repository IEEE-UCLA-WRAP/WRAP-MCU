
WRAP_TX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afb8  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  0800b268  0800b268  0000c268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc90  0800bc90  0000cc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bc98  0800bc98  0000cc98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bc9c  0800bc9c  0000cc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00002bd0  24000000  0800bca0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005248  24002bd0  0800e870  0000fbd0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24007e18  0800e870  0000fe18  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000fbd0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001901f  00000000  00000000  0000fbfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f9c  00000000  00000000  00028c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001360  00000000  00000000  0002bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f05  00000000  00000000  0002cf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000318df  00000000  00000000  0002de25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b166  00000000  00000000  0005f704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00143c5e  00000000  00000000  0007a86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001be4c8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000053ac  00000000  00000000  001be580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  001c392c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00001363  00000000  00000000  001c397e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000010  00000000  00000000  001c4ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24002bd0 	.word	0x24002bd0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b250 	.word	0x0800b250

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24002bd4 	.word	0x24002bd4
 80002ec:	0800b250 	.word	0x0800b250

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <recalculate_output>:
	for (int i = 0; i < 2300; i++) {
		dac_buf[i] = single_val;
	}
}

void recalculate_output(uint8_t tiny_msg) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	// put the packet header in the symbol buffer
	memcpy(symbol_buffer, packet_header, 4*PACKET_HEADER_LEN);
 80005ea:	4a53      	ldr	r2, [pc, #332]	@ (8000738 <recalculate_output+0x158>)
 80005ec:	4b53      	ldr	r3, [pc, #332]	@ (800073c <recalculate_output+0x15c>)
 80005ee:	4614      	mov	r4, r2
 80005f0:	461d      	mov	r5, r3
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000602:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// put the tiny message in the symbol buffer
	for(int j = 0; j < 8; j++)
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e010      	b.n	800062e <recalculate_output+0x4e>
	{
		symbol_buffer[PACKET_HEADER_LEN + 8 - 1 - j] = 2 * (int)(tiny_msg & 0x01) - 1;
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	005a      	lsls	r2, r3, #1
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	f1c3 0316 	rsb	r3, r3, #22
 800061a:	3a01      	subs	r2, #1
 800061c:	4946      	ldr	r1, [pc, #280]	@ (8000738 <recalculate_output+0x158>)
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		tiny_msg = tiny_msg >> 1;
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	085b      	lsrs	r3, r3, #1
 8000626:	71fb      	strb	r3, [r7, #7]
	for(int j = 0; j < 8; j++)
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	3301      	adds	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	2b07      	cmp	r3, #7
 8000632:	ddeb      	ble.n	800060c <recalculate_output+0x2c>
	}

    // upsample symbols
    for (int i = 0; i < DAC_BUF_LEN; i++) {
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	e02b      	b.n	8000692 <recalculate_output+0xb2>
	    if (i % SPS == 0) {
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	4b40      	ldr	r3, [pc, #256]	@ (8000740 <recalculate_output+0x160>)
 800063e:	fb83 1302 	smull	r1, r3, r3, r2
 8000642:	1159      	asrs	r1, r3, #5
 8000644:	17d3      	asrs	r3, r2, #31
 8000646:	1acb      	subs	r3, r1, r3
 8000648:	2164      	movs	r1, #100	@ 0x64
 800064a:	fb01 f303 	mul.w	r3, r1, r3
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d114      	bne.n	800067e <recalculate_output+0x9e>
		    buf1[i] = (symbol_buffer[i / SPS]);
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	4a3a      	ldr	r2, [pc, #232]	@ (8000740 <recalculate_output+0x160>)
 8000658:	fb82 1203 	smull	r1, r2, r2, r3
 800065c:	1152      	asrs	r2, r2, #5
 800065e:	17db      	asrs	r3, r3, #31
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	4a35      	ldr	r2, [pc, #212]	@ (8000738 <recalculate_output+0x158>)
 8000664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000668:	ee07 3a90 	vmov	s15, r3
 800066c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000670:	4a34      	ldr	r2, [pc, #208]	@ (8000744 <recalculate_output+0x164>)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	edc3 7a00 	vstr	s15, [r3]
 800067c:	e006      	b.n	800068c <recalculate_output+0xac>
	    }
	    else {
		    buf1[i] = 0;
 800067e:	4a31      	ldr	r2, [pc, #196]	@ (8000744 <recalculate_output+0x164>)
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < DAC_BUF_LEN; i++) {
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	3301      	adds	r3, #1
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	f640 02fb 	movw	r2, #2299	@ 0x8fb
 8000698:	4293      	cmp	r3, r2
 800069a:	ddce      	ble.n	800063a <recalculate_output+0x5a>
	    }
    }

    // filter
    arm_conv_f32(buf1, DAC_BUF_LEN, RRC, RRC_LEN, buf2);
 800069c:	4b2a      	ldr	r3, [pc, #168]	@ (8000748 <recalculate_output+0x168>)
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80006a4:	4a29      	ldr	r2, [pc, #164]	@ (800074c <recalculate_output+0x16c>)
 80006a6:	f640 01fc 	movw	r1, #2300	@ 0x8fc
 80006aa:	4826      	ldr	r0, [pc, #152]	@ (8000744 <recalculate_output+0x164>)
 80006ac:	f009 fd3e 	bl	800a12c <arm_conv_f32>

    // modulate
	for (int i = 0; i < DAC_BUF_LEN + RRC_LEN - 1; i++) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	e02b      	b.n	800070e <recalculate_output+0x12e>
		dac_buf[i] = 0x800 + 5.5 * 0x7FF*cos(2 * M_PI * FC / FS * i) *  buf2[i];
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	ee07 3a90 	vmov	s15, r3
 80006bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006c0:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000720 <recalculate_output+0x140>
 80006c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006c8:	eeb0 0b47 	vmov.f64	d0, d7
 80006cc:	f009 fff4 	bl	800a6b8 <cos>
 80006d0:	eeb0 7b40 	vmov.f64	d7, d0
 80006d4:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8000728 <recalculate_output+0x148>
 80006d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000748 <recalculate_output+0x168>)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	edd3 7a00 	vldr	s15, [r3]
 80006e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80006f0:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8000730 <recalculate_output+0x150>
 80006f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80006f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006fc:	ee17 1a90 	vmov	r1, s15
 8000700:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <recalculate_output+0x170>)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < DAC_BUF_LEN + RRC_LEN - 1; i++) {
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3301      	adds	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8000714:	dbcf      	blt.n	80006b6 <recalculate_output+0xd6>
	}
}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bdb0      	pop	{r4, r5, r7, pc}
 8000720:	769cf0e0 	.word	0x769cf0e0
 8000724:	3ff41b2f 	.word	0x3ff41b2f
 8000728:	00000000 	.word	0x00000000
 800072c:	40c5fd40 	.word	0x40c5fd40
 8000730:	00000000 	.word	0x00000000
 8000734:	40a00000 	.word	0x40a00000
 8000738:	24002e04 	.word	0x24002e04
 800073c:	0800ba3c 	.word	0x0800ba3c
 8000740:	51eb851f 	.word	0x51eb851f
 8000744:	24002e60 	.word	0x24002e60
 8000748:	24005250 	.word	0x24005250
 800074c:	0800b268 	.word	0x0800b268
 8000750:	24000000 	.word	0x24000000

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 fcf3 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f833 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 f9f1 	bl	8000b48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000766:	f000 f9c7 	bl	8000af8 <MX_DMA_Init>
  MX_TIM6_Init();
 800076a:	f000 f943 	bl	80009f4 <MX_TIM6_Init>
  MX_DAC1_Init();
 800076e:	f000 f8ef 	bl	8000950 <MX_DAC1_Init>
  MX_OPAMP1_Init();
 8000772:	f000 f91f 	bl	80009b4 <MX_OPAMP1_Init>
  MX_USART3_UART_Init();
 8000776:	f000 f973 	bl	8000a60 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_OPAMP_Start(&hopamp1);
 800077a:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <main+0x5c>)
 800077c:	f004 fb08 	bl	8004d90 <HAL_OPAMP_Start>
  HAL_TIM_Base_Start(&htim6);
 8000780:	480c      	ldr	r0, [pc, #48]	@ (80007b4 <main+0x60>)
 8000782:	f007 fa57 	bl	8007c34 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000786:	2100      	movs	r1, #0
 8000788:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <main+0x64>)
 800078a:	f000 feaa 	bl	80014e2 <HAL_DAC_Start>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rx_msg, sizeof(rx_msg));
 800078e:	2202      	movs	r2, #2
 8000790:	490a      	ldr	r1, [pc, #40]	@ (80007bc <main+0x68>)
 8000792:	480b      	ldr	r0, [pc, #44]	@ (80007c0 <main+0x6c>)
 8000794:	f007 fcd0 	bl	8008138 <HAL_UART_Receive_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_buf, DAC_BUF_LEN + RRC_LEN - 1, DAC_ALIGN_12B_R);
 8000798:	2300      	movs	r3, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80007a0:	4a08      	ldr	r2, [pc, #32]	@ (80007c4 <main+0x70>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <main+0x64>)
 80007a6:	f000 fef3 	bl	8001590 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007aa:	bf00      	nop
 80007ac:	e7fd      	b.n	80007aa <main+0x56>
 80007ae:	bf00      	nop
 80007b0:	24002c78 	.word	0x24002c78
 80007b4:	24002cac 	.word	0x24002cac
 80007b8:	24002bec 	.word	0x24002bec
 80007bc:	24007e10 	.word	0x24007e10
 80007c0:	24002cf8 	.word	0x24002cf8
 80007c4:	24000000 	.word	0x24000000

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b0a4      	sub	sp, #144	@ 0x90
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007d2:	224c      	movs	r2, #76	@ 0x4c
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f009 ff42 	bl	800a660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e0:	2220      	movs	r2, #32
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f009 ff3b 	bl	800a660 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
 80007fa:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80007fc:	4b52      	ldr	r3, [pc, #328]	@ (8000948 <SystemClock_Config+0x180>)
 80007fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000802:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000806:	2004      	movs	r0, #4
 8000808:	f004 fb04 	bl	8004e14 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b4e      	ldr	r3, [pc, #312]	@ (800094c <SystemClock_Config+0x184>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a4d      	ldr	r2, [pc, #308]	@ (800094c <SystemClock_Config+0x184>)
 8000816:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b4b      	ldr	r3, [pc, #300]	@ (800094c <SystemClock_Config+0x184>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000828:	bf00      	nop
 800082a:	4b48      	ldr	r3, [pc, #288]	@ (800094c <SystemClock_Config+0x184>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000836:	d1f8      	bne.n	800082a <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000838:	f004 fadc 	bl	8004df4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800083c:	4b42      	ldr	r3, [pc, #264]	@ (8000948 <SystemClock_Config+0x180>)
 800083e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000840:	4a41      	ldr	r2, [pc, #260]	@ (8000948 <SystemClock_Config+0x180>)
 8000842:	f023 0318 	bic.w	r3, r3, #24
 8000846:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000848:	232f      	movs	r3, #47	@ 0x2f
 800084a:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800084c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000850:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000852:	2301      	movs	r3, #1
 8000854:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000856:	2301      	movs	r3, #1
 8000858:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800085a:	2340      	movs	r3, #64	@ 0x40
 800085c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800085e:	2301      	movs	r3, #1
 8000860:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000862:	2301      	movs	r3, #1
 8000864:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	2302      	movs	r3, #2
 800086c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000872:	2346      	movs	r3, #70	@ 0x46
 8000874:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087a:	2304      	movs	r3, #4
 800087c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000884:	230c      	movs	r3, #12
 8000886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800089a:	4618      	mov	r0, r3
 800089c:	f004 fb14 	bl	8004ec8 <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80008a6:	f000 f9db 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008aa:	233f      	movs	r3, #63	@ 0x3f
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ae:	2303      	movs	r3, #3
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ba:	2340      	movs	r3, #64	@ 0x40
 80008bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008be:	2340      	movs	r3, #64	@ 0x40
 80008c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c8:	2340      	movs	r3, #64	@ 0x40
 80008ca:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d0:	2106      	movs	r1, #6
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 ff2a 	bl	800572c <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80008de:	f000 f9bf 	bl	8000c60 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80008e2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008e6:	2100      	movs	r1, #0
 80008e8:	2000      	movs	r0, #0
 80008ea:	f005 f8d5 	bl	8005a98 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 80008ee:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008f2:	2100      	movs	r1, #0
 80008f4:	2001      	movs	r0, #1
 80008f6:	f005 f8cf 	bl	8005a98 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <SystemClock_Config+0x180>)
 80008fc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000900:	4a11      	ldr	r2, [pc, #68]	@ (8000948 <SystemClock_Config+0x180>)
 8000902:	f043 0302 	orr.w	r3, r3, #2
 8000906:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <SystemClock_Config+0x180>)
 800090c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 800091c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000920:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8000926:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800092c:	2322      	movs	r3, #34	@ 0x22
 800092e:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000930:	2320      	movs	r3, #32
 8000932:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4618      	mov	r0, r3
 800093a:	f006 ff69 	bl	8007810 <HAL_RCCEx_CRSConfig>
}
 800093e:	bf00      	nop
 8000940:	3790      	adds	r7, #144	@ 0x90
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	58024400 	.word	0x58024400
 800094c:	58024800 	.word	0x58024800

08000950 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2224      	movs	r2, #36	@ 0x24
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f009 fe7f 	bl	800a660 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000962:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_DAC1_Init+0x5c>)
 8000964:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <MX_DAC1_Init+0x60>)
 8000966:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000968:	4810      	ldr	r0, [pc, #64]	@ (80009ac <MX_DAC1_Init+0x5c>)
 800096a:	f000 fd98 	bl	800149e <HAL_DAC_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000974:	f000 f974 	bl	8000c60 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800097c:	2316      	movs	r3, #22
 800097e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000980:	2302      	movs	r3, #2
 8000982:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000984:	2302      	movs	r3, #2
 8000986:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	@ (80009ac <MX_DAC1_Init+0x5c>)
 8000994:	f000 feda 	bl	800174c <HAL_DAC_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 f95f 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	@ 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	24002bec 	.word	0x24002bec
 80009b0:	40007400 	.word	0x40007400

080009b4 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_OPAMP1_Init+0x38>)
 80009ba:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <MX_OPAMP1_Init+0x3c>)
 80009bc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_OPAMP1_Init+0x38>)
 80009c0:	2260      	movs	r2, #96	@ 0x60
 80009c2:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC_CH;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_OPAMP1_Init+0x38>)
 80009c6:	2204      	movs	r2, #4
 80009c8:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_OPAMP1_Init+0x38>)
 80009cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d0:	605a      	str	r2, [r3, #4]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_OPAMP1_Init+0x38>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_OPAMP1_Init+0x38>)
 80009da:	f004 f911 	bl	8004c00 <HAL_OPAMP_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_OPAMP1_Init+0x34>
  {
    Error_Handler();
 80009e4:	f000 f93c 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	24002c78 	.word	0x24002c78
 80009f0:	40009000 	.word	0x40009000

080009f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_TIM6_Init+0x64>)
 8000a06:	4a15      	ldr	r2, [pc, #84]	@ (8000a5c <MX_TIM6_Init+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_TIM6_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_TIM6_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 55;
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_TIM6_Init+0x64>)
 8000a18:	2237      	movs	r2, #55	@ 0x37
 8000a1a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_TIM6_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a22:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <MX_TIM6_Init+0x64>)
 8000a24:	f007 f8ae 	bl	8007b84 <HAL_TIM_Base_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a2e:	f000 f917 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a32:	2320      	movs	r3, #32
 8000a34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <MX_TIM6_Init+0x64>)
 8000a40:	f007 fa0e 	bl	8007e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a4a:	f000 f909 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	24002cac 	.word	0x24002cac
 8000a5c:	40001000 	.word	0x40001000

08000a60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a64:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a66:	4a23      	ldr	r2, [pc, #140]	@ (8000af4 <MX_USART3_UART_Init+0x94>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa8:	4811      	ldr	r0, [pc, #68]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000aaa:	f007 fa67 	bl	8007f7c <HAL_UART_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f8d4 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000abc:	f009 fa6b 	bl	8009f96 <HAL_UARTEx_SetTxFifoThreshold>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac6:	f000 f8cb 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aca:	2100      	movs	r1, #0
 8000acc:	4808      	ldr	r0, [pc, #32]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000ace:	f009 faa0 	bl	800a012 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad8:	f000 f8c2 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <MX_USART3_UART_Init+0x90>)
 8000ade:	f009 fa21 	bl	8009f24 <HAL_UARTEx_DisableFifoMode>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae8:	f000 f8ba 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	24002cf8 	.word	0x24002cf8
 8000af4:	40004800 	.word	0x40004800

08000af8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_DMA_Init+0x4c>)
 8000b00:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b04:	4a0f      	ldr	r2, [pc, #60]	@ (8000b44 <MX_DMA_Init+0x4c>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <MX_DMA_Init+0x4c>)
 8000b10:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	200b      	movs	r0, #11
 8000b22:	f000 fc88 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b26:	200b      	movs	r0, #11
 8000b28:	f000 fc9f 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	200c      	movs	r0, #12
 8000b32:	f000 fc80 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b36:	200c      	movs	r0, #12
 8000b38:	f000 fc97 	bl	800146a <HAL_NVIC_EnableIRQ>

}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58024400 	.word	0x58024400

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b31      	ldr	r3, [pc, #196]	@ (8000c24 <MX_GPIO_Init+0xdc>)
 8000b60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b64:	4a2f      	ldr	r2, [pc, #188]	@ (8000c24 <MX_GPIO_Init+0xdc>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c24 <MX_GPIO_Init+0xdc>)
 8000b70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7c:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <MX_GPIO_Init+0xdc>)
 8000b7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b82:	4a28      	ldr	r2, [pc, #160]	@ (8000c24 <MX_GPIO_Init+0xdc>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b88:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b8c:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <MX_GPIO_Init+0xdc>)
 8000b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9a:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <MX_GPIO_Init+0xdc>)
 8000b9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba0:	4a20      	ldr	r2, [pc, #128]	@ (8000c24 <MX_GPIO_Init+0xdc>)
 8000ba2:	f043 0308 	orr.w	r3, r3, #8
 8000ba6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000baa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <MX_GPIO_Init+0xdc>)
 8000bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <MX_GPIO_Init+0xdc>)
 8000bba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bbe:	4a19      	ldr	r2, [pc, #100]	@ (8000c24 <MX_GPIO_Init+0xdc>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bc8:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <MX_GPIO_Init+0xdc>)
 8000bca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480d      	ldr	r0, [pc, #52]	@ (8000c28 <MX_GPIO_Init+0xe0>)
 8000bf4:	f003 fe54 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_GPIO_Init+0xe4>)
 8000c16:	f003 fe43 	bl	80048a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	@ 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	58024400 	.word	0x58024400
 8000c28:	58020800 	.word	0x58020800
 8000c2c:	58020000 	.word	0x58020000

08000c30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	// TODO: Call a function to generate the waveform corresponding to the new message!
	HAL_UART_Transmit(&huart3, (uint8_t *)rx_msg, sizeof(rx_msg), 1);
 8000c38:	2301      	movs	r3, #1
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	4906      	ldr	r1, [pc, #24]	@ (8000c58 <HAL_UART_RxCpltCallback+0x28>)
 8000c3e:	4807      	ldr	r0, [pc, #28]	@ (8000c5c <HAL_UART_RxCpltCallback+0x2c>)
 8000c40:	f007 f9ec 	bl	800801c <HAL_UART_Transmit>
	recalculate_output(rx_msg[0]);
 8000c44:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <HAL_UART_RxCpltCallback+0x28>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fcc9 	bl	80005e0 <recalculate_output>

}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	24007e10 	.word	0x24007e10
 8000c5c:	24002cf8 	.word	0x24002cf8

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <Error_Handler+0x8>

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <HAL_MspInit+0x30>)
 8000c74:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c78:	4a08      	ldr	r2, [pc, #32]	@ (8000c9c <HAL_MspInit+0x30>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_MspInit+0x30>)
 8000c84:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	58024400 	.word	0x58024400

08000ca0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a23      	ldr	r2, [pc, #140]	@ (8000d3c <HAL_DAC_MspInit+0x9c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d13f      	bne.n	8000d32 <HAL_DAC_MspInit+0x92>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000cb2:	4b23      	ldr	r3, [pc, #140]	@ (8000d40 <HAL_DAC_MspInit+0xa0>)
 8000cb4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cb8:	4a21      	ldr	r2, [pc, #132]	@ (8000d40 <HAL_DAC_MspInit+0xa0>)
 8000cba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000cbe:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <HAL_DAC_MspInit+0xa0>)
 8000cc4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8000d48 <HAL_DAC_MspInit+0xa8>)
 8000cd4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000cd8:	2243      	movs	r2, #67	@ 0x43
 8000cda:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cdc:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000cde:	2240      	movs	r2, #64	@ 0x40
 8000ce0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000cea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cee:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000cf2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cf6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000cfa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cfe:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d00:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000d02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d06:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000d0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d0e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000d16:	480b      	ldr	r0, [pc, #44]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000d18:	f000 fee4 	bl	8001ae4 <HAL_DMA_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_DAC_MspInit+0x86>
    {
      Error_Handler();
 8000d22:	f7ff ff9d 	bl	8000c60 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <HAL_DAC_MspInit+0xa4>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40007400 	.word	0x40007400
 8000d40:	58024400 	.word	0x58024400
 8000d44:	24002c00 	.word	0x24002c00
 8000d48:	40020010 	.word	0x40020010

08000d4c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a18      	ldr	r2, [pc, #96]	@ (8000dcc <HAL_OPAMP_MspInit+0x80>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d129      	bne.n	8000dc2 <HAL_OPAMP_MspInit+0x76>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8000d6e:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <HAL_OPAMP_MspInit+0x84>)
 8000d70:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000d74:	4a16      	ldr	r2, [pc, #88]	@ (8000dd0 <HAL_OPAMP_MspInit+0x84>)
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8000d7e:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <HAL_OPAMP_MspInit+0x84>)
 8000d80:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000d84:	f003 0310 	and.w	r3, r3, #16
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8c:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_OPAMP_MspInit+0x84>)
 8000d8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d92:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd0 <HAL_OPAMP_MspInit+0x84>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <HAL_OPAMP_MspInit+0x84>)
 8000d9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PC4     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000daa:	2310      	movs	r3, #16
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dae:	2303      	movs	r3, #3
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <HAL_OPAMP_MspInit+0x88>)
 8000dbe:	f003 fd6f 	bl	80048a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	@ 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40009000 	.word	0x40009000
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58020800 	.word	0x58020800

08000dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e14 <HAL_TIM_Base_MspInit+0x3c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10e      	bne.n	8000e08 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <HAL_TIM_Base_MspInit+0x40>)
 8000dec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000df0:	4a09      	ldr	r2, [pc, #36]	@ (8000e18 <HAL_TIM_Base_MspInit+0x40>)
 8000df2:	f043 0310 	orr.w	r3, r3, #16
 8000df6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <HAL_TIM_Base_MspInit+0x40>)
 8000dfc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	40001000 	.word	0x40001000
 8000e18:	58024400 	.word	0x58024400

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0ba      	sub	sp, #232	@ 0xe8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	22c0      	movs	r2, #192	@ 0xc0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f009 fc0f 	bl	800a660 <memset>
  if(huart->Instance==USART3)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a42      	ldr	r2, [pc, #264]	@ (8000f50 <HAL_UART_MspInit+0x134>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d17d      	bne.n	8000f48 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e4c:	f04f 0202 	mov.w	r2, #2
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4618      	mov	r0, r3
 8000e64:	f005 f858 	bl	8005f18 <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e6e:	f7ff fef7 	bl	8000c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e72:	4b38      	ldr	r3, [pc, #224]	@ (8000f54 <HAL_UART_MspInit+0x138>)
 8000e74:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e78:	4a36      	ldr	r2, [pc, #216]	@ (8000f54 <HAL_UART_MspInit+0x138>)
 8000e7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e7e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e82:	4b34      	ldr	r3, [pc, #208]	@ (8000f54 <HAL_UART_MspInit+0x138>)
 8000e84:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e90:	4b30      	ldr	r3, [pc, #192]	@ (8000f54 <HAL_UART_MspInit+0x138>)
 8000e92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e96:	4a2f      	ldr	r2, [pc, #188]	@ (8000f54 <HAL_UART_MspInit+0x138>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f54 <HAL_UART_MspInit+0x138>)
 8000ea2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ece:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4820      	ldr	r0, [pc, #128]	@ (8000f58 <HAL_UART_MspInit+0x13c>)
 8000ed6:	f003 fce3 	bl	80048a0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000eda:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000edc:	4a20      	ldr	r2, [pc, #128]	@ (8000f60 <HAL_UART_MspInit+0x144>)
 8000ede:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000ee2:	222d      	movs	r2, #45	@ 0x2d
 8000ee4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000ef4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000efa:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f00:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000f08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f0c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f1a:	4810      	ldr	r0, [pc, #64]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000f1c:	f000 fde2 	bl	8001ae4 <HAL_DMA_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000f26:	f7ff fe9b 	bl	8000c60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000f2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <HAL_UART_MspInit+0x140>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2027      	movs	r0, #39	@ 0x27
 8000f3e:	f000 fa7a 	bl	8001436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f42:	2027      	movs	r0, #39	@ 0x27
 8000f44:	f000 fa91 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	37e8      	adds	r7, #232	@ 0xe8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40004800 	.word	0x40004800
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020c00 	.word	0x58020c00
 8000f5c:	24002d8c 	.word	0x24002d8c
 8000f60:	40020028 	.word	0x40020028

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f935 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <DMA1_Stream0_IRQHandler+0x10>)
 8000fca:	f002 f8e7 	bl	800319c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	24002c00 	.word	0x24002c00

08000fd8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <DMA1_Stream1_IRQHandler+0x10>)
 8000fde:	f002 f8dd 	bl	800319c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	24002d8c 	.word	0x24002d8c

08000fec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <USART3_IRQHandler+0x10>)
 8000ff2:	f007 f8ed 	bl	80081d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	24002cf8 	.word	0x24002cf8

08001000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001004:	4b32      	ldr	r3, [pc, #200]	@ (80010d0 <SystemInit+0xd0>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100a:	4a31      	ldr	r2, [pc, #196]	@ (80010d0 <SystemInit+0xd0>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001014:	4b2f      	ldr	r3, [pc, #188]	@ (80010d4 <SystemInit+0xd4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 030f 	and.w	r3, r3, #15
 800101c:	2b02      	cmp	r3, #2
 800101e:	d807      	bhi.n	8001030 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001020:	4b2c      	ldr	r3, [pc, #176]	@ (80010d4 <SystemInit+0xd4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f023 030f 	bic.w	r3, r3, #15
 8001028:	4a2a      	ldr	r2, [pc, #168]	@ (80010d4 <SystemInit+0xd4>)
 800102a:	f043 0303 	orr.w	r3, r3, #3
 800102e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001030:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <SystemInit+0xd8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a28      	ldr	r2, [pc, #160]	@ (80010d8 <SystemInit+0xd8>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800103c:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <SystemInit+0xd8>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001042:	4b25      	ldr	r3, [pc, #148]	@ (80010d8 <SystemInit+0xd8>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4924      	ldr	r1, [pc, #144]	@ (80010d8 <SystemInit+0xd8>)
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <SystemInit+0xdc>)
 800104a:	4013      	ands	r3, r2
 800104c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <SystemInit+0xd4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800105a:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <SystemInit+0xd4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f023 030f 	bic.w	r3, r3, #15
 8001062:	4a1c      	ldr	r2, [pc, #112]	@ (80010d4 <SystemInit+0xd4>)
 8001064:	f043 0303 	orr.w	r3, r3, #3
 8001068:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800106a:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <SystemInit+0xd8>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <SystemInit+0xd8>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <SystemInit+0xd8>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <SystemInit+0xd8>)
 800107e:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <SystemInit+0xe0>)
 8001080:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <SystemInit+0xd8>)
 8001084:	4a17      	ldr	r2, [pc, #92]	@ (80010e4 <SystemInit+0xe4>)
 8001086:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <SystemInit+0xd8>)
 800108a:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <SystemInit+0xe8>)
 800108c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800108e:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <SystemInit+0xd8>)
 8001090:	2200      	movs	r2, #0
 8001092:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001094:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <SystemInit+0xd8>)
 8001096:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <SystemInit+0xe8>)
 8001098:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <SystemInit+0xd8>)
 800109c:	2200      	movs	r2, #0
 800109e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <SystemInit+0xd8>)
 80010a2:	4a11      	ldr	r2, [pc, #68]	@ (80010e8 <SystemInit+0xe8>)
 80010a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <SystemInit+0xd8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <SystemInit+0xd8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a09      	ldr	r2, [pc, #36]	@ (80010d8 <SystemInit+0xd8>)
 80010b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <SystemInit+0xd8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <SystemInit+0xec>)
 80010c0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80010c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00
 80010d4:	52002000 	.word	0x52002000
 80010d8:	58024400 	.word	0x58024400
 80010dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80010e0:	02020200 	.word	0x02020200
 80010e4:	01ff0000 	.word	0x01ff0000
 80010e8:	01010280 	.word	0x01010280
 80010ec:	52004000 	.word	0x52004000

080010f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001128 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f4:	f7ff ff84 	bl	8001000 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	@ (8001130 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	@ (800113c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800111e:	f009 faa7 	bl	800a670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001122:	f7ff fb17 	bl	8000754 <main>
  bx  lr
 8001126:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800112c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001130:	24002bd0 	.word	0x24002bd0
  ldr r2, =_sidata
 8001134:	0800bca0 	.word	0x0800bca0
  ldr r2, =_sbss
 8001138:	24002bd0 	.word	0x24002bd0
  ldr r4, =_ebss
 800113c:	24007e18 	.word	0x24007e18

08001140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC_IRQHandler>
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114a:	2003      	movs	r0, #3
 800114c:	f000 f968 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001150:	f004 fd0c 	bl	8005b6c <HAL_RCC_GetSysClockFreq>
 8001154:	4602      	mov	r2, r0
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_Init+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	0a1b      	lsrs	r3, r3, #8
 800115c:	f003 030f 	and.w	r3, r3, #15
 8001160:	4913      	ldr	r1, [pc, #76]	@ (80011b0 <HAL_Init+0x6c>)
 8001162:	5ccb      	ldrb	r3, [r1, r3]
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800116e:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <HAL_Init+0x68>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	4a0e      	ldr	r2, [pc, #56]	@ (80011b0 <HAL_Init+0x6c>)
 8001178:	5cd3      	ldrb	r3, [r2, r3]
 800117a:	f003 031f 	and.w	r3, r3, #31
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <HAL_Init+0x70>)
 8001186:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001188:	4a0b      	ldr	r2, [pc, #44]	@ (80011b8 <HAL_Init+0x74>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118e:	200f      	movs	r0, #15
 8001190:	f000 f814 	bl	80011bc <HAL_InitTick>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e002      	b.n	80011a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800119e:	f7ff fd65 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	58024400 	.word	0x58024400
 80011b0:	0800ba78 	.word	0x0800ba78
 80011b4:	24002bc4 	.word	0x24002bc4
 80011b8:	24002bc0 	.word	0x24002bc0

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <HAL_InitTick+0x60>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e021      	b.n	8001214 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <HAL_InitTick+0x64>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <HAL_InitTick+0x60>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f94d 	bl	8001486 <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f917 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <HAL_InitTick+0x68>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	24002bcc 	.word	0x24002bcc
 8001220:	24002bc0 	.word	0x24002bc0
 8001224:	24002bc8 	.word	0x24002bc8

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	@ (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	24002bcc 	.word	0x24002bcc
 800124c:	24007e14 	.word	0x24007e14

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	24007e14 	.word	0x24007e14

08001268 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <HAL_GetREVID+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0c1b      	lsrs	r3, r3, #16
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	5c001000 	.word	0x5c001000

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x40>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00
 80012c4:	05fa0000 	.word	0x05fa0000

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	@ (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	@ (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	@ (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	@ (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff29 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff40 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff90 	bl	8001374 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5f 	bl	8001320 <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff33 	bl	80012e4 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa4 	bl	80013dc <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e014      	b.n	80014da <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	791b      	ldrb	r3, [r3, #4]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d105      	bne.n	80014c6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fbed 	bl	8000ca0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2202      	movs	r2, #2
 80014ca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e046      	b.n	8001584 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	795b      	ldrb	r3, [r3, #5]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_DAC_Start+0x20>
 80014fe:	2302      	movs	r3, #2
 8001500:	e040      	b.n	8001584 <HAL_DAC_Start+0xa2>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6819      	ldr	r1, [r3, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2201      	movs	r2, #1
 800151c:	409a      	lsls	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10f      	bne.n	800154c <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001536:	2b02      	cmp	r3, #2
 8001538:	d11d      	bne.n	8001576 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	e014      	b.n	8001576 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2102      	movs	r1, #2
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	429a      	cmp	r2, r3
 8001564:	d107      	bne.n	8001576 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0202 	orr.w	r2, r2, #2
 8001574:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0a2      	b.n	80016ee <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	795b      	ldrb	r3, [r3, #5]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_DAC_Start_DMA+0x24>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e09c      	b.n	80016ee <HAL_DAC_Start_DMA+0x15e>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2201      	movs	r2, #1
 80015b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2202      	movs	r2, #2
 80015be:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d129      	bne.n	800161a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	4a4b      	ldr	r2, [pc, #300]	@ (80016f8 <HAL_DAC_Start_DMA+0x168>)
 80015cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	4a4a      	ldr	r2, [pc, #296]	@ (80016fc <HAL_DAC_Start_DMA+0x16c>)
 80015d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4a49      	ldr	r2, [pc, #292]	@ (8001700 <HAL_DAC_Start_DMA+0x170>)
 80015dc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80015ec:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_DAC_Start_DMA+0x6c>
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d005      	beq.n	8001606 <HAL_DAC_Start_DMA+0x76>
 80015fa:	e009      	b.n	8001610 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3308      	adds	r3, #8
 8001602:	613b      	str	r3, [r7, #16]
        break;
 8001604:	e033      	b.n	800166e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	330c      	adds	r3, #12
 800160c:	613b      	str	r3, [r7, #16]
        break;
 800160e:	e02e      	b.n	800166e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3310      	adds	r3, #16
 8001616:	613b      	str	r3, [r7, #16]
        break;
 8001618:	e029      	b.n	800166e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	4a39      	ldr	r2, [pc, #228]	@ (8001704 <HAL_DAC_Start_DMA+0x174>)
 8001620:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	4a38      	ldr	r2, [pc, #224]	@ (8001708 <HAL_DAC_Start_DMA+0x178>)
 8001628:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	4a37      	ldr	r2, [pc, #220]	@ (800170c <HAL_DAC_Start_DMA+0x17c>)
 8001630:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001640:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_DAC_Start_DMA+0xc0>
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	2b04      	cmp	r3, #4
 800164c:	d005      	beq.n	800165a <HAL_DAC_Start_DMA+0xca>
 800164e:	e009      	b.n	8001664 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3314      	adds	r3, #20
 8001656:	613b      	str	r3, [r7, #16]
        break;
 8001658:	e009      	b.n	800166e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3318      	adds	r3, #24
 8001660:	613b      	str	r3, [r7, #16]
        break;
 8001662:	e004      	b.n	800166e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	331c      	adds	r3, #28
 800166a:	613b      	str	r3, [r7, #16]
        break;
 800166c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d111      	bne.n	8001698 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001682:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6898      	ldr	r0, [r3, #8]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	f000 fdb7 	bl	8002200 <HAL_DMA_Start_IT>
 8001692:	4603      	mov	r3, r0
 8001694:	75fb      	strb	r3, [r7, #23]
 8001696:	e010      	b.n	80016ba <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80016a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	68d8      	ldr	r0, [r3, #12]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	f000 fda5 	bl	8002200 <HAL_DMA_Start_IT>
 80016b6:	4603      	mov	r3, r0
 80016b8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6819      	ldr	r1, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2201      	movs	r2, #1
 80016d4:	409a      	lsls	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e005      	b.n	80016ec <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	f043 0204 	orr.w	r2, r3, #4
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	080019d1 	.word	0x080019d1
 80016fc:	080019f3 	.word	0x080019f3
 8001700:	08001a0f 	.word	0x08001a0f
 8001704:	08001a79 	.word	0x08001a79
 8001708:	08001a9b 	.word	0x08001a9b
 800170c:	08001ab7 	.word	0x08001ab7

08001710 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <HAL_DAC_ConfigChannel+0x1e>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e12a      	b.n	80019c4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	795b      	ldrb	r3, [r3, #5]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_DAC_ConfigChannel+0x2e>
 8001776:	2302      	movs	r3, #2
 8001778:	e124      	b.n	80019c4 <HAL_DAC_ConfigChannel+0x278>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2202      	movs	r2, #2
 8001784:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b04      	cmp	r3, #4
 800178c:	d17a      	bne.n	8001884 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800178e:	f7ff fd5f 	bl	8001250 <HAL_GetTick>
 8001792:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d13d      	bne.n	8001816 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800179a:	e018      	b.n	80017ce <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800179c:	f7ff fd58 	bl	8001250 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d911      	bls.n	80017ce <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017b0:	4b86      	ldr	r3, [pc, #536]	@ (80019cc <HAL_DAC_ConfigChannel+0x280>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00a      	beq.n	80017ce <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	f043 0208 	orr.w	r2, r3, #8
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2203      	movs	r2, #3
 80017c8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e0fa      	b.n	80019c4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017d4:	4b7d      	ldr	r3, [pc, #500]	@ (80019cc <HAL_DAC_ConfigChannel+0x280>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1df      	bne.n	800179c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	6992      	ldr	r2, [r2, #24]
 80017e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017e6:	e020      	b.n	800182a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80017e8:	f7ff fd32 	bl	8001250 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d90f      	bls.n	8001816 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da0a      	bge.n	8001816 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	f043 0208 	orr.w	r2, r3, #8
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2203      	movs	r2, #3
 8001810:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0d6      	b.n	80019c4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181c:	2b00      	cmp	r3, #0
 800181e:	dbe3      	blt.n	80017e8 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	6992      	ldr	r2, [r2, #24]
 8001828:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	ea02 0103 	and.w	r1, r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	69da      	ldr	r2, [r3, #28]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	21ff      	movs	r1, #255	@ 0xff
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	ea02 0103 	and.w	r1, r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	6a1a      	ldr	r2, [r3, #32]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d11d      	bne.n	80018c8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001892:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	221f      	movs	r2, #31
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ce:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	2207      	movs	r2, #7
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d102      	bne.n	80018f2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f0:	e00f      	b.n	8001912 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d102      	bne.n	8001900 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80018fa:	2301      	movs	r3, #1
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80018fe:	e008      	b.n	8001912 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001908:	2301      	movs	r3, #1
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
 800190c:	e001      	b.n	8001912 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	4313      	orrs	r3, r2
 800191c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800191e:	4313      	orrs	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6819      	ldr	r1, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43da      	mvns	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	400a      	ands	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6819      	ldr	r1, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	22c0      	movs	r2, #192	@ 0xc0
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	400a      	ands	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2201      	movs	r2, #1
 80019b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80019c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3728      	adds	r7, #40	@ 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20008000 	.word	0x20008000

080019d0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f7ff fe96 	bl	8001710 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2201      	movs	r2, #1
 80019e8:	711a      	strb	r2, [r3, #4]
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019fe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f7ff fe8f 	bl	8001724 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f043 0204 	orr.w	r2, r3, #4
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f7ff fe85 	bl	8001738 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	711a      	strb	r2, [r3, #4]
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff ffd8 	bl	8001a3c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	711a      	strb	r2, [r3, #4]
}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff ffd1 	bl	8001a50 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f043 0204 	orr.w	r2, r3, #4
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f7ff ffc7 	bl	8001a64 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	711a      	strb	r2, [r3, #4]
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff fbb0 	bl	8001250 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e37d      	b.n	80021f8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a66      	ldr	r2, [pc, #408]	@ (8001c9c <HAL_DMA_Init+0x1b8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d04a      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a65      	ldr	r2, [pc, #404]	@ (8001ca0 <HAL_DMA_Init+0x1bc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d045      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a63      	ldr	r2, [pc, #396]	@ (8001ca4 <HAL_DMA_Init+0x1c0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d040      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a62      	ldr	r2, [pc, #392]	@ (8001ca8 <HAL_DMA_Init+0x1c4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d03b      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a60      	ldr	r2, [pc, #384]	@ (8001cac <HAL_DMA_Init+0x1c8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d036      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a5f      	ldr	r2, [pc, #380]	@ (8001cb0 <HAL_DMA_Init+0x1cc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d031      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a5d      	ldr	r2, [pc, #372]	@ (8001cb4 <HAL_DMA_Init+0x1d0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d02c      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a5c      	ldr	r2, [pc, #368]	@ (8001cb8 <HAL_DMA_Init+0x1d4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d027      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a5a      	ldr	r2, [pc, #360]	@ (8001cbc <HAL_DMA_Init+0x1d8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d022      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a59      	ldr	r2, [pc, #356]	@ (8001cc0 <HAL_DMA_Init+0x1dc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d01d      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a57      	ldr	r2, [pc, #348]	@ (8001cc4 <HAL_DMA_Init+0x1e0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d018      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a56      	ldr	r2, [pc, #344]	@ (8001cc8 <HAL_DMA_Init+0x1e4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d013      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a54      	ldr	r2, [pc, #336]	@ (8001ccc <HAL_DMA_Init+0x1e8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00e      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a53      	ldr	r2, [pc, #332]	@ (8001cd0 <HAL_DMA_Init+0x1ec>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a51      	ldr	r2, [pc, #324]	@ (8001cd4 <HAL_DMA_Init+0x1f0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_DMA_Init+0xb8>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a50      	ldr	r2, [pc, #320]	@ (8001cd8 <HAL_DMA_Init+0x1f4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_DMA_Init+0xbc>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_DMA_Init+0xbe>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 813c 	beq.w	8001e20 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a37      	ldr	r2, [pc, #220]	@ (8001c9c <HAL_DMA_Init+0x1b8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d04a      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a36      	ldr	r2, [pc, #216]	@ (8001ca0 <HAL_DMA_Init+0x1bc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d045      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a34      	ldr	r2, [pc, #208]	@ (8001ca4 <HAL_DMA_Init+0x1c0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d040      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a33      	ldr	r2, [pc, #204]	@ (8001ca8 <HAL_DMA_Init+0x1c4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d03b      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a31      	ldr	r2, [pc, #196]	@ (8001cac <HAL_DMA_Init+0x1c8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d036      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a30      	ldr	r2, [pc, #192]	@ (8001cb0 <HAL_DMA_Init+0x1cc>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d031      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8001cb4 <HAL_DMA_Init+0x1d0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d02c      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb8 <HAL_DMA_Init+0x1d4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d027      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cbc <HAL_DMA_Init+0x1d8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d022      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a2a      	ldr	r2, [pc, #168]	@ (8001cc0 <HAL_DMA_Init+0x1dc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d01d      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a28      	ldr	r2, [pc, #160]	@ (8001cc4 <HAL_DMA_Init+0x1e0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d018      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a27      	ldr	r2, [pc, #156]	@ (8001cc8 <HAL_DMA_Init+0x1e4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d013      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a25      	ldr	r2, [pc, #148]	@ (8001ccc <HAL_DMA_Init+0x1e8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00e      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a24      	ldr	r2, [pc, #144]	@ (8001cd0 <HAL_DMA_Init+0x1ec>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d009      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a22      	ldr	r2, [pc, #136]	@ (8001cd4 <HAL_DMA_Init+0x1f0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d004      	beq.n	8001c58 <HAL_DMA_Init+0x174>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a21      	ldr	r2, [pc, #132]	@ (8001cd8 <HAL_DMA_Init+0x1f4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d108      	bne.n	8001c6a <HAL_DMA_Init+0x186>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e007      	b.n	8001c7a <HAL_DMA_Init+0x196>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c7a:	e02f      	b.n	8001cdc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7c:	f7ff fae8 	bl	8001250 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d928      	bls.n	8001cdc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2203      	movs	r2, #3
 8001c94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e2ad      	b.n	80021f8 <HAL_DMA_Init+0x714>
 8001c9c:	40020010 	.word	0x40020010
 8001ca0:	40020028 	.word	0x40020028
 8001ca4:	40020040 	.word	0x40020040
 8001ca8:	40020058 	.word	0x40020058
 8001cac:	40020070 	.word	0x40020070
 8001cb0:	40020088 	.word	0x40020088
 8001cb4:	400200a0 	.word	0x400200a0
 8001cb8:	400200b8 	.word	0x400200b8
 8001cbc:	40020410 	.word	0x40020410
 8001cc0:	40020428 	.word	0x40020428
 8001cc4:	40020440 	.word	0x40020440
 8001cc8:	40020458 	.word	0x40020458
 8001ccc:	40020470 	.word	0x40020470
 8001cd0:	40020488 	.word	0x40020488
 8001cd4:	400204a0 	.word	0x400204a0
 8001cd8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1c8      	bne.n	8001c7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4b73      	ldr	r3, [pc, #460]	@ (8001ec4 <HAL_DMA_Init+0x3e0>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d02:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d107      	bne.n	8001d40 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b28      	cmp	r3, #40	@ 0x28
 8001d46:	d903      	bls.n	8001d50 <HAL_DMA_Init+0x26c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d4e:	d91f      	bls.n	8001d90 <HAL_DMA_Init+0x2ac>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d56:	d903      	bls.n	8001d60 <HAL_DMA_Init+0x27c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b42      	cmp	r3, #66	@ 0x42
 8001d5e:	d917      	bls.n	8001d90 <HAL_DMA_Init+0x2ac>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b46      	cmp	r3, #70	@ 0x46
 8001d66:	d903      	bls.n	8001d70 <HAL_DMA_Init+0x28c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b48      	cmp	r3, #72	@ 0x48
 8001d6e:	d90f      	bls.n	8001d90 <HAL_DMA_Init+0x2ac>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b4e      	cmp	r3, #78	@ 0x4e
 8001d76:	d903      	bls.n	8001d80 <HAL_DMA_Init+0x29c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b52      	cmp	r3, #82	@ 0x52
 8001d7e:	d907      	bls.n	8001d90 <HAL_DMA_Init+0x2ac>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b73      	cmp	r3, #115	@ 0x73
 8001d86:	d905      	bls.n	8001d94 <HAL_DMA_Init+0x2b0>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b77      	cmp	r3, #119	@ 0x77
 8001d8e:	d801      	bhi.n	8001d94 <HAL_DMA_Init+0x2b0>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <HAL_DMA_Init+0x2b2>
 8001d94:	2300      	movs	r3, #0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001da0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f023 0307 	bic.w	r3, r3, #7
 8001db8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d117      	bne.n	8001dfc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00e      	beq.n	8001dfc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f002 fbd4 	bl	800458c <DMA_CheckFifoParam>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2240      	movs	r2, #64	@ 0x40
 8001dee:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e1fd      	b.n	80021f8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f002 fb0f 	bl	8004428 <DMA_CalcBaseAndBitshift>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	223f      	movs	r2, #63	@ 0x3f
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	e0fd      	b.n	800201c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a28      	ldr	r2, [pc, #160]	@ (8001ec8 <HAL_DMA_Init+0x3e4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d04a      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a27      	ldr	r2, [pc, #156]	@ (8001ecc <HAL_DMA_Init+0x3e8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d045      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a25      	ldr	r2, [pc, #148]	@ (8001ed0 <HAL_DMA_Init+0x3ec>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d040      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a24      	ldr	r2, [pc, #144]	@ (8001ed4 <HAL_DMA_Init+0x3f0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d03b      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a22      	ldr	r2, [pc, #136]	@ (8001ed8 <HAL_DMA_Init+0x3f4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d036      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a21      	ldr	r2, [pc, #132]	@ (8001edc <HAL_DMA_Init+0x3f8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d031      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee0 <HAL_DMA_Init+0x3fc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d02c      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee4 <HAL_DMA_Init+0x400>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d027      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee8 <HAL_DMA_Init+0x404>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d022      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001eec <HAL_DMA_Init+0x408>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d01d      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a19      	ldr	r2, [pc, #100]	@ (8001ef0 <HAL_DMA_Init+0x40c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d018      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a18      	ldr	r2, [pc, #96]	@ (8001ef4 <HAL_DMA_Init+0x410>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d013      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a16      	ldr	r2, [pc, #88]	@ (8001ef8 <HAL_DMA_Init+0x414>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00e      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a15      	ldr	r2, [pc, #84]	@ (8001efc <HAL_DMA_Init+0x418>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d009      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a13      	ldr	r2, [pc, #76]	@ (8001f00 <HAL_DMA_Init+0x41c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d004      	beq.n	8001ec0 <HAL_DMA_Init+0x3dc>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <HAL_DMA_Init+0x420>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d123      	bne.n	8001f08 <HAL_DMA_Init+0x424>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e022      	b.n	8001f0a <HAL_DMA_Init+0x426>
 8001ec4:	fe10803f 	.word	0xfe10803f
 8001ec8:	48022c08 	.word	0x48022c08
 8001ecc:	48022c1c 	.word	0x48022c1c
 8001ed0:	48022c30 	.word	0x48022c30
 8001ed4:	48022c44 	.word	0x48022c44
 8001ed8:	48022c58 	.word	0x48022c58
 8001edc:	48022c6c 	.word	0x48022c6c
 8001ee0:	48022c80 	.word	0x48022c80
 8001ee4:	48022c94 	.word	0x48022c94
 8001ee8:	58025408 	.word	0x58025408
 8001eec:	5802541c 	.word	0x5802541c
 8001ef0:	58025430 	.word	0x58025430
 8001ef4:	58025444 	.word	0x58025444
 8001ef8:	58025458 	.word	0x58025458
 8001efc:	5802546c 	.word	0x5802546c
 8001f00:	58025480 	.word	0x58025480
 8001f04:	58025494 	.word	0x58025494
 8001f08:	2300      	movs	r3, #0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d07d      	beq.n	800200a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a7f      	ldr	r2, [pc, #508]	@ (8002110 <HAL_DMA_Init+0x62c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d021      	beq.n	8001f5c <HAL_DMA_Init+0x478>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a7d      	ldr	r2, [pc, #500]	@ (8002114 <HAL_DMA_Init+0x630>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01c      	beq.n	8001f5c <HAL_DMA_Init+0x478>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a7c      	ldr	r2, [pc, #496]	@ (8002118 <HAL_DMA_Init+0x634>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d017      	beq.n	8001f5c <HAL_DMA_Init+0x478>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a7a      	ldr	r2, [pc, #488]	@ (800211c <HAL_DMA_Init+0x638>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d012      	beq.n	8001f5c <HAL_DMA_Init+0x478>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a79      	ldr	r2, [pc, #484]	@ (8002120 <HAL_DMA_Init+0x63c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d00d      	beq.n	8001f5c <HAL_DMA_Init+0x478>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a77      	ldr	r2, [pc, #476]	@ (8002124 <HAL_DMA_Init+0x640>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d008      	beq.n	8001f5c <HAL_DMA_Init+0x478>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a76      	ldr	r2, [pc, #472]	@ (8002128 <HAL_DMA_Init+0x644>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d003      	beq.n	8001f5c <HAL_DMA_Init+0x478>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a74      	ldr	r2, [pc, #464]	@ (800212c <HAL_DMA_Init+0x648>)
 8001f5a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4b6e      	ldr	r3, [pc, #440]	@ (8002130 <HAL_DMA_Init+0x64c>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b40      	cmp	r3, #64	@ 0x40
 8001f82:	d008      	beq.n	8001f96 <HAL_DMA_Init+0x4b2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b80      	cmp	r3, #128	@ 0x80
 8001f8a:	d102      	bne.n	8001f92 <HAL_DMA_Init+0x4ae>
 8001f8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f90:	e002      	b.n	8001f98 <HAL_DMA_Init+0x4b4>
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_DMA_Init+0x4b4>
 8001f96:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	68d2      	ldr	r2, [r2, #12]
 8001f9c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f9e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fa6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fb6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fbe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fc6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b55      	ldr	r3, [pc, #340]	@ (8002134 <HAL_DMA_Init+0x650>)
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a55      	ldr	r2, [pc, #340]	@ (8002138 <HAL_DMA_Init+0x654>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	009a      	lsls	r2, r3, #2
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f002 fa1a 	bl	8004428 <DMA_CalcBaseAndBitshift>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	2201      	movs	r2, #1
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	e008      	b.n	800201c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2240      	movs	r2, #64	@ 0x40
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2203      	movs	r2, #3
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0ed      	b.n	80021f8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a46      	ldr	r2, [pc, #280]	@ (800213c <HAL_DMA_Init+0x658>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d072      	beq.n	800210c <HAL_DMA_Init+0x628>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a45      	ldr	r2, [pc, #276]	@ (8002140 <HAL_DMA_Init+0x65c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d06d      	beq.n	800210c <HAL_DMA_Init+0x628>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a43      	ldr	r2, [pc, #268]	@ (8002144 <HAL_DMA_Init+0x660>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d068      	beq.n	800210c <HAL_DMA_Init+0x628>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a42      	ldr	r2, [pc, #264]	@ (8002148 <HAL_DMA_Init+0x664>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d063      	beq.n	800210c <HAL_DMA_Init+0x628>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a40      	ldr	r2, [pc, #256]	@ (800214c <HAL_DMA_Init+0x668>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d05e      	beq.n	800210c <HAL_DMA_Init+0x628>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a3f      	ldr	r2, [pc, #252]	@ (8002150 <HAL_DMA_Init+0x66c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d059      	beq.n	800210c <HAL_DMA_Init+0x628>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a3d      	ldr	r2, [pc, #244]	@ (8002154 <HAL_DMA_Init+0x670>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d054      	beq.n	800210c <HAL_DMA_Init+0x628>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a3c      	ldr	r2, [pc, #240]	@ (8002158 <HAL_DMA_Init+0x674>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d04f      	beq.n	800210c <HAL_DMA_Init+0x628>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a3a      	ldr	r2, [pc, #232]	@ (800215c <HAL_DMA_Init+0x678>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d04a      	beq.n	800210c <HAL_DMA_Init+0x628>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a39      	ldr	r2, [pc, #228]	@ (8002160 <HAL_DMA_Init+0x67c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d045      	beq.n	800210c <HAL_DMA_Init+0x628>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a37      	ldr	r2, [pc, #220]	@ (8002164 <HAL_DMA_Init+0x680>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d040      	beq.n	800210c <HAL_DMA_Init+0x628>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a36      	ldr	r2, [pc, #216]	@ (8002168 <HAL_DMA_Init+0x684>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d03b      	beq.n	800210c <HAL_DMA_Init+0x628>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a34      	ldr	r2, [pc, #208]	@ (800216c <HAL_DMA_Init+0x688>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d036      	beq.n	800210c <HAL_DMA_Init+0x628>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a33      	ldr	r2, [pc, #204]	@ (8002170 <HAL_DMA_Init+0x68c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d031      	beq.n	800210c <HAL_DMA_Init+0x628>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a31      	ldr	r2, [pc, #196]	@ (8002174 <HAL_DMA_Init+0x690>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d02c      	beq.n	800210c <HAL_DMA_Init+0x628>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a30      	ldr	r2, [pc, #192]	@ (8002178 <HAL_DMA_Init+0x694>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d027      	beq.n	800210c <HAL_DMA_Init+0x628>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a13      	ldr	r2, [pc, #76]	@ (8002110 <HAL_DMA_Init+0x62c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d022      	beq.n	800210c <HAL_DMA_Init+0x628>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a12      	ldr	r2, [pc, #72]	@ (8002114 <HAL_DMA_Init+0x630>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d01d      	beq.n	800210c <HAL_DMA_Init+0x628>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a10      	ldr	r2, [pc, #64]	@ (8002118 <HAL_DMA_Init+0x634>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d018      	beq.n	800210c <HAL_DMA_Init+0x628>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a0f      	ldr	r2, [pc, #60]	@ (800211c <HAL_DMA_Init+0x638>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d013      	beq.n	800210c <HAL_DMA_Init+0x628>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <HAL_DMA_Init+0x63c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00e      	beq.n	800210c <HAL_DMA_Init+0x628>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002124 <HAL_DMA_Init+0x640>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_DMA_Init+0x628>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <HAL_DMA_Init+0x644>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d004      	beq.n	800210c <HAL_DMA_Init+0x628>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a09      	ldr	r2, [pc, #36]	@ (800212c <HAL_DMA_Init+0x648>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d137      	bne.n	800217c <HAL_DMA_Init+0x698>
 800210c:	2301      	movs	r3, #1
 800210e:	e036      	b.n	800217e <HAL_DMA_Init+0x69a>
 8002110:	58025408 	.word	0x58025408
 8002114:	5802541c 	.word	0x5802541c
 8002118:	58025430 	.word	0x58025430
 800211c:	58025444 	.word	0x58025444
 8002120:	58025458 	.word	0x58025458
 8002124:	5802546c 	.word	0x5802546c
 8002128:	58025480 	.word	0x58025480
 800212c:	58025494 	.word	0x58025494
 8002130:	fffe000f 	.word	0xfffe000f
 8002134:	a7fdabf8 	.word	0xa7fdabf8
 8002138:	cccccccd 	.word	0xcccccccd
 800213c:	40020010 	.word	0x40020010
 8002140:	40020028 	.word	0x40020028
 8002144:	40020040 	.word	0x40020040
 8002148:	40020058 	.word	0x40020058
 800214c:	40020070 	.word	0x40020070
 8002150:	40020088 	.word	0x40020088
 8002154:	400200a0 	.word	0x400200a0
 8002158:	400200b8 	.word	0x400200b8
 800215c:	40020410 	.word	0x40020410
 8002160:	40020428 	.word	0x40020428
 8002164:	40020440 	.word	0x40020440
 8002168:	40020458 	.word	0x40020458
 800216c:	40020470 	.word	0x40020470
 8002170:	40020488 	.word	0x40020488
 8002174:	400204a0 	.word	0x400204a0
 8002178:	400204b8 	.word	0x400204b8
 800217c:	2300      	movs	r3, #0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d032      	beq.n	80021e8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f002 fa7e 	bl	8004684 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b80      	cmp	r3, #128	@ 0x80
 800218e:	d102      	bne.n	8002196 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021aa:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_DMA_Init+0x6f2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d80c      	bhi.n	80021d6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f002 fafb 	bl	80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	e008      	b.n	80021e8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e226      	b.n	800266a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_DMA_Start_IT+0x2a>
 8002226:	2302      	movs	r3, #2
 8002228:	e21f      	b.n	800266a <HAL_DMA_Start_IT+0x46a>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	f040 820a 	bne.w	8002654 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a68      	ldr	r2, [pc, #416]	@ (80023f4 <HAL_DMA_Start_IT+0x1f4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d04a      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a66      	ldr	r2, [pc, #408]	@ (80023f8 <HAL_DMA_Start_IT+0x1f8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d045      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a65      	ldr	r2, [pc, #404]	@ (80023fc <HAL_DMA_Start_IT+0x1fc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d040      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a63      	ldr	r2, [pc, #396]	@ (8002400 <HAL_DMA_Start_IT+0x200>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d03b      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a62      	ldr	r2, [pc, #392]	@ (8002404 <HAL_DMA_Start_IT+0x204>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d036      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a60      	ldr	r2, [pc, #384]	@ (8002408 <HAL_DMA_Start_IT+0x208>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d031      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a5f      	ldr	r2, [pc, #380]	@ (800240c <HAL_DMA_Start_IT+0x20c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d02c      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a5d      	ldr	r2, [pc, #372]	@ (8002410 <HAL_DMA_Start_IT+0x210>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d027      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002414 <HAL_DMA_Start_IT+0x214>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d022      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a5a      	ldr	r2, [pc, #360]	@ (8002418 <HAL_DMA_Start_IT+0x218>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01d      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a59      	ldr	r2, [pc, #356]	@ (800241c <HAL_DMA_Start_IT+0x21c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d018      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a57      	ldr	r2, [pc, #348]	@ (8002420 <HAL_DMA_Start_IT+0x220>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a56      	ldr	r2, [pc, #344]	@ (8002424 <HAL_DMA_Start_IT+0x224>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00e      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a54      	ldr	r2, [pc, #336]	@ (8002428 <HAL_DMA_Start_IT+0x228>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a53      	ldr	r2, [pc, #332]	@ (800242c <HAL_DMA_Start_IT+0x22c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d004      	beq.n	80022ee <HAL_DMA_Start_IT+0xee>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a51      	ldr	r2, [pc, #324]	@ (8002430 <HAL_DMA_Start_IT+0x230>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d108      	bne.n	8002300 <HAL_DMA_Start_IT+0x100>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0201 	bic.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e007      	b.n	8002310 <HAL_DMA_Start_IT+0x110>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f001 fea2 	bl	8004060 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a34      	ldr	r2, [pc, #208]	@ (80023f4 <HAL_DMA_Start_IT+0x1f4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d04a      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a33      	ldr	r2, [pc, #204]	@ (80023f8 <HAL_DMA_Start_IT+0x1f8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d045      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a31      	ldr	r2, [pc, #196]	@ (80023fc <HAL_DMA_Start_IT+0x1fc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d040      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a30      	ldr	r2, [pc, #192]	@ (8002400 <HAL_DMA_Start_IT+0x200>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d03b      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2e      	ldr	r2, [pc, #184]	@ (8002404 <HAL_DMA_Start_IT+0x204>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d036      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2d      	ldr	r2, [pc, #180]	@ (8002408 <HAL_DMA_Start_IT+0x208>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d031      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a2b      	ldr	r2, [pc, #172]	@ (800240c <HAL_DMA_Start_IT+0x20c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d02c      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a2a      	ldr	r2, [pc, #168]	@ (8002410 <HAL_DMA_Start_IT+0x210>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d027      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a28      	ldr	r2, [pc, #160]	@ (8002414 <HAL_DMA_Start_IT+0x214>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d022      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a27      	ldr	r2, [pc, #156]	@ (8002418 <HAL_DMA_Start_IT+0x218>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d01d      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a25      	ldr	r2, [pc, #148]	@ (800241c <HAL_DMA_Start_IT+0x21c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d018      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a24      	ldr	r2, [pc, #144]	@ (8002420 <HAL_DMA_Start_IT+0x220>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d013      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a22      	ldr	r2, [pc, #136]	@ (8002424 <HAL_DMA_Start_IT+0x224>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00e      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a21      	ldr	r2, [pc, #132]	@ (8002428 <HAL_DMA_Start_IT+0x228>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d009      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1f      	ldr	r2, [pc, #124]	@ (800242c <HAL_DMA_Start_IT+0x22c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d004      	beq.n	80023bc <HAL_DMA_Start_IT+0x1bc>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002430 <HAL_DMA_Start_IT+0x230>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_DMA_Start_IT+0x1c0>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_DMA_Start_IT+0x1c2>
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d036      	beq.n	8002434 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 021e 	bic.w	r2, r3, #30
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0216 	orr.w	r2, r2, #22
 80023d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d03e      	beq.n	8002460 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0208 	orr.w	r2, r2, #8
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e035      	b.n	8002460 <HAL_DMA_Start_IT+0x260>
 80023f4:	40020010 	.word	0x40020010
 80023f8:	40020028 	.word	0x40020028
 80023fc:	40020040 	.word	0x40020040
 8002400:	40020058 	.word	0x40020058
 8002404:	40020070 	.word	0x40020070
 8002408:	40020088 	.word	0x40020088
 800240c:	400200a0 	.word	0x400200a0
 8002410:	400200b8 	.word	0x400200b8
 8002414:	40020410 	.word	0x40020410
 8002418:	40020428 	.word	0x40020428
 800241c:	40020440 	.word	0x40020440
 8002420:	40020458 	.word	0x40020458
 8002424:	40020470 	.word	0x40020470
 8002428:	40020488 	.word	0x40020488
 800242c:	400204a0 	.word	0x400204a0
 8002430:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 020e 	bic.w	r2, r3, #14
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 020a 	orr.w	r2, r2, #10
 8002446:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0204 	orr.w	r2, r2, #4
 800245e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a83      	ldr	r2, [pc, #524]	@ (8002674 <HAL_DMA_Start_IT+0x474>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d072      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a82      	ldr	r2, [pc, #520]	@ (8002678 <HAL_DMA_Start_IT+0x478>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d06d      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a80      	ldr	r2, [pc, #512]	@ (800267c <HAL_DMA_Start_IT+0x47c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d068      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a7f      	ldr	r2, [pc, #508]	@ (8002680 <HAL_DMA_Start_IT+0x480>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d063      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a7d      	ldr	r2, [pc, #500]	@ (8002684 <HAL_DMA_Start_IT+0x484>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d05e      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a7c      	ldr	r2, [pc, #496]	@ (8002688 <HAL_DMA_Start_IT+0x488>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d059      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a7a      	ldr	r2, [pc, #488]	@ (800268c <HAL_DMA_Start_IT+0x48c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d054      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a79      	ldr	r2, [pc, #484]	@ (8002690 <HAL_DMA_Start_IT+0x490>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d04f      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a77      	ldr	r2, [pc, #476]	@ (8002694 <HAL_DMA_Start_IT+0x494>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d04a      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a76      	ldr	r2, [pc, #472]	@ (8002698 <HAL_DMA_Start_IT+0x498>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d045      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a74      	ldr	r2, [pc, #464]	@ (800269c <HAL_DMA_Start_IT+0x49c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d040      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a73      	ldr	r2, [pc, #460]	@ (80026a0 <HAL_DMA_Start_IT+0x4a0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d03b      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a71      	ldr	r2, [pc, #452]	@ (80026a4 <HAL_DMA_Start_IT+0x4a4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d036      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a70      	ldr	r2, [pc, #448]	@ (80026a8 <HAL_DMA_Start_IT+0x4a8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d031      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6e      	ldr	r2, [pc, #440]	@ (80026ac <HAL_DMA_Start_IT+0x4ac>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d02c      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6d      	ldr	r2, [pc, #436]	@ (80026b0 <HAL_DMA_Start_IT+0x4b0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d027      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a6b      	ldr	r2, [pc, #428]	@ (80026b4 <HAL_DMA_Start_IT+0x4b4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d022      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a6a      	ldr	r2, [pc, #424]	@ (80026b8 <HAL_DMA_Start_IT+0x4b8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d01d      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a68      	ldr	r2, [pc, #416]	@ (80026bc <HAL_DMA_Start_IT+0x4bc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d018      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a67      	ldr	r2, [pc, #412]	@ (80026c0 <HAL_DMA_Start_IT+0x4c0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d013      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a65      	ldr	r2, [pc, #404]	@ (80026c4 <HAL_DMA_Start_IT+0x4c4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00e      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a64      	ldr	r2, [pc, #400]	@ (80026c8 <HAL_DMA_Start_IT+0x4c8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d009      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a62      	ldr	r2, [pc, #392]	@ (80026cc <HAL_DMA_Start_IT+0x4cc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d004      	beq.n	8002550 <HAL_DMA_Start_IT+0x350>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a61      	ldr	r2, [pc, #388]	@ (80026d0 <HAL_DMA_Start_IT+0x4d0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_DMA_Start_IT+0x354>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <HAL_DMA_Start_IT+0x356>
 8002554:	2300      	movs	r3, #0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01a      	beq.n	8002590 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002576:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800258a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800258e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a37      	ldr	r2, [pc, #220]	@ (8002674 <HAL_DMA_Start_IT+0x474>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d04a      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a36      	ldr	r2, [pc, #216]	@ (8002678 <HAL_DMA_Start_IT+0x478>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d045      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a34      	ldr	r2, [pc, #208]	@ (800267c <HAL_DMA_Start_IT+0x47c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d040      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a33      	ldr	r2, [pc, #204]	@ (8002680 <HAL_DMA_Start_IT+0x480>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d03b      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a31      	ldr	r2, [pc, #196]	@ (8002684 <HAL_DMA_Start_IT+0x484>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d036      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a30      	ldr	r2, [pc, #192]	@ (8002688 <HAL_DMA_Start_IT+0x488>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d031      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a2e      	ldr	r2, [pc, #184]	@ (800268c <HAL_DMA_Start_IT+0x48c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d02c      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a2d      	ldr	r2, [pc, #180]	@ (8002690 <HAL_DMA_Start_IT+0x490>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d027      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002694 <HAL_DMA_Start_IT+0x494>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d022      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002698 <HAL_DMA_Start_IT+0x498>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d01d      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a28      	ldr	r2, [pc, #160]	@ (800269c <HAL_DMA_Start_IT+0x49c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d018      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a27      	ldr	r2, [pc, #156]	@ (80026a0 <HAL_DMA_Start_IT+0x4a0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a25      	ldr	r2, [pc, #148]	@ (80026a4 <HAL_DMA_Start_IT+0x4a4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00e      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a24      	ldr	r2, [pc, #144]	@ (80026a8 <HAL_DMA_Start_IT+0x4a8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d009      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a22      	ldr	r2, [pc, #136]	@ (80026ac <HAL_DMA_Start_IT+0x4ac>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <HAL_DMA_Start_IT+0x430>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a21      	ldr	r2, [pc, #132]	@ (80026b0 <HAL_DMA_Start_IT+0x4b0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d108      	bne.n	8002642 <HAL_DMA_Start_IT+0x442>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e012      	b.n	8002668 <HAL_DMA_Start_IT+0x468>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e009      	b.n	8002668 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002668:	7dfb      	ldrb	r3, [r7, #23]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40020010 	.word	0x40020010
 8002678:	40020028 	.word	0x40020028
 800267c:	40020040 	.word	0x40020040
 8002680:	40020058 	.word	0x40020058
 8002684:	40020070 	.word	0x40020070
 8002688:	40020088 	.word	0x40020088
 800268c:	400200a0 	.word	0x400200a0
 8002690:	400200b8 	.word	0x400200b8
 8002694:	40020410 	.word	0x40020410
 8002698:	40020428 	.word	0x40020428
 800269c:	40020440 	.word	0x40020440
 80026a0:	40020458 	.word	0x40020458
 80026a4:	40020470 	.word	0x40020470
 80026a8:	40020488 	.word	0x40020488
 80026ac:	400204a0 	.word	0x400204a0
 80026b0:	400204b8 	.word	0x400204b8
 80026b4:	58025408 	.word	0x58025408
 80026b8:	5802541c 	.word	0x5802541c
 80026bc:	58025430 	.word	0x58025430
 80026c0:	58025444 	.word	0x58025444
 80026c4:	58025458 	.word	0x58025458
 80026c8:	5802546c 	.word	0x5802546c
 80026cc:	58025480 	.word	0x58025480
 80026d0:	58025494 	.word	0x58025494

080026d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80026dc:	f7fe fdb8 	bl	8001250 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e2dc      	b.n	8002ca6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d008      	beq.n	800270a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2280      	movs	r2, #128	@ 0x80
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e2cd      	b.n	8002ca6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a76      	ldr	r2, [pc, #472]	@ (80028e8 <HAL_DMA_Abort+0x214>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d04a      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a74      	ldr	r2, [pc, #464]	@ (80028ec <HAL_DMA_Abort+0x218>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d045      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a73      	ldr	r2, [pc, #460]	@ (80028f0 <HAL_DMA_Abort+0x21c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d040      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a71      	ldr	r2, [pc, #452]	@ (80028f4 <HAL_DMA_Abort+0x220>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d03b      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a70      	ldr	r2, [pc, #448]	@ (80028f8 <HAL_DMA_Abort+0x224>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d036      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a6e      	ldr	r2, [pc, #440]	@ (80028fc <HAL_DMA_Abort+0x228>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d031      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6d      	ldr	r2, [pc, #436]	@ (8002900 <HAL_DMA_Abort+0x22c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d02c      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a6b      	ldr	r2, [pc, #428]	@ (8002904 <HAL_DMA_Abort+0x230>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d027      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6a      	ldr	r2, [pc, #424]	@ (8002908 <HAL_DMA_Abort+0x234>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d022      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a68      	ldr	r2, [pc, #416]	@ (800290c <HAL_DMA_Abort+0x238>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d01d      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a67      	ldr	r2, [pc, #412]	@ (8002910 <HAL_DMA_Abort+0x23c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d018      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a65      	ldr	r2, [pc, #404]	@ (8002914 <HAL_DMA_Abort+0x240>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a64      	ldr	r2, [pc, #400]	@ (8002918 <HAL_DMA_Abort+0x244>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00e      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a62      	ldr	r2, [pc, #392]	@ (800291c <HAL_DMA_Abort+0x248>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d009      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a61      	ldr	r2, [pc, #388]	@ (8002920 <HAL_DMA_Abort+0x24c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d004      	beq.n	80027aa <HAL_DMA_Abort+0xd6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002924 <HAL_DMA_Abort+0x250>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_DMA_Abort+0xda>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_DMA_Abort+0xdc>
 80027ae:	2300      	movs	r3, #0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 021e 	bic.w	r2, r2, #30
 80027c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e00a      	b.n	80027f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 020e 	bic.w	r2, r2, #14
 80027ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a3c      	ldr	r2, [pc, #240]	@ (80028e8 <HAL_DMA_Abort+0x214>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d072      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a3a      	ldr	r2, [pc, #232]	@ (80028ec <HAL_DMA_Abort+0x218>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d06d      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a39      	ldr	r2, [pc, #228]	@ (80028f0 <HAL_DMA_Abort+0x21c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d068      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a37      	ldr	r2, [pc, #220]	@ (80028f4 <HAL_DMA_Abort+0x220>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d063      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a36      	ldr	r2, [pc, #216]	@ (80028f8 <HAL_DMA_Abort+0x224>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d05e      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a34      	ldr	r2, [pc, #208]	@ (80028fc <HAL_DMA_Abort+0x228>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d059      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a33      	ldr	r2, [pc, #204]	@ (8002900 <HAL_DMA_Abort+0x22c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d054      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a31      	ldr	r2, [pc, #196]	@ (8002904 <HAL_DMA_Abort+0x230>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d04f      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a30      	ldr	r2, [pc, #192]	@ (8002908 <HAL_DMA_Abort+0x234>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d04a      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a2e      	ldr	r2, [pc, #184]	@ (800290c <HAL_DMA_Abort+0x238>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d045      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2d      	ldr	r2, [pc, #180]	@ (8002910 <HAL_DMA_Abort+0x23c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d040      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a2b      	ldr	r2, [pc, #172]	@ (8002914 <HAL_DMA_Abort+0x240>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d03b      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a2a      	ldr	r2, [pc, #168]	@ (8002918 <HAL_DMA_Abort+0x244>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d036      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a28      	ldr	r2, [pc, #160]	@ (800291c <HAL_DMA_Abort+0x248>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d031      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a27      	ldr	r2, [pc, #156]	@ (8002920 <HAL_DMA_Abort+0x24c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d02c      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a25      	ldr	r2, [pc, #148]	@ (8002924 <HAL_DMA_Abort+0x250>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d027      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a24      	ldr	r2, [pc, #144]	@ (8002928 <HAL_DMA_Abort+0x254>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d022      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a22      	ldr	r2, [pc, #136]	@ (800292c <HAL_DMA_Abort+0x258>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01d      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a21      	ldr	r2, [pc, #132]	@ (8002930 <HAL_DMA_Abort+0x25c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d018      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002934 <HAL_DMA_Abort+0x260>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1e      	ldr	r2, [pc, #120]	@ (8002938 <HAL_DMA_Abort+0x264>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00e      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1c      	ldr	r2, [pc, #112]	@ (800293c <HAL_DMA_Abort+0x268>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002940 <HAL_DMA_Abort+0x26c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_DMA_Abort+0x20e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a19      	ldr	r2, [pc, #100]	@ (8002944 <HAL_DMA_Abort+0x270>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d132      	bne.n	8002948 <HAL_DMA_Abort+0x274>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e031      	b.n	800294a <HAL_DMA_Abort+0x276>
 80028e6:	bf00      	nop
 80028e8:	40020010 	.word	0x40020010
 80028ec:	40020028 	.word	0x40020028
 80028f0:	40020040 	.word	0x40020040
 80028f4:	40020058 	.word	0x40020058
 80028f8:	40020070 	.word	0x40020070
 80028fc:	40020088 	.word	0x40020088
 8002900:	400200a0 	.word	0x400200a0
 8002904:	400200b8 	.word	0x400200b8
 8002908:	40020410 	.word	0x40020410
 800290c:	40020428 	.word	0x40020428
 8002910:	40020440 	.word	0x40020440
 8002914:	40020458 	.word	0x40020458
 8002918:	40020470 	.word	0x40020470
 800291c:	40020488 	.word	0x40020488
 8002920:	400204a0 	.word	0x400204a0
 8002924:	400204b8 	.word	0x400204b8
 8002928:	58025408 	.word	0x58025408
 800292c:	5802541c 	.word	0x5802541c
 8002930:	58025430 	.word	0x58025430
 8002934:	58025444 	.word	0x58025444
 8002938:	58025458 	.word	0x58025458
 800293c:	5802546c 	.word	0x5802546c
 8002940:	58025480 	.word	0x58025480
 8002944:	58025494 	.word	0x58025494
 8002948:	2300      	movs	r3, #0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800295c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6d      	ldr	r2, [pc, #436]	@ (8002b18 <HAL_DMA_Abort+0x444>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d04a      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a6b      	ldr	r2, [pc, #428]	@ (8002b1c <HAL_DMA_Abort+0x448>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d045      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6a      	ldr	r2, [pc, #424]	@ (8002b20 <HAL_DMA_Abort+0x44c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d040      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a68      	ldr	r2, [pc, #416]	@ (8002b24 <HAL_DMA_Abort+0x450>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d03b      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a67      	ldr	r2, [pc, #412]	@ (8002b28 <HAL_DMA_Abort+0x454>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d036      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a65      	ldr	r2, [pc, #404]	@ (8002b2c <HAL_DMA_Abort+0x458>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d031      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a64      	ldr	r2, [pc, #400]	@ (8002b30 <HAL_DMA_Abort+0x45c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d02c      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a62      	ldr	r2, [pc, #392]	@ (8002b34 <HAL_DMA_Abort+0x460>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d027      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a61      	ldr	r2, [pc, #388]	@ (8002b38 <HAL_DMA_Abort+0x464>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d022      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a5f      	ldr	r2, [pc, #380]	@ (8002b3c <HAL_DMA_Abort+0x468>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01d      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002b40 <HAL_DMA_Abort+0x46c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d018      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a5c      	ldr	r2, [pc, #368]	@ (8002b44 <HAL_DMA_Abort+0x470>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a5b      	ldr	r2, [pc, #364]	@ (8002b48 <HAL_DMA_Abort+0x474>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00e      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a59      	ldr	r2, [pc, #356]	@ (8002b4c <HAL_DMA_Abort+0x478>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d009      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a58      	ldr	r2, [pc, #352]	@ (8002b50 <HAL_DMA_Abort+0x47c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d004      	beq.n	80029fe <HAL_DMA_Abort+0x32a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a56      	ldr	r2, [pc, #344]	@ (8002b54 <HAL_DMA_Abort+0x480>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d108      	bne.n	8002a10 <HAL_DMA_Abort+0x33c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e007      	b.n	8002a20 <HAL_DMA_Abort+0x34c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a20:	e013      	b.n	8002a4a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a22:	f7fe fc15 	bl	8001250 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d90c      	bls.n	8002a4a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e12d      	b.n	8002ca6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1e5      	bne.n	8002a22 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002b18 <HAL_DMA_Abort+0x444>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d04a      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a2d      	ldr	r2, [pc, #180]	@ (8002b1c <HAL_DMA_Abort+0x448>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d045      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b20 <HAL_DMA_Abort+0x44c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d040      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a2a      	ldr	r2, [pc, #168]	@ (8002b24 <HAL_DMA_Abort+0x450>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d03b      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a29      	ldr	r2, [pc, #164]	@ (8002b28 <HAL_DMA_Abort+0x454>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d036      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a27      	ldr	r2, [pc, #156]	@ (8002b2c <HAL_DMA_Abort+0x458>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d031      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a26      	ldr	r2, [pc, #152]	@ (8002b30 <HAL_DMA_Abort+0x45c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d02c      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a24      	ldr	r2, [pc, #144]	@ (8002b34 <HAL_DMA_Abort+0x460>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d027      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a23      	ldr	r2, [pc, #140]	@ (8002b38 <HAL_DMA_Abort+0x464>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d022      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <HAL_DMA_Abort+0x468>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01d      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a20      	ldr	r2, [pc, #128]	@ (8002b40 <HAL_DMA_Abort+0x46c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d018      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b44 <HAL_DMA_Abort+0x470>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b48 <HAL_DMA_Abort+0x474>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00e      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b4c <HAL_DMA_Abort+0x478>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b50 <HAL_DMA_Abort+0x47c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_DMA_Abort+0x422>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a18      	ldr	r2, [pc, #96]	@ (8002b54 <HAL_DMA_Abort+0x480>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <HAL_DMA_Abort+0x426>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_DMA_Abort+0x428>
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d02b      	beq.n	8002b58 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b04:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	223f      	movs	r2, #63	@ 0x3f
 8002b10:	409a      	lsls	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	e02a      	b.n	8002b6e <HAL_DMA_Abort+0x49a>
 8002b18:	40020010 	.word	0x40020010
 8002b1c:	40020028 	.word	0x40020028
 8002b20:	40020040 	.word	0x40020040
 8002b24:	40020058 	.word	0x40020058
 8002b28:	40020070 	.word	0x40020070
 8002b2c:	40020088 	.word	0x40020088
 8002b30:	400200a0 	.word	0x400200a0
 8002b34:	400200b8 	.word	0x400200b8
 8002b38:	40020410 	.word	0x40020410
 8002b3c:	40020428 	.word	0x40020428
 8002b40:	40020440 	.word	0x40020440
 8002b44:	40020458 	.word	0x40020458
 8002b48:	40020470 	.word	0x40020470
 8002b4c:	40020488 	.word	0x40020488
 8002b50:	400204a0 	.word	0x400204a0
 8002b54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	2201      	movs	r2, #1
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a4f      	ldr	r2, [pc, #316]	@ (8002cb0 <HAL_DMA_Abort+0x5dc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d072      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a4d      	ldr	r2, [pc, #308]	@ (8002cb4 <HAL_DMA_Abort+0x5e0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d06d      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a4c      	ldr	r2, [pc, #304]	@ (8002cb8 <HAL_DMA_Abort+0x5e4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d068      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a4a      	ldr	r2, [pc, #296]	@ (8002cbc <HAL_DMA_Abort+0x5e8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d063      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a49      	ldr	r2, [pc, #292]	@ (8002cc0 <HAL_DMA_Abort+0x5ec>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d05e      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a47      	ldr	r2, [pc, #284]	@ (8002cc4 <HAL_DMA_Abort+0x5f0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d059      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a46      	ldr	r2, [pc, #280]	@ (8002cc8 <HAL_DMA_Abort+0x5f4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d054      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a44      	ldr	r2, [pc, #272]	@ (8002ccc <HAL_DMA_Abort+0x5f8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d04f      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a43      	ldr	r2, [pc, #268]	@ (8002cd0 <HAL_DMA_Abort+0x5fc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d04a      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a41      	ldr	r2, [pc, #260]	@ (8002cd4 <HAL_DMA_Abort+0x600>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d045      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a40      	ldr	r2, [pc, #256]	@ (8002cd8 <HAL_DMA_Abort+0x604>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d040      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a3e      	ldr	r2, [pc, #248]	@ (8002cdc <HAL_DMA_Abort+0x608>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d03b      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce0 <HAL_DMA_Abort+0x60c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d036      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ce4 <HAL_DMA_Abort+0x610>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d031      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a3a      	ldr	r2, [pc, #232]	@ (8002ce8 <HAL_DMA_Abort+0x614>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d02c      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a38      	ldr	r2, [pc, #224]	@ (8002cec <HAL_DMA_Abort+0x618>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d027      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a37      	ldr	r2, [pc, #220]	@ (8002cf0 <HAL_DMA_Abort+0x61c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d022      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a35      	ldr	r2, [pc, #212]	@ (8002cf4 <HAL_DMA_Abort+0x620>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01d      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a34      	ldr	r2, [pc, #208]	@ (8002cf8 <HAL_DMA_Abort+0x624>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d018      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a32      	ldr	r2, [pc, #200]	@ (8002cfc <HAL_DMA_Abort+0x628>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a31      	ldr	r2, [pc, #196]	@ (8002d00 <HAL_DMA_Abort+0x62c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00e      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2f      	ldr	r2, [pc, #188]	@ (8002d04 <HAL_DMA_Abort+0x630>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d009      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002d08 <HAL_DMA_Abort+0x634>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_DMA_Abort+0x58a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2c      	ldr	r2, [pc, #176]	@ (8002d0c <HAL_DMA_Abort+0x638>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_DMA_Abort+0x58e>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_DMA_Abort+0x590>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d015      	beq.n	8002c94 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c70:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00c      	beq.n	8002c94 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c88:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c92:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40020010 	.word	0x40020010
 8002cb4:	40020028 	.word	0x40020028
 8002cb8:	40020040 	.word	0x40020040
 8002cbc:	40020058 	.word	0x40020058
 8002cc0:	40020070 	.word	0x40020070
 8002cc4:	40020088 	.word	0x40020088
 8002cc8:	400200a0 	.word	0x400200a0
 8002ccc:	400200b8 	.word	0x400200b8
 8002cd0:	40020410 	.word	0x40020410
 8002cd4:	40020428 	.word	0x40020428
 8002cd8:	40020440 	.word	0x40020440
 8002cdc:	40020458 	.word	0x40020458
 8002ce0:	40020470 	.word	0x40020470
 8002ce4:	40020488 	.word	0x40020488
 8002ce8:	400204a0 	.word	0x400204a0
 8002cec:	400204b8 	.word	0x400204b8
 8002cf0:	58025408 	.word	0x58025408
 8002cf4:	5802541c 	.word	0x5802541c
 8002cf8:	58025430 	.word	0x58025430
 8002cfc:	58025444 	.word	0x58025444
 8002d00:	58025458 	.word	0x58025458
 8002d04:	5802546c 	.word	0x5802546c
 8002d08:	58025480 	.word	0x58025480
 8002d0c:	58025494 	.word	0x58025494

08002d10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e237      	b.n	8003192 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d004      	beq.n	8002d38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2280      	movs	r2, #128	@ 0x80
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e22c      	b.n	8003192 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a5c      	ldr	r2, [pc, #368]	@ (8002eb0 <HAL_DMA_Abort_IT+0x1a0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d04a      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a5b      	ldr	r2, [pc, #364]	@ (8002eb4 <HAL_DMA_Abort_IT+0x1a4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d045      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a59      	ldr	r2, [pc, #356]	@ (8002eb8 <HAL_DMA_Abort_IT+0x1a8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d040      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a58      	ldr	r2, [pc, #352]	@ (8002ebc <HAL_DMA_Abort_IT+0x1ac>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d03b      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a56      	ldr	r2, [pc, #344]	@ (8002ec0 <HAL_DMA_Abort_IT+0x1b0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d036      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a55      	ldr	r2, [pc, #340]	@ (8002ec4 <HAL_DMA_Abort_IT+0x1b4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d031      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a53      	ldr	r2, [pc, #332]	@ (8002ec8 <HAL_DMA_Abort_IT+0x1b8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02c      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a52      	ldr	r2, [pc, #328]	@ (8002ecc <HAL_DMA_Abort_IT+0x1bc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d027      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a50      	ldr	r2, [pc, #320]	@ (8002ed0 <HAL_DMA_Abort_IT+0x1c0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d022      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a4f      	ldr	r2, [pc, #316]	@ (8002ed4 <HAL_DMA_Abort_IT+0x1c4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d01d      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ed8 <HAL_DMA_Abort_IT+0x1c8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d018      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a4c      	ldr	r2, [pc, #304]	@ (8002edc <HAL_DMA_Abort_IT+0x1cc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ee0 <HAL_DMA_Abort_IT+0x1d0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00e      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a49      	ldr	r2, [pc, #292]	@ (8002ee4 <HAL_DMA_Abort_IT+0x1d4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a47      	ldr	r2, [pc, #284]	@ (8002ee8 <HAL_DMA_Abort_IT+0x1d8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0xc8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a46      	ldr	r2, [pc, #280]	@ (8002eec <HAL_DMA_Abort_IT+0x1dc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <HAL_DMA_Abort_IT+0xcc>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_DMA_Abort_IT+0xce>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8086 	beq.w	8002ef0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2204      	movs	r2, #4
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb0 <HAL_DMA_Abort_IT+0x1a0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d04a      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb4 <HAL_DMA_Abort_IT+0x1a4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d045      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb8 <HAL_DMA_Abort_IT+0x1a8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d040      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8002ebc <HAL_DMA_Abort_IT+0x1ac>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d03b      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a29      	ldr	r2, [pc, #164]	@ (8002ec0 <HAL_DMA_Abort_IT+0x1b0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d036      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a28      	ldr	r2, [pc, #160]	@ (8002ec4 <HAL_DMA_Abort_IT+0x1b4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d031      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a26      	ldr	r2, [pc, #152]	@ (8002ec8 <HAL_DMA_Abort_IT+0x1b8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d02c      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a25      	ldr	r2, [pc, #148]	@ (8002ecc <HAL_DMA_Abort_IT+0x1bc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d027      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a23      	ldr	r2, [pc, #140]	@ (8002ed0 <HAL_DMA_Abort_IT+0x1c0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d022      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a22      	ldr	r2, [pc, #136]	@ (8002ed4 <HAL_DMA_Abort_IT+0x1c4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d01d      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a20      	ldr	r2, [pc, #128]	@ (8002ed8 <HAL_DMA_Abort_IT+0x1c8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d018      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002edc <HAL_DMA_Abort_IT+0x1cc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d013      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee0 <HAL_DMA_Abort_IT+0x1d0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00e      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee4 <HAL_DMA_Abort_IT+0x1d4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d009      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee8 <HAL_DMA_Abort_IT+0x1d8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d004      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x17c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a19      	ldr	r2, [pc, #100]	@ (8002eec <HAL_DMA_Abort_IT+0x1dc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d108      	bne.n	8002e9e <HAL_DMA_Abort_IT+0x18e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e178      	b.n	8003190 <HAL_DMA_Abort_IT+0x480>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e16f      	b.n	8003190 <HAL_DMA_Abort_IT+0x480>
 8002eb0:	40020010 	.word	0x40020010
 8002eb4:	40020028 	.word	0x40020028
 8002eb8:	40020040 	.word	0x40020040
 8002ebc:	40020058 	.word	0x40020058
 8002ec0:	40020070 	.word	0x40020070
 8002ec4:	40020088 	.word	0x40020088
 8002ec8:	400200a0 	.word	0x400200a0
 8002ecc:	400200b8 	.word	0x400200b8
 8002ed0:	40020410 	.word	0x40020410
 8002ed4:	40020428 	.word	0x40020428
 8002ed8:	40020440 	.word	0x40020440
 8002edc:	40020458 	.word	0x40020458
 8002ee0:	40020470 	.word	0x40020470
 8002ee4:	40020488 	.word	0x40020488
 8002ee8:	400204a0 	.word	0x400204a0
 8002eec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 020e 	bic.w	r2, r2, #14
 8002efe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a6c      	ldr	r2, [pc, #432]	@ (80030b8 <HAL_DMA_Abort_IT+0x3a8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d04a      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a6b      	ldr	r2, [pc, #428]	@ (80030bc <HAL_DMA_Abort_IT+0x3ac>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d045      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a69      	ldr	r2, [pc, #420]	@ (80030c0 <HAL_DMA_Abort_IT+0x3b0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d040      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a68      	ldr	r2, [pc, #416]	@ (80030c4 <HAL_DMA_Abort_IT+0x3b4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d03b      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a66      	ldr	r2, [pc, #408]	@ (80030c8 <HAL_DMA_Abort_IT+0x3b8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d036      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a65      	ldr	r2, [pc, #404]	@ (80030cc <HAL_DMA_Abort_IT+0x3bc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d031      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a63      	ldr	r2, [pc, #396]	@ (80030d0 <HAL_DMA_Abort_IT+0x3c0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d02c      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a62      	ldr	r2, [pc, #392]	@ (80030d4 <HAL_DMA_Abort_IT+0x3c4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d027      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a60      	ldr	r2, [pc, #384]	@ (80030d8 <HAL_DMA_Abort_IT+0x3c8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d022      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a5f      	ldr	r2, [pc, #380]	@ (80030dc <HAL_DMA_Abort_IT+0x3cc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d01d      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a5d      	ldr	r2, [pc, #372]	@ (80030e0 <HAL_DMA_Abort_IT+0x3d0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d018      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a5c      	ldr	r2, [pc, #368]	@ (80030e4 <HAL_DMA_Abort_IT+0x3d4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a5a      	ldr	r2, [pc, #360]	@ (80030e8 <HAL_DMA_Abort_IT+0x3d8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00e      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a59      	ldr	r2, [pc, #356]	@ (80030ec <HAL_DMA_Abort_IT+0x3dc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a57      	ldr	r2, [pc, #348]	@ (80030f0 <HAL_DMA_Abort_IT+0x3e0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x290>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a56      	ldr	r2, [pc, #344]	@ (80030f4 <HAL_DMA_Abort_IT+0x3e4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d108      	bne.n	8002fb2 <HAL_DMA_Abort_IT+0x2a2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e007      	b.n	8002fc2 <HAL_DMA_Abort_IT+0x2b2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a3c      	ldr	r2, [pc, #240]	@ (80030b8 <HAL_DMA_Abort_IT+0x3a8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d072      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a3a      	ldr	r2, [pc, #232]	@ (80030bc <HAL_DMA_Abort_IT+0x3ac>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d06d      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a39      	ldr	r2, [pc, #228]	@ (80030c0 <HAL_DMA_Abort_IT+0x3b0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d068      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a37      	ldr	r2, [pc, #220]	@ (80030c4 <HAL_DMA_Abort_IT+0x3b4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d063      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a36      	ldr	r2, [pc, #216]	@ (80030c8 <HAL_DMA_Abort_IT+0x3b8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d05e      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a34      	ldr	r2, [pc, #208]	@ (80030cc <HAL_DMA_Abort_IT+0x3bc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d059      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a33      	ldr	r2, [pc, #204]	@ (80030d0 <HAL_DMA_Abort_IT+0x3c0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d054      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a31      	ldr	r2, [pc, #196]	@ (80030d4 <HAL_DMA_Abort_IT+0x3c4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d04f      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a30      	ldr	r2, [pc, #192]	@ (80030d8 <HAL_DMA_Abort_IT+0x3c8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d04a      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2e      	ldr	r2, [pc, #184]	@ (80030dc <HAL_DMA_Abort_IT+0x3cc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d045      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a2d      	ldr	r2, [pc, #180]	@ (80030e0 <HAL_DMA_Abort_IT+0x3d0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d040      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2b      	ldr	r2, [pc, #172]	@ (80030e4 <HAL_DMA_Abort_IT+0x3d4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d03b      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2a      	ldr	r2, [pc, #168]	@ (80030e8 <HAL_DMA_Abort_IT+0x3d8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d036      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a28      	ldr	r2, [pc, #160]	@ (80030ec <HAL_DMA_Abort_IT+0x3dc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d031      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a27      	ldr	r2, [pc, #156]	@ (80030f0 <HAL_DMA_Abort_IT+0x3e0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d02c      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a25      	ldr	r2, [pc, #148]	@ (80030f4 <HAL_DMA_Abort_IT+0x3e4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d027      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a24      	ldr	r2, [pc, #144]	@ (80030f8 <HAL_DMA_Abort_IT+0x3e8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a22      	ldr	r2, [pc, #136]	@ (80030fc <HAL_DMA_Abort_IT+0x3ec>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01d      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a21      	ldr	r2, [pc, #132]	@ (8003100 <HAL_DMA_Abort_IT+0x3f0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d018      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1f      	ldr	r2, [pc, #124]	@ (8003104 <HAL_DMA_Abort_IT+0x3f4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1e      	ldr	r2, [pc, #120]	@ (8003108 <HAL_DMA_Abort_IT+0x3f8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1c      	ldr	r2, [pc, #112]	@ (800310c <HAL_DMA_Abort_IT+0x3fc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003110 <HAL_DMA_Abort_IT+0x400>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x3a2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a19      	ldr	r2, [pc, #100]	@ (8003114 <HAL_DMA_Abort_IT+0x404>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d132      	bne.n	8003118 <HAL_DMA_Abort_IT+0x408>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e031      	b.n	800311a <HAL_DMA_Abort_IT+0x40a>
 80030b6:	bf00      	nop
 80030b8:	40020010 	.word	0x40020010
 80030bc:	40020028 	.word	0x40020028
 80030c0:	40020040 	.word	0x40020040
 80030c4:	40020058 	.word	0x40020058
 80030c8:	40020070 	.word	0x40020070
 80030cc:	40020088 	.word	0x40020088
 80030d0:	400200a0 	.word	0x400200a0
 80030d4:	400200b8 	.word	0x400200b8
 80030d8:	40020410 	.word	0x40020410
 80030dc:	40020428 	.word	0x40020428
 80030e0:	40020440 	.word	0x40020440
 80030e4:	40020458 	.word	0x40020458
 80030e8:	40020470 	.word	0x40020470
 80030ec:	40020488 	.word	0x40020488
 80030f0:	400204a0 	.word	0x400204a0
 80030f4:	400204b8 	.word	0x400204b8
 80030f8:	58025408 	.word	0x58025408
 80030fc:	5802541c 	.word	0x5802541c
 8003100:	58025430 	.word	0x58025430
 8003104:	58025444 	.word	0x58025444
 8003108:	58025458 	.word	0x58025458
 800310c:	5802546c 	.word	0x5802546c
 8003110:	58025480 	.word	0x58025480
 8003114:	58025494 	.word	0x58025494
 8003118:	2300      	movs	r3, #0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d028      	beq.n	8003170 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003128:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800312c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2201      	movs	r2, #1
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800314c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00c      	beq.n	8003170 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003160:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003164:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800316e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop

0800319c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031a8:	4b67      	ldr	r3, [pc, #412]	@ (8003348 <HAL_DMA_IRQHandler+0x1ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a67      	ldr	r2, [pc, #412]	@ (800334c <HAL_DMA_IRQHandler+0x1b0>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0a9b      	lsrs	r3, r3, #10
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a5f      	ldr	r2, [pc, #380]	@ (8003350 <HAL_DMA_IRQHandler+0x1b4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d04a      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003354 <HAL_DMA_IRQHandler+0x1b8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d045      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a5c      	ldr	r2, [pc, #368]	@ (8003358 <HAL_DMA_IRQHandler+0x1bc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d040      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a5a      	ldr	r2, [pc, #360]	@ (800335c <HAL_DMA_IRQHandler+0x1c0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d03b      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a59      	ldr	r2, [pc, #356]	@ (8003360 <HAL_DMA_IRQHandler+0x1c4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d036      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a57      	ldr	r2, [pc, #348]	@ (8003364 <HAL_DMA_IRQHandler+0x1c8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d031      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a56      	ldr	r2, [pc, #344]	@ (8003368 <HAL_DMA_IRQHandler+0x1cc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d02c      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a54      	ldr	r2, [pc, #336]	@ (800336c <HAL_DMA_IRQHandler+0x1d0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d027      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a53      	ldr	r2, [pc, #332]	@ (8003370 <HAL_DMA_IRQHandler+0x1d4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d022      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a51      	ldr	r2, [pc, #324]	@ (8003374 <HAL_DMA_IRQHandler+0x1d8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01d      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a50      	ldr	r2, [pc, #320]	@ (8003378 <HAL_DMA_IRQHandler+0x1dc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d018      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a4e      	ldr	r2, [pc, #312]	@ (800337c <HAL_DMA_IRQHandler+0x1e0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a4d      	ldr	r2, [pc, #308]	@ (8003380 <HAL_DMA_IRQHandler+0x1e4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a4b      	ldr	r2, [pc, #300]	@ (8003384 <HAL_DMA_IRQHandler+0x1e8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a4a      	ldr	r2, [pc, #296]	@ (8003388 <HAL_DMA_IRQHandler+0x1ec>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_DMA_IRQHandler+0xd2>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a48      	ldr	r2, [pc, #288]	@ (800338c <HAL_DMA_IRQHandler+0x1f0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d101      	bne.n	8003272 <HAL_DMA_IRQHandler+0xd6>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_DMA_IRQHandler+0xd8>
 8003272:	2300      	movs	r3, #0
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 842b 	beq.w	8003ad0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	2208      	movs	r2, #8
 8003284:	409a      	lsls	r2, r3
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80a2 	beq.w	80033d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2e      	ldr	r2, [pc, #184]	@ (8003350 <HAL_DMA_IRQHandler+0x1b4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d04a      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2d      	ldr	r2, [pc, #180]	@ (8003354 <HAL_DMA_IRQHandler+0x1b8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d045      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003358 <HAL_DMA_IRQHandler+0x1bc>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d040      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2a      	ldr	r2, [pc, #168]	@ (800335c <HAL_DMA_IRQHandler+0x1c0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d03b      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a28      	ldr	r2, [pc, #160]	@ (8003360 <HAL_DMA_IRQHandler+0x1c4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d036      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a27      	ldr	r2, [pc, #156]	@ (8003364 <HAL_DMA_IRQHandler+0x1c8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d031      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a25      	ldr	r2, [pc, #148]	@ (8003368 <HAL_DMA_IRQHandler+0x1cc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02c      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a24      	ldr	r2, [pc, #144]	@ (800336c <HAL_DMA_IRQHandler+0x1d0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d027      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a22      	ldr	r2, [pc, #136]	@ (8003370 <HAL_DMA_IRQHandler+0x1d4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d022      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a21      	ldr	r2, [pc, #132]	@ (8003374 <HAL_DMA_IRQHandler+0x1d8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d01d      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003378 <HAL_DMA_IRQHandler+0x1dc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d018      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1e      	ldr	r2, [pc, #120]	@ (800337c <HAL_DMA_IRQHandler+0x1e0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d013      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1c      	ldr	r2, [pc, #112]	@ (8003380 <HAL_DMA_IRQHandler+0x1e4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00e      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1b      	ldr	r2, [pc, #108]	@ (8003384 <HAL_DMA_IRQHandler+0x1e8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <HAL_DMA_IRQHandler+0x1ec>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_DMA_IRQHandler+0x194>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a18      	ldr	r2, [pc, #96]	@ (800338c <HAL_DMA_IRQHandler+0x1f0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d12f      	bne.n	8003390 <HAL_DMA_IRQHandler+0x1f4>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	e02e      	b.n	80033a4 <HAL_DMA_IRQHandler+0x208>
 8003346:	bf00      	nop
 8003348:	24002bc0 	.word	0x24002bc0
 800334c:	1b4e81b5 	.word	0x1b4e81b5
 8003350:	40020010 	.word	0x40020010
 8003354:	40020028 	.word	0x40020028
 8003358:	40020040 	.word	0x40020040
 800335c:	40020058 	.word	0x40020058
 8003360:	40020070 	.word	0x40020070
 8003364:	40020088 	.word	0x40020088
 8003368:	400200a0 	.word	0x400200a0
 800336c:	400200b8 	.word	0x400200b8
 8003370:	40020410 	.word	0x40020410
 8003374:	40020428 	.word	0x40020428
 8003378:	40020440 	.word	0x40020440
 800337c:	40020458 	.word	0x40020458
 8003380:	40020470 	.word	0x40020470
 8003384:	40020488 	.word	0x40020488
 8003388:	400204a0 	.word	0x400204a0
 800338c:	400204b8 	.word	0x400204b8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d015      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0204 	bic.w	r2, r2, #4
 80033b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	2208      	movs	r2, #8
 80033c2:	409a      	lsls	r2, r3
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	fa22 f303 	lsr.w	r3, r2, r3
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d06e      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a69      	ldr	r2, [pc, #420]	@ (8003594 <HAL_DMA_IRQHandler+0x3f8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d04a      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a67      	ldr	r2, [pc, #412]	@ (8003598 <HAL_DMA_IRQHandler+0x3fc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d045      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a66      	ldr	r2, [pc, #408]	@ (800359c <HAL_DMA_IRQHandler+0x400>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d040      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a64      	ldr	r2, [pc, #400]	@ (80035a0 <HAL_DMA_IRQHandler+0x404>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d03b      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a63      	ldr	r2, [pc, #396]	@ (80035a4 <HAL_DMA_IRQHandler+0x408>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d036      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a61      	ldr	r2, [pc, #388]	@ (80035a8 <HAL_DMA_IRQHandler+0x40c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d031      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a60      	ldr	r2, [pc, #384]	@ (80035ac <HAL_DMA_IRQHandler+0x410>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d02c      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a5e      	ldr	r2, [pc, #376]	@ (80035b0 <HAL_DMA_IRQHandler+0x414>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d027      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a5d      	ldr	r2, [pc, #372]	@ (80035b4 <HAL_DMA_IRQHandler+0x418>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d022      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a5b      	ldr	r2, [pc, #364]	@ (80035b8 <HAL_DMA_IRQHandler+0x41c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01d      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a5a      	ldr	r2, [pc, #360]	@ (80035bc <HAL_DMA_IRQHandler+0x420>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d018      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a58      	ldr	r2, [pc, #352]	@ (80035c0 <HAL_DMA_IRQHandler+0x424>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a57      	ldr	r2, [pc, #348]	@ (80035c4 <HAL_DMA_IRQHandler+0x428>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00e      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a55      	ldr	r2, [pc, #340]	@ (80035c8 <HAL_DMA_IRQHandler+0x42c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d009      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a54      	ldr	r2, [pc, #336]	@ (80035cc <HAL_DMA_IRQHandler+0x430>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_DMA_IRQHandler+0x2ee>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a52      	ldr	r2, [pc, #328]	@ (80035d0 <HAL_DMA_IRQHandler+0x434>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10a      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x304>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf14      	ite	ne
 8003498:	2301      	movne	r3, #1
 800349a:	2300      	moveq	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e003      	b.n	80034a8 <HAL_DMA_IRQHandler+0x30c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2300      	movs	r3, #0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	2201      	movs	r2, #1
 80034b6:	409a      	lsls	r2, r3
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c0:	f043 0202 	orr.w	r2, r3, #2
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2204      	movs	r2, #4
 80034d2:	409a      	lsls	r2, r3
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 808f 	beq.w	80035fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003594 <HAL_DMA_IRQHandler+0x3f8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d04a      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003598 <HAL_DMA_IRQHandler+0x3fc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d045      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a29      	ldr	r2, [pc, #164]	@ (800359c <HAL_DMA_IRQHandler+0x400>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d040      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a27      	ldr	r2, [pc, #156]	@ (80035a0 <HAL_DMA_IRQHandler+0x404>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d03b      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a26      	ldr	r2, [pc, #152]	@ (80035a4 <HAL_DMA_IRQHandler+0x408>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d036      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a24      	ldr	r2, [pc, #144]	@ (80035a8 <HAL_DMA_IRQHandler+0x40c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d031      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a23      	ldr	r2, [pc, #140]	@ (80035ac <HAL_DMA_IRQHandler+0x410>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d02c      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a21      	ldr	r2, [pc, #132]	@ (80035b0 <HAL_DMA_IRQHandler+0x414>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d027      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a20      	ldr	r2, [pc, #128]	@ (80035b4 <HAL_DMA_IRQHandler+0x418>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d022      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1e      	ldr	r2, [pc, #120]	@ (80035b8 <HAL_DMA_IRQHandler+0x41c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01d      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1d      	ldr	r2, [pc, #116]	@ (80035bc <HAL_DMA_IRQHandler+0x420>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d018      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1b      	ldr	r2, [pc, #108]	@ (80035c0 <HAL_DMA_IRQHandler+0x424>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1a      	ldr	r2, [pc, #104]	@ (80035c4 <HAL_DMA_IRQHandler+0x428>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00e      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a18      	ldr	r2, [pc, #96]	@ (80035c8 <HAL_DMA_IRQHandler+0x42c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a17      	ldr	r2, [pc, #92]	@ (80035cc <HAL_DMA_IRQHandler+0x430>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_DMA_IRQHandler+0x3e2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a15      	ldr	r2, [pc, #84]	@ (80035d0 <HAL_DMA_IRQHandler+0x434>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d12a      	bne.n	80035d4 <HAL_DMA_IRQHandler+0x438>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e023      	b.n	80035dc <HAL_DMA_IRQHandler+0x440>
 8003594:	40020010 	.word	0x40020010
 8003598:	40020028 	.word	0x40020028
 800359c:	40020040 	.word	0x40020040
 80035a0:	40020058 	.word	0x40020058
 80035a4:	40020070 	.word	0x40020070
 80035a8:	40020088 	.word	0x40020088
 80035ac:	400200a0 	.word	0x400200a0
 80035b0:	400200b8 	.word	0x400200b8
 80035b4:	40020410 	.word	0x40020410
 80035b8:	40020428 	.word	0x40020428
 80035bc:	40020440 	.word	0x40020440
 80035c0:	40020458 	.word	0x40020458
 80035c4:	40020470 	.word	0x40020470
 80035c8:	40020488 	.word	0x40020488
 80035cc:	400204a0 	.word	0x400204a0
 80035d0:	400204b8 	.word	0x400204b8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	2204      	movs	r2, #4
 80035ea:	409a      	lsls	r2, r3
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f4:	f043 0204 	orr.w	r2, r3, #4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2210      	movs	r2, #16
 8003606:	409a      	lsls	r2, r3
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80a6 	beq.w	800375e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a85      	ldr	r2, [pc, #532]	@ (800382c <HAL_DMA_IRQHandler+0x690>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d04a      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a83      	ldr	r2, [pc, #524]	@ (8003830 <HAL_DMA_IRQHandler+0x694>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d045      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a82      	ldr	r2, [pc, #520]	@ (8003834 <HAL_DMA_IRQHandler+0x698>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d040      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a80      	ldr	r2, [pc, #512]	@ (8003838 <HAL_DMA_IRQHandler+0x69c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d03b      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a7f      	ldr	r2, [pc, #508]	@ (800383c <HAL_DMA_IRQHandler+0x6a0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d036      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a7d      	ldr	r2, [pc, #500]	@ (8003840 <HAL_DMA_IRQHandler+0x6a4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d031      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a7c      	ldr	r2, [pc, #496]	@ (8003844 <HAL_DMA_IRQHandler+0x6a8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d02c      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a7a      	ldr	r2, [pc, #488]	@ (8003848 <HAL_DMA_IRQHandler+0x6ac>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d027      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a79      	ldr	r2, [pc, #484]	@ (800384c <HAL_DMA_IRQHandler+0x6b0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a77      	ldr	r2, [pc, #476]	@ (8003850 <HAL_DMA_IRQHandler+0x6b4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a76      	ldr	r2, [pc, #472]	@ (8003854 <HAL_DMA_IRQHandler+0x6b8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a74      	ldr	r2, [pc, #464]	@ (8003858 <HAL_DMA_IRQHandler+0x6bc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a73      	ldr	r2, [pc, #460]	@ (800385c <HAL_DMA_IRQHandler+0x6c0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a71      	ldr	r2, [pc, #452]	@ (8003860 <HAL_DMA_IRQHandler+0x6c4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a70      	ldr	r2, [pc, #448]	@ (8003864 <HAL_DMA_IRQHandler+0x6c8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x516>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003868 <HAL_DMA_IRQHandler+0x6cc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10a      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x52c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf14      	ite	ne
 80036c0:	2301      	movne	r3, #1
 80036c2:	2300      	moveq	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e009      	b.n	80036dc <HAL_DMA_IRQHandler+0x540>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf14      	ite	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	2300      	moveq	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d03e      	beq.n	800375e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	2210      	movs	r2, #16
 80036ea:	409a      	lsls	r2, r3
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d018      	beq.n	8003730 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d108      	bne.n	800371e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d024      	beq.n	800375e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e01f      	b.n	800375e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01b      	beq.n	800375e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
 800372e:	e016      	b.n	800375e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d107      	bne.n	800374e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0208 	bic.w	r2, r2, #8
 800374c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2220      	movs	r2, #32
 8003768:	409a      	lsls	r2, r3
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 8110 	beq.w	8003994 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2c      	ldr	r2, [pc, #176]	@ (800382c <HAL_DMA_IRQHandler+0x690>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d04a      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2b      	ldr	r2, [pc, #172]	@ (8003830 <HAL_DMA_IRQHandler+0x694>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d045      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a29      	ldr	r2, [pc, #164]	@ (8003834 <HAL_DMA_IRQHandler+0x698>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d040      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a28      	ldr	r2, [pc, #160]	@ (8003838 <HAL_DMA_IRQHandler+0x69c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d03b      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a26      	ldr	r2, [pc, #152]	@ (800383c <HAL_DMA_IRQHandler+0x6a0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d036      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a25      	ldr	r2, [pc, #148]	@ (8003840 <HAL_DMA_IRQHandler+0x6a4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d031      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a23      	ldr	r2, [pc, #140]	@ (8003844 <HAL_DMA_IRQHandler+0x6a8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d02c      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a22      	ldr	r2, [pc, #136]	@ (8003848 <HAL_DMA_IRQHandler+0x6ac>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d027      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a20      	ldr	r2, [pc, #128]	@ (800384c <HAL_DMA_IRQHandler+0x6b0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d022      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003850 <HAL_DMA_IRQHandler+0x6b4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d01d      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003854 <HAL_DMA_IRQHandler+0x6b8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d018      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003858 <HAL_DMA_IRQHandler+0x6bc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1a      	ldr	r2, [pc, #104]	@ (800385c <HAL_DMA_IRQHandler+0x6c0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00e      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a19      	ldr	r2, [pc, #100]	@ (8003860 <HAL_DMA_IRQHandler+0x6c4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d009      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a17      	ldr	r2, [pc, #92]	@ (8003864 <HAL_DMA_IRQHandler+0x6c8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_DMA_IRQHandler+0x678>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a16      	ldr	r2, [pc, #88]	@ (8003868 <HAL_DMA_IRQHandler+0x6cc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d12b      	bne.n	800386c <HAL_DMA_IRQHandler+0x6d0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	bf14      	ite	ne
 8003822:	2301      	movne	r3, #1
 8003824:	2300      	moveq	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	e02a      	b.n	8003880 <HAL_DMA_IRQHandler+0x6e4>
 800382a:	bf00      	nop
 800382c:	40020010 	.word	0x40020010
 8003830:	40020028 	.word	0x40020028
 8003834:	40020040 	.word	0x40020040
 8003838:	40020058 	.word	0x40020058
 800383c:	40020070 	.word	0x40020070
 8003840:	40020088 	.word	0x40020088
 8003844:	400200a0 	.word	0x400200a0
 8003848:	400200b8 	.word	0x400200b8
 800384c:	40020410 	.word	0x40020410
 8003850:	40020428 	.word	0x40020428
 8003854:	40020440 	.word	0x40020440
 8003858:	40020458 	.word	0x40020458
 800385c:	40020470 	.word	0x40020470
 8003860:	40020488 	.word	0x40020488
 8003864:	400204a0 	.word	0x400204a0
 8003868:	400204b8 	.word	0x400204b8
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8087 	beq.w	8003994 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	2220      	movs	r2, #32
 8003890:	409a      	lsls	r2, r3
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d139      	bne.n	8003916 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0216 	bic.w	r2, r2, #22
 80038b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695a      	ldr	r2, [r3, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d103      	bne.n	80038d2 <HAL_DMA_IRQHandler+0x736>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0208 	bic.w	r2, r2, #8
 80038e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	223f      	movs	r2, #63	@ 0x3f
 80038ec:	409a      	lsls	r2, r3
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8382 	beq.w	8004010 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
          }
          return;
 8003914:	e37c      	b.n	8004010 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d018      	beq.n	8003956 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d108      	bne.n	8003944 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003936:	2b00      	cmp	r3, #0
 8003938:	d02c      	beq.n	8003994 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
 8003942:	e027      	b.n	8003994 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d023      	beq.n	8003994 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
 8003954:	e01e      	b.n	8003994 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10f      	bne.n	8003984 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0210 	bic.w	r2, r2, #16
 8003972:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 833e 	beq.w	800401a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8088 	beq.w	8003abc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2204      	movs	r2, #4
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a89      	ldr	r2, [pc, #548]	@ (8003be0 <HAL_DMA_IRQHandler+0xa44>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d04a      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a88      	ldr	r2, [pc, #544]	@ (8003be4 <HAL_DMA_IRQHandler+0xa48>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d045      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a86      	ldr	r2, [pc, #536]	@ (8003be8 <HAL_DMA_IRQHandler+0xa4c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d040      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a85      	ldr	r2, [pc, #532]	@ (8003bec <HAL_DMA_IRQHandler+0xa50>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d03b      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a83      	ldr	r2, [pc, #524]	@ (8003bf0 <HAL_DMA_IRQHandler+0xa54>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d036      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a82      	ldr	r2, [pc, #520]	@ (8003bf4 <HAL_DMA_IRQHandler+0xa58>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d031      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a80      	ldr	r2, [pc, #512]	@ (8003bf8 <HAL_DMA_IRQHandler+0xa5c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d02c      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a7f      	ldr	r2, [pc, #508]	@ (8003bfc <HAL_DMA_IRQHandler+0xa60>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d027      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a7d      	ldr	r2, [pc, #500]	@ (8003c00 <HAL_DMA_IRQHandler+0xa64>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d022      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a7c      	ldr	r2, [pc, #496]	@ (8003c04 <HAL_DMA_IRQHandler+0xa68>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d01d      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a7a      	ldr	r2, [pc, #488]	@ (8003c08 <HAL_DMA_IRQHandler+0xa6c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d018      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a79      	ldr	r2, [pc, #484]	@ (8003c0c <HAL_DMA_IRQHandler+0xa70>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a77      	ldr	r2, [pc, #476]	@ (8003c10 <HAL_DMA_IRQHandler+0xa74>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00e      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a76      	ldr	r2, [pc, #472]	@ (8003c14 <HAL_DMA_IRQHandler+0xa78>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d009      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a74      	ldr	r2, [pc, #464]	@ (8003c18 <HAL_DMA_IRQHandler+0xa7c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x8b8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a73      	ldr	r2, [pc, #460]	@ (8003c1c <HAL_DMA_IRQHandler+0xa80>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d108      	bne.n	8003a66 <HAL_DMA_IRQHandler+0x8ca>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	e007      	b.n	8003a76 <HAL_DMA_IRQHandler+0x8da>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d307      	bcc.n	8003a92 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f2      	bne.n	8003a76 <HAL_DMA_IRQHandler+0x8da>
 8003a90:	e000      	b.n	8003a94 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a92:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003aaa:	e003      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 82aa 	beq.w	800401a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4798      	blx	r3
 8003ace:	e2a4      	b.n	800401a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a52      	ldr	r2, [pc, #328]	@ (8003c20 <HAL_DMA_IRQHandler+0xa84>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d04a      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a51      	ldr	r2, [pc, #324]	@ (8003c24 <HAL_DMA_IRQHandler+0xa88>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d045      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a4f      	ldr	r2, [pc, #316]	@ (8003c28 <HAL_DMA_IRQHandler+0xa8c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d040      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a4e      	ldr	r2, [pc, #312]	@ (8003c2c <HAL_DMA_IRQHandler+0xa90>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d03b      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a4c      	ldr	r2, [pc, #304]	@ (8003c30 <HAL_DMA_IRQHandler+0xa94>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d036      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a4b      	ldr	r2, [pc, #300]	@ (8003c34 <HAL_DMA_IRQHandler+0xa98>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d031      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a49      	ldr	r2, [pc, #292]	@ (8003c38 <HAL_DMA_IRQHandler+0xa9c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d02c      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a48      	ldr	r2, [pc, #288]	@ (8003c3c <HAL_DMA_IRQHandler+0xaa0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d027      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a46      	ldr	r2, [pc, #280]	@ (8003c40 <HAL_DMA_IRQHandler+0xaa4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d022      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a45      	ldr	r2, [pc, #276]	@ (8003c44 <HAL_DMA_IRQHandler+0xaa8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d01d      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a43      	ldr	r2, [pc, #268]	@ (8003c48 <HAL_DMA_IRQHandler+0xaac>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d018      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a42      	ldr	r2, [pc, #264]	@ (8003c4c <HAL_DMA_IRQHandler+0xab0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d013      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a40      	ldr	r2, [pc, #256]	@ (8003c50 <HAL_DMA_IRQHandler+0xab4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a3f      	ldr	r2, [pc, #252]	@ (8003c54 <HAL_DMA_IRQHandler+0xab8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d009      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a3d      	ldr	r2, [pc, #244]	@ (8003c58 <HAL_DMA_IRQHandler+0xabc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x9d4>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a3c      	ldr	r2, [pc, #240]	@ (8003c5c <HAL_DMA_IRQHandler+0xac0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d101      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x9d8>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <HAL_DMA_IRQHandler+0x9da>
 8003b74:	2300      	movs	r3, #0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 824f 	beq.w	800401a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80dd 	beq.w	8003d54 <HAL_DMA_IRQHandler+0xbb8>
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80d7 	beq.w	8003d54 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2204      	movs	r2, #4
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d059      	beq.n	8003c74 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d14a      	bne.n	8003c60 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8220 	beq.w	8004014 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bdc:	e21a      	b.n	8004014 <HAL_DMA_IRQHandler+0xe78>
 8003bde:	bf00      	nop
 8003be0:	40020010 	.word	0x40020010
 8003be4:	40020028 	.word	0x40020028
 8003be8:	40020040 	.word	0x40020040
 8003bec:	40020058 	.word	0x40020058
 8003bf0:	40020070 	.word	0x40020070
 8003bf4:	40020088 	.word	0x40020088
 8003bf8:	400200a0 	.word	0x400200a0
 8003bfc:	400200b8 	.word	0x400200b8
 8003c00:	40020410 	.word	0x40020410
 8003c04:	40020428 	.word	0x40020428
 8003c08:	40020440 	.word	0x40020440
 8003c0c:	40020458 	.word	0x40020458
 8003c10:	40020470 	.word	0x40020470
 8003c14:	40020488 	.word	0x40020488
 8003c18:	400204a0 	.word	0x400204a0
 8003c1c:	400204b8 	.word	0x400204b8
 8003c20:	48022c08 	.word	0x48022c08
 8003c24:	48022c1c 	.word	0x48022c1c
 8003c28:	48022c30 	.word	0x48022c30
 8003c2c:	48022c44 	.word	0x48022c44
 8003c30:	48022c58 	.word	0x48022c58
 8003c34:	48022c6c 	.word	0x48022c6c
 8003c38:	48022c80 	.word	0x48022c80
 8003c3c:	48022c94 	.word	0x48022c94
 8003c40:	58025408 	.word	0x58025408
 8003c44:	5802541c 	.word	0x5802541c
 8003c48:	58025430 	.word	0x58025430
 8003c4c:	58025444 	.word	0x58025444
 8003c50:	58025458 	.word	0x58025458
 8003c54:	5802546c 	.word	0x5802546c
 8003c58:	58025480 	.word	0x58025480
 8003c5c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 81d5 	beq.w	8004014 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c72:	e1cf      	b.n	8004014 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d160      	bne.n	8003d40 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a7f      	ldr	r2, [pc, #508]	@ (8003e80 <HAL_DMA_IRQHandler+0xce4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d04a      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a7d      	ldr	r2, [pc, #500]	@ (8003e84 <HAL_DMA_IRQHandler+0xce8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d045      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7c      	ldr	r2, [pc, #496]	@ (8003e88 <HAL_DMA_IRQHandler+0xcec>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d040      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7a      	ldr	r2, [pc, #488]	@ (8003e8c <HAL_DMA_IRQHandler+0xcf0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d03b      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a79      	ldr	r2, [pc, #484]	@ (8003e90 <HAL_DMA_IRQHandler+0xcf4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d036      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a77      	ldr	r2, [pc, #476]	@ (8003e94 <HAL_DMA_IRQHandler+0xcf8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d031      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a76      	ldr	r2, [pc, #472]	@ (8003e98 <HAL_DMA_IRQHandler+0xcfc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d02c      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a74      	ldr	r2, [pc, #464]	@ (8003e9c <HAL_DMA_IRQHandler+0xd00>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d027      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a73      	ldr	r2, [pc, #460]	@ (8003ea0 <HAL_DMA_IRQHandler+0xd04>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d022      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a71      	ldr	r2, [pc, #452]	@ (8003ea4 <HAL_DMA_IRQHandler+0xd08>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01d      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a70      	ldr	r2, [pc, #448]	@ (8003ea8 <HAL_DMA_IRQHandler+0xd0c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d018      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6e      	ldr	r2, [pc, #440]	@ (8003eac <HAL_DMA_IRQHandler+0xd10>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a6d      	ldr	r2, [pc, #436]	@ (8003eb0 <HAL_DMA_IRQHandler+0xd14>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a6b      	ldr	r2, [pc, #428]	@ (8003eb4 <HAL_DMA_IRQHandler+0xd18>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d009      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a6a      	ldr	r2, [pc, #424]	@ (8003eb8 <HAL_DMA_IRQHandler+0xd1c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xb82>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a68      	ldr	r2, [pc, #416]	@ (8003ebc <HAL_DMA_IRQHandler+0xd20>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d108      	bne.n	8003d30 <HAL_DMA_IRQHandler+0xb94>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0208 	bic.w	r2, r2, #8
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e007      	b.n	8003d40 <HAL_DMA_IRQHandler+0xba4>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0204 	bic.w	r2, r2, #4
 8003d3e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8165 	beq.w	8004014 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d52:	e15f      	b.n	8004014 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80c5 	beq.w	8003ef4 <HAL_DMA_IRQHandler+0xd58>
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80bf 	beq.w	8003ef4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	2202      	movs	r2, #2
 8003d80:	409a      	lsls	r2, r3
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d018      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 813a 	beq.w	8004018 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dac:	e134      	b.n	8004018 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 8130 	beq.w	8004018 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc0:	e12a      	b.n	8004018 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f040 8089 	bne.w	8003ee0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a2b      	ldr	r2, [pc, #172]	@ (8003e80 <HAL_DMA_IRQHandler+0xce4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d04a      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a29      	ldr	r2, [pc, #164]	@ (8003e84 <HAL_DMA_IRQHandler+0xce8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d045      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a28      	ldr	r2, [pc, #160]	@ (8003e88 <HAL_DMA_IRQHandler+0xcec>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d040      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a26      	ldr	r2, [pc, #152]	@ (8003e8c <HAL_DMA_IRQHandler+0xcf0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d03b      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a25      	ldr	r2, [pc, #148]	@ (8003e90 <HAL_DMA_IRQHandler+0xcf4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d036      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a23      	ldr	r2, [pc, #140]	@ (8003e94 <HAL_DMA_IRQHandler+0xcf8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d031      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a22      	ldr	r2, [pc, #136]	@ (8003e98 <HAL_DMA_IRQHandler+0xcfc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d02c      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a20      	ldr	r2, [pc, #128]	@ (8003e9c <HAL_DMA_IRQHandler+0xd00>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d027      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea0 <HAL_DMA_IRQHandler+0xd04>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d022      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea4 <HAL_DMA_IRQHandler+0xd08>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01d      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1c      	ldr	r2, [pc, #112]	@ (8003ea8 <HAL_DMA_IRQHandler+0xd0c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d018      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1a      	ldr	r2, [pc, #104]	@ (8003eac <HAL_DMA_IRQHandler+0xd10>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a19      	ldr	r2, [pc, #100]	@ (8003eb0 <HAL_DMA_IRQHandler+0xd14>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00e      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a17      	ldr	r2, [pc, #92]	@ (8003eb4 <HAL_DMA_IRQHandler+0xd18>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a16      	ldr	r2, [pc, #88]	@ (8003eb8 <HAL_DMA_IRQHandler+0xd1c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d004      	beq.n	8003e6e <HAL_DMA_IRQHandler+0xcd2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a14      	ldr	r2, [pc, #80]	@ (8003ebc <HAL_DMA_IRQHandler+0xd20>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d128      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0xd24>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0214 	bic.w	r2, r2, #20
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e027      	b.n	8003ed0 <HAL_DMA_IRQHandler+0xd34>
 8003e80:	40020010 	.word	0x40020010
 8003e84:	40020028 	.word	0x40020028
 8003e88:	40020040 	.word	0x40020040
 8003e8c:	40020058 	.word	0x40020058
 8003e90:	40020070 	.word	0x40020070
 8003e94:	40020088 	.word	0x40020088
 8003e98:	400200a0 	.word	0x400200a0
 8003e9c:	400200b8 	.word	0x400200b8
 8003ea0:	40020410 	.word	0x40020410
 8003ea4:	40020428 	.word	0x40020428
 8003ea8:	40020440 	.word	0x40020440
 8003eac:	40020458 	.word	0x40020458
 8003eb0:	40020470 	.word	0x40020470
 8003eb4:	40020488 	.word	0x40020488
 8003eb8:	400204a0 	.word	0x400204a0
 8003ebc:	400204b8 	.word	0x400204b8
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 020a 	bic.w	r2, r2, #10
 8003ece:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8097 	beq.w	8004018 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ef2:	e091      	b.n	8004018 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2208      	movs	r2, #8
 8003efe:	409a      	lsls	r2, r3
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8088 	beq.w	800401a <HAL_DMA_IRQHandler+0xe7e>
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8082 	beq.w	800401a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a41      	ldr	r2, [pc, #260]	@ (8004020 <HAL_DMA_IRQHandler+0xe84>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d04a      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a3f      	ldr	r2, [pc, #252]	@ (8004024 <HAL_DMA_IRQHandler+0xe88>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d045      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a3e      	ldr	r2, [pc, #248]	@ (8004028 <HAL_DMA_IRQHandler+0xe8c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d040      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a3c      	ldr	r2, [pc, #240]	@ (800402c <HAL_DMA_IRQHandler+0xe90>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d03b      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a3b      	ldr	r2, [pc, #236]	@ (8004030 <HAL_DMA_IRQHandler+0xe94>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d036      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a39      	ldr	r2, [pc, #228]	@ (8004034 <HAL_DMA_IRQHandler+0xe98>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d031      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a38      	ldr	r2, [pc, #224]	@ (8004038 <HAL_DMA_IRQHandler+0xe9c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d02c      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a36      	ldr	r2, [pc, #216]	@ (800403c <HAL_DMA_IRQHandler+0xea0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d027      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a35      	ldr	r2, [pc, #212]	@ (8004040 <HAL_DMA_IRQHandler+0xea4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a33      	ldr	r2, [pc, #204]	@ (8004044 <HAL_DMA_IRQHandler+0xea8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a32      	ldr	r2, [pc, #200]	@ (8004048 <HAL_DMA_IRQHandler+0xeac>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a30      	ldr	r2, [pc, #192]	@ (800404c <HAL_DMA_IRQHandler+0xeb0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a2f      	ldr	r2, [pc, #188]	@ (8004050 <HAL_DMA_IRQHandler+0xeb4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8004054 <HAL_DMA_IRQHandler+0xeb8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8004058 <HAL_DMA_IRQHandler+0xebc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe1a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800405c <HAL_DMA_IRQHandler+0xec0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0xe2c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 021c 	bic.w	r2, r2, #28
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e007      	b.n	8003fd8 <HAL_DMA_IRQHandler+0xe3c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 020e 	bic.w	r2, r2, #14
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	4798      	blx	r3
 800400e:	e004      	b.n	800401a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004010:	bf00      	nop
 8004012:	e002      	b.n	800401a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004018:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800401a:	3728      	adds	r7, #40	@ 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40020010 	.word	0x40020010
 8004024:	40020028 	.word	0x40020028
 8004028:	40020040 	.word	0x40020040
 800402c:	40020058 	.word	0x40020058
 8004030:	40020070 	.word	0x40020070
 8004034:	40020088 	.word	0x40020088
 8004038:	400200a0 	.word	0x400200a0
 800403c:	400200b8 	.word	0x400200b8
 8004040:	40020410 	.word	0x40020410
 8004044:	40020428 	.word	0x40020428
 8004048:	40020440 	.word	0x40020440
 800404c:	40020458 	.word	0x40020458
 8004050:	40020470 	.word	0x40020470
 8004054:	40020488 	.word	0x40020488
 8004058:	400204a0 	.word	0x400204a0
 800405c:	400204b8 	.word	0x400204b8

08004060 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004072:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004078:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a7f      	ldr	r2, [pc, #508]	@ (800427c <DMA_SetConfig+0x21c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d072      	beq.n	800416a <DMA_SetConfig+0x10a>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a7d      	ldr	r2, [pc, #500]	@ (8004280 <DMA_SetConfig+0x220>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d06d      	beq.n	800416a <DMA_SetConfig+0x10a>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a7c      	ldr	r2, [pc, #496]	@ (8004284 <DMA_SetConfig+0x224>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d068      	beq.n	800416a <DMA_SetConfig+0x10a>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a7a      	ldr	r2, [pc, #488]	@ (8004288 <DMA_SetConfig+0x228>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d063      	beq.n	800416a <DMA_SetConfig+0x10a>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a79      	ldr	r2, [pc, #484]	@ (800428c <DMA_SetConfig+0x22c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d05e      	beq.n	800416a <DMA_SetConfig+0x10a>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a77      	ldr	r2, [pc, #476]	@ (8004290 <DMA_SetConfig+0x230>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d059      	beq.n	800416a <DMA_SetConfig+0x10a>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a76      	ldr	r2, [pc, #472]	@ (8004294 <DMA_SetConfig+0x234>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d054      	beq.n	800416a <DMA_SetConfig+0x10a>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a74      	ldr	r2, [pc, #464]	@ (8004298 <DMA_SetConfig+0x238>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d04f      	beq.n	800416a <DMA_SetConfig+0x10a>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a73      	ldr	r2, [pc, #460]	@ (800429c <DMA_SetConfig+0x23c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d04a      	beq.n	800416a <DMA_SetConfig+0x10a>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a71      	ldr	r2, [pc, #452]	@ (80042a0 <DMA_SetConfig+0x240>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d045      	beq.n	800416a <DMA_SetConfig+0x10a>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a70      	ldr	r2, [pc, #448]	@ (80042a4 <DMA_SetConfig+0x244>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d040      	beq.n	800416a <DMA_SetConfig+0x10a>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a6e      	ldr	r2, [pc, #440]	@ (80042a8 <DMA_SetConfig+0x248>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d03b      	beq.n	800416a <DMA_SetConfig+0x10a>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a6d      	ldr	r2, [pc, #436]	@ (80042ac <DMA_SetConfig+0x24c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d036      	beq.n	800416a <DMA_SetConfig+0x10a>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a6b      	ldr	r2, [pc, #428]	@ (80042b0 <DMA_SetConfig+0x250>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d031      	beq.n	800416a <DMA_SetConfig+0x10a>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a6a      	ldr	r2, [pc, #424]	@ (80042b4 <DMA_SetConfig+0x254>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d02c      	beq.n	800416a <DMA_SetConfig+0x10a>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a68      	ldr	r2, [pc, #416]	@ (80042b8 <DMA_SetConfig+0x258>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d027      	beq.n	800416a <DMA_SetConfig+0x10a>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a67      	ldr	r2, [pc, #412]	@ (80042bc <DMA_SetConfig+0x25c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <DMA_SetConfig+0x10a>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a65      	ldr	r2, [pc, #404]	@ (80042c0 <DMA_SetConfig+0x260>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01d      	beq.n	800416a <DMA_SetConfig+0x10a>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a64      	ldr	r2, [pc, #400]	@ (80042c4 <DMA_SetConfig+0x264>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <DMA_SetConfig+0x10a>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a62      	ldr	r2, [pc, #392]	@ (80042c8 <DMA_SetConfig+0x268>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <DMA_SetConfig+0x10a>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a61      	ldr	r2, [pc, #388]	@ (80042cc <DMA_SetConfig+0x26c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <DMA_SetConfig+0x10a>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a5f      	ldr	r2, [pc, #380]	@ (80042d0 <DMA_SetConfig+0x270>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <DMA_SetConfig+0x10a>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a5e      	ldr	r2, [pc, #376]	@ (80042d4 <DMA_SetConfig+0x274>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <DMA_SetConfig+0x10a>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a5c      	ldr	r2, [pc, #368]	@ (80042d8 <DMA_SetConfig+0x278>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <DMA_SetConfig+0x10e>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <DMA_SetConfig+0x110>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00d      	beq.n	8004190 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800417c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800418e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a39      	ldr	r2, [pc, #228]	@ (800427c <DMA_SetConfig+0x21c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d04a      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a38      	ldr	r2, [pc, #224]	@ (8004280 <DMA_SetConfig+0x220>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d045      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a36      	ldr	r2, [pc, #216]	@ (8004284 <DMA_SetConfig+0x224>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d040      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a35      	ldr	r2, [pc, #212]	@ (8004288 <DMA_SetConfig+0x228>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d03b      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a33      	ldr	r2, [pc, #204]	@ (800428c <DMA_SetConfig+0x22c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d036      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a32      	ldr	r2, [pc, #200]	@ (8004290 <DMA_SetConfig+0x230>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d031      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a30      	ldr	r2, [pc, #192]	@ (8004294 <DMA_SetConfig+0x234>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02c      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2f      	ldr	r2, [pc, #188]	@ (8004298 <DMA_SetConfig+0x238>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d027      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2d      	ldr	r2, [pc, #180]	@ (800429c <DMA_SetConfig+0x23c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d022      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2c      	ldr	r2, [pc, #176]	@ (80042a0 <DMA_SetConfig+0x240>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d01d      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a2a      	ldr	r2, [pc, #168]	@ (80042a4 <DMA_SetConfig+0x244>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d018      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a29      	ldr	r2, [pc, #164]	@ (80042a8 <DMA_SetConfig+0x248>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d013      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a27      	ldr	r2, [pc, #156]	@ (80042ac <DMA_SetConfig+0x24c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00e      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a26      	ldr	r2, [pc, #152]	@ (80042b0 <DMA_SetConfig+0x250>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d009      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a24      	ldr	r2, [pc, #144]	@ (80042b4 <DMA_SetConfig+0x254>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <DMA_SetConfig+0x1d0>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a23      	ldr	r2, [pc, #140]	@ (80042b8 <DMA_SetConfig+0x258>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <DMA_SetConfig+0x1d4>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <DMA_SetConfig+0x1d6>
 8004234:	2300      	movs	r3, #0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d059      	beq.n	80042ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	223f      	movs	r2, #63	@ 0x3f
 8004244:	409a      	lsls	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004258:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b40      	cmp	r3, #64	@ 0x40
 8004268:	d138      	bne.n	80042dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800427a:	e0ae      	b.n	80043da <DMA_SetConfig+0x37a>
 800427c:	40020010 	.word	0x40020010
 8004280:	40020028 	.word	0x40020028
 8004284:	40020040 	.word	0x40020040
 8004288:	40020058 	.word	0x40020058
 800428c:	40020070 	.word	0x40020070
 8004290:	40020088 	.word	0x40020088
 8004294:	400200a0 	.word	0x400200a0
 8004298:	400200b8 	.word	0x400200b8
 800429c:	40020410 	.word	0x40020410
 80042a0:	40020428 	.word	0x40020428
 80042a4:	40020440 	.word	0x40020440
 80042a8:	40020458 	.word	0x40020458
 80042ac:	40020470 	.word	0x40020470
 80042b0:	40020488 	.word	0x40020488
 80042b4:	400204a0 	.word	0x400204a0
 80042b8:	400204b8 	.word	0x400204b8
 80042bc:	58025408 	.word	0x58025408
 80042c0:	5802541c 	.word	0x5802541c
 80042c4:	58025430 	.word	0x58025430
 80042c8:	58025444 	.word	0x58025444
 80042cc:	58025458 	.word	0x58025458
 80042d0:	5802546c 	.word	0x5802546c
 80042d4:	58025480 	.word	0x58025480
 80042d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]
}
 80042ec:	e075      	b.n	80043da <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a3d      	ldr	r2, [pc, #244]	@ (80043e8 <DMA_SetConfig+0x388>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d04a      	beq.n	800438e <DMA_SetConfig+0x32e>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a3b      	ldr	r2, [pc, #236]	@ (80043ec <DMA_SetConfig+0x38c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d045      	beq.n	800438e <DMA_SetConfig+0x32e>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a3a      	ldr	r2, [pc, #232]	@ (80043f0 <DMA_SetConfig+0x390>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d040      	beq.n	800438e <DMA_SetConfig+0x32e>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a38      	ldr	r2, [pc, #224]	@ (80043f4 <DMA_SetConfig+0x394>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d03b      	beq.n	800438e <DMA_SetConfig+0x32e>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a37      	ldr	r2, [pc, #220]	@ (80043f8 <DMA_SetConfig+0x398>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d036      	beq.n	800438e <DMA_SetConfig+0x32e>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a35      	ldr	r2, [pc, #212]	@ (80043fc <DMA_SetConfig+0x39c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d031      	beq.n	800438e <DMA_SetConfig+0x32e>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a34      	ldr	r2, [pc, #208]	@ (8004400 <DMA_SetConfig+0x3a0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d02c      	beq.n	800438e <DMA_SetConfig+0x32e>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a32      	ldr	r2, [pc, #200]	@ (8004404 <DMA_SetConfig+0x3a4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d027      	beq.n	800438e <DMA_SetConfig+0x32e>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a31      	ldr	r2, [pc, #196]	@ (8004408 <DMA_SetConfig+0x3a8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d022      	beq.n	800438e <DMA_SetConfig+0x32e>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2f      	ldr	r2, [pc, #188]	@ (800440c <DMA_SetConfig+0x3ac>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d01d      	beq.n	800438e <DMA_SetConfig+0x32e>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2e      	ldr	r2, [pc, #184]	@ (8004410 <DMA_SetConfig+0x3b0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d018      	beq.n	800438e <DMA_SetConfig+0x32e>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2c      	ldr	r2, [pc, #176]	@ (8004414 <DMA_SetConfig+0x3b4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <DMA_SetConfig+0x32e>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a2b      	ldr	r2, [pc, #172]	@ (8004418 <DMA_SetConfig+0x3b8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00e      	beq.n	800438e <DMA_SetConfig+0x32e>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a29      	ldr	r2, [pc, #164]	@ (800441c <DMA_SetConfig+0x3bc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d009      	beq.n	800438e <DMA_SetConfig+0x32e>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a28      	ldr	r2, [pc, #160]	@ (8004420 <DMA_SetConfig+0x3c0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <DMA_SetConfig+0x32e>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a26      	ldr	r2, [pc, #152]	@ (8004424 <DMA_SetConfig+0x3c4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d101      	bne.n	8004392 <DMA_SetConfig+0x332>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <DMA_SetConfig+0x334>
 8004392:	2300      	movs	r3, #0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d020      	beq.n	80043da <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	2201      	movs	r2, #1
 80043a2:	409a      	lsls	r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b40      	cmp	r3, #64	@ 0x40
 80043b6:	d108      	bne.n	80043ca <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	60da      	str	r2, [r3, #12]
}
 80043c8:	e007      	b.n	80043da <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	60da      	str	r2, [r3, #12]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	48022c08 	.word	0x48022c08
 80043ec:	48022c1c 	.word	0x48022c1c
 80043f0:	48022c30 	.word	0x48022c30
 80043f4:	48022c44 	.word	0x48022c44
 80043f8:	48022c58 	.word	0x48022c58
 80043fc:	48022c6c 	.word	0x48022c6c
 8004400:	48022c80 	.word	0x48022c80
 8004404:	48022c94 	.word	0x48022c94
 8004408:	58025408 	.word	0x58025408
 800440c:	5802541c 	.word	0x5802541c
 8004410:	58025430 	.word	0x58025430
 8004414:	58025444 	.word	0x58025444
 8004418:	58025458 	.word	0x58025458
 800441c:	5802546c 	.word	0x5802546c
 8004420:	58025480 	.word	0x58025480
 8004424:	58025494 	.word	0x58025494

08004428 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a42      	ldr	r2, [pc, #264]	@ (8004540 <DMA_CalcBaseAndBitshift+0x118>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d04a      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a41      	ldr	r2, [pc, #260]	@ (8004544 <DMA_CalcBaseAndBitshift+0x11c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d045      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a3f      	ldr	r2, [pc, #252]	@ (8004548 <DMA_CalcBaseAndBitshift+0x120>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d040      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a3e      	ldr	r2, [pc, #248]	@ (800454c <DMA_CalcBaseAndBitshift+0x124>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d03b      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a3c      	ldr	r2, [pc, #240]	@ (8004550 <DMA_CalcBaseAndBitshift+0x128>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d036      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a3b      	ldr	r2, [pc, #236]	@ (8004554 <DMA_CalcBaseAndBitshift+0x12c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d031      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a39      	ldr	r2, [pc, #228]	@ (8004558 <DMA_CalcBaseAndBitshift+0x130>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d02c      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a38      	ldr	r2, [pc, #224]	@ (800455c <DMA_CalcBaseAndBitshift+0x134>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d027      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a36      	ldr	r2, [pc, #216]	@ (8004560 <DMA_CalcBaseAndBitshift+0x138>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d022      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a35      	ldr	r2, [pc, #212]	@ (8004564 <DMA_CalcBaseAndBitshift+0x13c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d01d      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a33      	ldr	r2, [pc, #204]	@ (8004568 <DMA_CalcBaseAndBitshift+0x140>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a32      	ldr	r2, [pc, #200]	@ (800456c <DMA_CalcBaseAndBitshift+0x144>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a30      	ldr	r2, [pc, #192]	@ (8004570 <DMA_CalcBaseAndBitshift+0x148>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004574 <DMA_CalcBaseAndBitshift+0x14c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004578 <DMA_CalcBaseAndBitshift+0x150>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2c      	ldr	r2, [pc, #176]	@ (800457c <DMA_CalcBaseAndBitshift+0x154>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <DMA_CalcBaseAndBitshift+0xac>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <DMA_CalcBaseAndBitshift+0xae>
 80044d4:	2300      	movs	r3, #0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d024      	beq.n	8004524 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	3b10      	subs	r3, #16
 80044e2:	4a27      	ldr	r2, [pc, #156]	@ (8004580 <DMA_CalcBaseAndBitshift+0x158>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	4a24      	ldr	r2, [pc, #144]	@ (8004584 <DMA_CalcBaseAndBitshift+0x15c>)
 80044f4:	5cd3      	ldrb	r3, [r2, r3]
 80044f6:	461a      	mov	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d908      	bls.n	8004514 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	4b1f      	ldr	r3, [pc, #124]	@ (8004588 <DMA_CalcBaseAndBitshift+0x160>)
 800450a:	4013      	ands	r3, r2
 800450c:	1d1a      	adds	r2, r3, #4
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	659a      	str	r2, [r3, #88]	@ 0x58
 8004512:	e00d      	b.n	8004530 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <DMA_CalcBaseAndBitshift+0x160>)
 800451c:	4013      	ands	r3, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6593      	str	r3, [r2, #88]	@ 0x58
 8004522:	e005      	b.n	8004530 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	40020010 	.word	0x40020010
 8004544:	40020028 	.word	0x40020028
 8004548:	40020040 	.word	0x40020040
 800454c:	40020058 	.word	0x40020058
 8004550:	40020070 	.word	0x40020070
 8004554:	40020088 	.word	0x40020088
 8004558:	400200a0 	.word	0x400200a0
 800455c:	400200b8 	.word	0x400200b8
 8004560:	40020410 	.word	0x40020410
 8004564:	40020428 	.word	0x40020428
 8004568:	40020440 	.word	0x40020440
 800456c:	40020458 	.word	0x40020458
 8004570:	40020470 	.word	0x40020470
 8004574:	40020488 	.word	0x40020488
 8004578:	400204a0 	.word	0x400204a0
 800457c:	400204b8 	.word	0x400204b8
 8004580:	aaaaaaab 	.word	0xaaaaaaab
 8004584:	0800ba88 	.word	0x0800ba88
 8004588:	fffffc00 	.word	0xfffffc00

0800458c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d120      	bne.n	80045e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d858      	bhi.n	800465a <DMA_CheckFifoParam+0xce>
 80045a8:	a201      	add	r2, pc, #4	@ (adr r2, 80045b0 <DMA_CheckFifoParam+0x24>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045d3 	.word	0x080045d3
 80045b8:	080045c1 	.word	0x080045c1
 80045bc:	0800465b 	.word	0x0800465b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d048      	beq.n	800465e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045d0:	e045      	b.n	800465e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045da:	d142      	bne.n	8004662 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045e0:	e03f      	b.n	8004662 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ea:	d123      	bne.n	8004634 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d838      	bhi.n	8004666 <DMA_CheckFifoParam+0xda>
 80045f4:	a201      	add	r2, pc, #4	@ (adr r2, 80045fc <DMA_CheckFifoParam+0x70>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	0800460d 	.word	0x0800460d
 8004600:	08004613 	.word	0x08004613
 8004604:	0800460d 	.word	0x0800460d
 8004608:	08004625 	.word	0x08004625
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
        break;
 8004610:	e030      	b.n	8004674 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d025      	beq.n	800466a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004622:	e022      	b.n	800466a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800462c:	d11f      	bne.n	800466e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004632:	e01c      	b.n	800466e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004638:	2b02      	cmp	r3, #2
 800463a:	d902      	bls.n	8004642 <DMA_CheckFifoParam+0xb6>
 800463c:	2b03      	cmp	r3, #3
 800463e:	d003      	beq.n	8004648 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004640:	e018      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
        break;
 8004646:	e015      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00e      	beq.n	8004672 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]
    break;
 8004658:	e00b      	b.n	8004672 <DMA_CheckFifoParam+0xe6>
        break;
 800465a:	bf00      	nop
 800465c:	e00a      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        break;
 800465e:	bf00      	nop
 8004660:	e008      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        break;
 8004662:	bf00      	nop
 8004664:	e006      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        break;
 8004666:	bf00      	nop
 8004668:	e004      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        break;
 800466a:	bf00      	nop
 800466c:	e002      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        break;
 800466e:	bf00      	nop
 8004670:	e000      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
    break;
 8004672:	bf00      	nop
    }
  }

  return status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop

08004684 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a38      	ldr	r2, [pc, #224]	@ (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d022      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a36      	ldr	r2, [pc, #216]	@ (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01d      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a35      	ldr	r2, [pc, #212]	@ (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d018      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a33      	ldr	r2, [pc, #204]	@ (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a32      	ldr	r2, [pc, #200]	@ (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a30      	ldr	r2, [pc, #192]	@ (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d009      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d101      	bne.n	80046e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046e6:	2300      	movs	r3, #0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01a      	beq.n	8004722 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	3b08      	subs	r3, #8
 80046f4:	4a28      	ldr	r2, [pc, #160]	@ (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4b26      	ldr	r3, [pc, #152]	@ (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	461a      	mov	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a24      	ldr	r2, [pc, #144]	@ (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004710:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	2201      	movs	r2, #1
 800471a:	409a      	lsls	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004720:	e024      	b.n	800476c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	3b10      	subs	r3, #16
 800472a:	4a1e      	ldr	r2, [pc, #120]	@ (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4a1c      	ldr	r2, [pc, #112]	@ (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d806      	bhi.n	800474a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4a1b      	ldr	r2, [pc, #108]	@ (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d902      	bls.n	800474a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3308      	adds	r3, #8
 8004748:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4b18      	ldr	r3, [pc, #96]	@ (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	461a      	mov	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a16      	ldr	r2, [pc, #88]	@ (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800475c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 031f 	and.w	r3, r3, #31
 8004764:	2201      	movs	r2, #1
 8004766:	409a      	lsls	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	58025408 	.word	0x58025408
 800477c:	5802541c 	.word	0x5802541c
 8004780:	58025430 	.word	0x58025430
 8004784:	58025444 	.word	0x58025444
 8004788:	58025458 	.word	0x58025458
 800478c:	5802546c 	.word	0x5802546c
 8004790:	58025480 	.word	0x58025480
 8004794:	58025494 	.word	0x58025494
 8004798:	cccccccd 	.word	0xcccccccd
 800479c:	16009600 	.word	0x16009600
 80047a0:	58025880 	.word	0x58025880
 80047a4:	aaaaaaab 	.word	0xaaaaaaab
 80047a8:	400204b8 	.word	0x400204b8
 80047ac:	4002040f 	.word	0x4002040f
 80047b0:	10008200 	.word	0x10008200
 80047b4:	40020880 	.word	0x40020880

080047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d04a      	beq.n	8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d847      	bhi.n	8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a25      	ldr	r2, [pc, #148]	@ (8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d022      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a24      	ldr	r2, [pc, #144]	@ (8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d01d      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a22      	ldr	r2, [pc, #136]	@ (8004878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d018      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a21      	ldr	r2, [pc, #132]	@ (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d013      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1f      	ldr	r2, [pc, #124]	@ (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00e      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1e      	ldr	r2, [pc, #120]	@ (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d009      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d004      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1b      	ldr	r2, [pc, #108]	@ (800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004828:	2300      	movs	r3, #0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4b17      	ldr	r3, [pc, #92]	@ (8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	461a      	mov	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004840:	671a      	str	r2, [r3, #112]	@ 0x70
 8004842:	e009      	b.n	8004858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4b14      	ldr	r3, [pc, #80]	@ (8004898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	461a      	mov	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a11      	ldr	r2, [pc, #68]	@ (800489c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004856:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3b01      	subs	r3, #1
 800485c:	2201      	movs	r2, #1
 800485e:	409a      	lsls	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	58025408 	.word	0x58025408
 8004874:	5802541c 	.word	0x5802541c
 8004878:	58025430 	.word	0x58025430
 800487c:	58025444 	.word	0x58025444
 8004880:	58025458 	.word	0x58025458
 8004884:	5802546c 	.word	0x5802546c
 8004888:	58025480 	.word	0x58025480
 800488c:	58025494 	.word	0x58025494
 8004890:	1600963f 	.word	0x1600963f
 8004894:	58025940 	.word	0x58025940
 8004898:	1000823f 	.word	0x1000823f
 800489c:	40020940 	.word	0x40020940

080048a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b089      	sub	sp, #36	@ 0x24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048ae:	4b89      	ldr	r3, [pc, #548]	@ (8004ad4 <HAL_GPIO_Init+0x234>)
 80048b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048b2:	e194      	b.n	8004bde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	2101      	movs	r1, #1
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	fa01 f303 	lsl.w	r3, r1, r3
 80048c0:	4013      	ands	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 8186 	beq.w	8004bd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d005      	beq.n	80048e4 <HAL_GPIO_Init+0x44>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d130      	bne.n	8004946 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	2203      	movs	r2, #3
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4013      	ands	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800491a:	2201      	movs	r2, #1
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	091b      	lsrs	r3, r3, #4
 8004930:	f003 0201 	and.w	r2, r3, #1
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b03      	cmp	r3, #3
 8004950:	d017      	beq.n	8004982 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	2203      	movs	r2, #3
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d123      	bne.n	80049d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	08da      	lsrs	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3208      	adds	r2, #8
 8004996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800499a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	220f      	movs	r2, #15
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	08da      	lsrs	r2, r3, #3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3208      	adds	r2, #8
 80049d0:	69b9      	ldr	r1, [r7, #24]
 80049d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	2203      	movs	r2, #3
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f003 0203 	and.w	r2, r3, #3
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80e0 	beq.w	8004bd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a18:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad8 <HAL_GPIO_Init+0x238>)
 8004a1a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ad8 <HAL_GPIO_Init+0x238>)
 8004a20:	f043 0302 	orr.w	r3, r3, #2
 8004a24:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004a28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad8 <HAL_GPIO_Init+0x238>)
 8004a2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a36:	4a29      	ldr	r2, [pc, #164]	@ (8004adc <HAL_GPIO_Init+0x23c>)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	089b      	lsrs	r3, r3, #2
 8004a3c:	3302      	adds	r3, #2
 8004a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	220f      	movs	r2, #15
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a20      	ldr	r2, [pc, #128]	@ (8004ae0 <HAL_GPIO_Init+0x240>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d052      	beq.n	8004b08 <HAL_GPIO_Init+0x268>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae4 <HAL_GPIO_Init+0x244>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d031      	beq.n	8004ace <HAL_GPIO_Init+0x22e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae8 <HAL_GPIO_Init+0x248>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d02b      	beq.n	8004aca <HAL_GPIO_Init+0x22a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1d      	ldr	r2, [pc, #116]	@ (8004aec <HAL_GPIO_Init+0x24c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d025      	beq.n	8004ac6 <HAL_GPIO_Init+0x226>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004af0 <HAL_GPIO_Init+0x250>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01f      	beq.n	8004ac2 <HAL_GPIO_Init+0x222>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1b      	ldr	r2, [pc, #108]	@ (8004af4 <HAL_GPIO_Init+0x254>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d019      	beq.n	8004abe <HAL_GPIO_Init+0x21e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8004af8 <HAL_GPIO_Init+0x258>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <HAL_GPIO_Init+0x21a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a19      	ldr	r2, [pc, #100]	@ (8004afc <HAL_GPIO_Init+0x25c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00d      	beq.n	8004ab6 <HAL_GPIO_Init+0x216>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	@ (8004b00 <HAL_GPIO_Init+0x260>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <HAL_GPIO_Init+0x212>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a17      	ldr	r2, [pc, #92]	@ (8004b04 <HAL_GPIO_Init+0x264>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <HAL_GPIO_Init+0x20e>
 8004aaa:	2309      	movs	r3, #9
 8004aac:	e02d      	b.n	8004b0a <HAL_GPIO_Init+0x26a>
 8004aae:	230a      	movs	r3, #10
 8004ab0:	e02b      	b.n	8004b0a <HAL_GPIO_Init+0x26a>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	e029      	b.n	8004b0a <HAL_GPIO_Init+0x26a>
 8004ab6:	2307      	movs	r3, #7
 8004ab8:	e027      	b.n	8004b0a <HAL_GPIO_Init+0x26a>
 8004aba:	2306      	movs	r3, #6
 8004abc:	e025      	b.n	8004b0a <HAL_GPIO_Init+0x26a>
 8004abe:	2305      	movs	r3, #5
 8004ac0:	e023      	b.n	8004b0a <HAL_GPIO_Init+0x26a>
 8004ac2:	2304      	movs	r3, #4
 8004ac4:	e021      	b.n	8004b0a <HAL_GPIO_Init+0x26a>
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e01f      	b.n	8004b0a <HAL_GPIO_Init+0x26a>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e01d      	b.n	8004b0a <HAL_GPIO_Init+0x26a>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e01b      	b.n	8004b0a <HAL_GPIO_Init+0x26a>
 8004ad2:	bf00      	nop
 8004ad4:	58000080 	.word	0x58000080
 8004ad8:	58024400 	.word	0x58024400
 8004adc:	58000400 	.word	0x58000400
 8004ae0:	58020000 	.word	0x58020000
 8004ae4:	58020400 	.word	0x58020400
 8004ae8:	58020800 	.word	0x58020800
 8004aec:	58020c00 	.word	0x58020c00
 8004af0:	58021000 	.word	0x58021000
 8004af4:	58021400 	.word	0x58021400
 8004af8:	58021800 	.word	0x58021800
 8004afc:	58021c00 	.word	0x58021c00
 8004b00:	58022000 	.word	0x58022000
 8004b04:	58022400 	.word	0x58022400
 8004b08:	2300      	movs	r3, #0
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	f002 0203 	and.w	r2, r2, #3
 8004b10:	0092      	lsls	r2, r2, #2
 8004b12:	4093      	lsls	r3, r2
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b1a:	4938      	ldr	r1, [pc, #224]	@ (8004bfc <HAL_GPIO_Init+0x35c>)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	3302      	adds	r3, #2
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	43db      	mvns	r3, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4013      	ands	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4013      	ands	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4013      	ands	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f47f ae63 	bne.w	80048b4 <HAL_GPIO_Init+0x14>
  }
}
 8004bee:	bf00      	nop
 8004bf0:	bf00      	nop
 8004bf2:	3724      	adds	r7, #36	@ 0x24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	58000400 	.word	0x58000400

08004c00 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0b1      	b.n	8004d7a <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b05      	cmp	r3, #5
 8004c20:	d101      	bne.n	8004c26 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e0a9      	b.n	8004d7a <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d101      	bne.n	8004c36 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e0a1      	b.n	8004d7a <HAL_OPAMP_Init+0x17a>
    }


    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));

    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d103      	bne.n	8004c52 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fc f87a 	bl	8000d4c <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c66:	601a      	str	r2, [r3, #0]
    /* In PGA mode InvertingInput is Not Applicable  */
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b40      	cmp	r3, #64	@ 0x40
 8004c6e:	d119      	bne.n	8004ca4 <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b43      	ldr	r3, [pc, #268]	@ (8004d84 <HAL_OPAMP_Init+0x184>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6851      	ldr	r1, [r2, #4]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6892      	ldr	r2, [r2, #8]
 8004c82:	4311      	orrs	r1, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6952      	ldr	r2, [r2, #20]
 8004c88:	4311      	orrs	r1, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6992      	ldr	r2, [r2, #24]
 8004c8e:	4311      	orrs	r1, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6912      	ldr	r2, [r2, #16]
 8004c94:	4311      	orrs	r1, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	69d2      	ldr	r2, [r2, #28]
 8004c9a:	4311      	orrs	r1, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b60      	cmp	r3, #96	@ 0x60
 8004caa:	d113      	bne.n	8004cd4 <HAL_OPAMP_Init+0xd4>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4b35      	ldr	r3, [pc, #212]	@ (8004d88 <HAL_OPAMP_Init+0x188>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6851      	ldr	r1, [r2, #4]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6892      	ldr	r2, [r2, #8]
 8004cbe:	4311      	orrs	r1, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6912      	ldr	r2, [r2, #16]
 8004cc4:	4311      	orrs	r1, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	69d2      	ldr	r2, [r2, #28]
 8004cca:	4311      	orrs	r1, r2
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	6013      	str	r3, [r2, #0]
                                              hopamp->Init.Mode | \
                                              hopamp->Init.NonInvertingInput | \
                                              hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d116      	bne.n	8004d0a <HAL_OPAMP_Init+0x10a>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b29      	ldr	r3, [pc, #164]	@ (8004d88 <HAL_OPAMP_Init+0x188>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6851      	ldr	r1, [r2, #4]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6892      	ldr	r2, [r2, #8]
 8004cee:	4311      	orrs	r1, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	68d2      	ldr	r2, [r2, #12]
 8004cf4:	4311      	orrs	r1, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6912      	ldr	r2, [r2, #16]
 8004cfa:	4311      	orrs	r1, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	69d2      	ldr	r2, [r2, #28]
 8004d00:	4311      	orrs	r1, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	430b      	orrs	r3, r1
 8004d08:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d12:	d127      	bne.n	8004d64 <HAL_OPAMP_Init+0x164>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d1c:	d011      	beq.n	8004d42 <HAL_OPAMP_Init+0x142>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	4b16      	ldr	r3, [pc, #88]	@ (8004d8c <HAL_OPAMP_Init+0x18c>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6053      	str	r3, [r2, #4]
 8004d40:	e010      	b.n	8004d64 <HAL_OPAMP_Init+0x164>
      else
      {
        /* OPAMP_POWERMODE_HIGHSPEED*/
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* high speed mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d46:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNHighSpeed));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <HAL_OPAMP_Init+0x18c>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6093      	str	r3, [r2, #8]
      }
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d103      	bne.n	8004d78 <HAL_OPAMP_Init+0x178>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	fff83e93 	.word	0xfff83e93
 8004d88:	fffbfe93 	.word	0xfffbfe93
 8004d8c:	ffffe0e0 	.word	0xffffe0e0

08004d90 <HAL_OPAMP_Start>:
  * @brief  Start the OPAMP.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	73fb      	strb	r3, [r7, #15]
 8004da6:	e01d      	b.n	8004de4 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	d102      	bne.n	8004dba <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e014      	b.n	8004de4 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d10c      	bne.n	8004de0 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2204      	movs	r2, #4
 8004dda:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8004dde:	e001      	b.n	8004de4 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a04      	ldr	r2, [pc, #16]	@ (8004e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e02:	6013      	str	r3, [r2, #0]
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	58024800 	.word	0x58024800

08004e14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004e1c:	4b29      	ldr	r3, [pc, #164]	@ (8004ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	2b06      	cmp	r3, #6
 8004e26:	d00a      	beq.n	8004e3e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e28:	4b26      	ldr	r3, [pc, #152]	@ (8004ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d001      	beq.n	8004e3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e040      	b.n	8004ebc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e03e      	b.n	8004ebc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e3e:	4b21      	ldr	r3, [pc, #132]	@ (8004ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004e46:	491f      	ldr	r1, [pc, #124]	@ (8004ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e4e:	f7fc f9ff 	bl	8001250 <HAL_GetTick>
 8004e52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e54:	e009      	b.n	8004e6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e56:	f7fc f9fb 	bl	8001250 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e64:	d901      	bls.n	8004e6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e028      	b.n	8004ebc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e6a:	4b16      	ldr	r3, [pc, #88]	@ (8004ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e76:	d1ee      	bne.n	8004e56 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b1e      	cmp	r3, #30
 8004e7c:	d008      	beq.n	8004e90 <HAL_PWREx_ConfigSupply+0x7c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e82:	d005      	beq.n	8004e90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b1d      	cmp	r3, #29
 8004e88:	d002      	beq.n	8004e90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b2d      	cmp	r3, #45	@ 0x2d
 8004e8e:	d114      	bne.n	8004eba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004e90:	f7fc f9de 	bl	8001250 <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e96:	e009      	b.n	8004eac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e98:	f7fc f9da 	bl	8001250 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ea6:	d901      	bls.n	8004eac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e007      	b.n	8004ebc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb8:	d1ee      	bne.n	8004e98 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	58024800 	.word	0x58024800

08004ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08c      	sub	sp, #48	@ 0x30
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d102      	bne.n	8004edc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f000 bc1f 	b.w	800571a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 80b3 	beq.w	8005050 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eea:	4b95      	ldr	r3, [pc, #596]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ef4:	4b92      	ldr	r3, [pc, #584]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d007      	beq.n	8004f10 <HAL_RCC_OscConfig+0x48>
 8004f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f02:	2b18      	cmp	r3, #24
 8004f04:	d112      	bne.n	8004f2c <HAL_RCC_OscConfig+0x64>
 8004f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d10d      	bne.n	8004f2c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f10:	4b8b      	ldr	r3, [pc, #556]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8098 	beq.w	800504e <HAL_RCC_OscConfig+0x186>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f040 8093 	bne.w	800504e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e3f6      	b.n	800571a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f34:	d106      	bne.n	8004f44 <HAL_RCC_OscConfig+0x7c>
 8004f36:	4b82      	ldr	r3, [pc, #520]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a81      	ldr	r2, [pc, #516]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	e058      	b.n	8004ff6 <HAL_RCC_OscConfig+0x12e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d112      	bne.n	8004f72 <HAL_RCC_OscConfig+0xaa>
 8004f4c:	4b7c      	ldr	r3, [pc, #496]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a7b      	ldr	r2, [pc, #492]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	4b79      	ldr	r3, [pc, #484]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a78      	ldr	r2, [pc, #480]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f5e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	4b76      	ldr	r3, [pc, #472]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a75      	ldr	r2, [pc, #468]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	e041      	b.n	8004ff6 <HAL_RCC_OscConfig+0x12e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f7a:	d112      	bne.n	8004fa2 <HAL_RCC_OscConfig+0xda>
 8004f7c:	4b70      	ldr	r3, [pc, #448]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a6f      	ldr	r2, [pc, #444]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	4b6d      	ldr	r3, [pc, #436]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a6c      	ldr	r2, [pc, #432]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f8e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	4b6a      	ldr	r3, [pc, #424]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a69      	ldr	r2, [pc, #420]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	e029      	b.n	8004ff6 <HAL_RCC_OscConfig+0x12e>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004faa:	d112      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x10a>
 8004fac:	4b64      	ldr	r3, [pc, #400]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a63      	ldr	r2, [pc, #396]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004fb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	4b61      	ldr	r3, [pc, #388]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a60      	ldr	r2, [pc, #384]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a5d      	ldr	r2, [pc, #372]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e011      	b.n	8004ff6 <HAL_RCC_OscConfig+0x12e>
 8004fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a5a      	ldr	r2, [pc, #360]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4b58      	ldr	r3, [pc, #352]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a57      	ldr	r2, [pc, #348]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004fe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	4b55      	ldr	r3, [pc, #340]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a54      	ldr	r2, [pc, #336]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8004ff0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004ff4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d013      	beq.n	8005026 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffe:	f7fc f927 	bl	8001250 <HAL_GetTick>
 8005002:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005006:	f7fc f923 	bl	8001250 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b64      	cmp	r3, #100	@ 0x64
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e380      	b.n	800571a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005018:	4b49      	ldr	r3, [pc, #292]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x13e>
 8005024:	e014      	b.n	8005050 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005026:	f7fc f913 	bl	8001250 <HAL_GetTick>
 800502a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800502e:	f7fc f90f 	bl	8001250 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b64      	cmp	r3, #100	@ 0x64
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e36c      	b.n	800571a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005040:	4b3f      	ldr	r3, [pc, #252]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f0      	bne.n	800502e <HAL_RCC_OscConfig+0x166>
 800504c:	e000      	b.n	8005050 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800504e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 808c 	beq.w	8005176 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800505e:	4b38      	ldr	r3, [pc, #224]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005066:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005068:	4b35      	ldr	r3, [pc, #212]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 800506a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_RCC_OscConfig+0x1bc>
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	2b18      	cmp	r3, #24
 8005078:	d137      	bne.n	80050ea <HAL_RCC_OscConfig+0x222>
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d132      	bne.n	80050ea <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005084:	4b2e      	ldr	r3, [pc, #184]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_RCC_OscConfig+0x1d4>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e33e      	b.n	800571a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800509c:	4b28      	ldr	r3, [pc, #160]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f023 0219 	bic.w	r2, r3, #25
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	4925      	ldr	r1, [pc, #148]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ae:	f7fc f8cf 	bl	8001250 <HAL_GetTick>
 80050b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050b6:	f7fc f8cb 	bl	8001250 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e328      	b.n	800571a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0f0      	beq.n	80050b6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	061b      	lsls	r3, r3, #24
 80050e2:	4917      	ldr	r1, [pc, #92]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050e8:	e045      	b.n	8005176 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d028      	beq.n	8005144 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050f2:	4b13      	ldr	r3, [pc, #76]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 0219 	bic.w	r2, r3, #25
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	4910      	ldr	r1, [pc, #64]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fc f8a4 	bl	8001250 <HAL_GetTick>
 8005108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510c:	f7fc f8a0 	bl	8001250 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e2fd      	b.n	800571a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800511e:	4b08      	ldr	r3, [pc, #32]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512a:	4b05      	ldr	r3, [pc, #20]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	4901      	ldr	r1, [pc, #4]	@ (8005140 <HAL_RCC_OscConfig+0x278>)
 800513a:	4313      	orrs	r3, r2
 800513c:	604b      	str	r3, [r1, #4]
 800513e:	e01a      	b.n	8005176 <HAL_RCC_OscConfig+0x2ae>
 8005140:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005144:	4b97      	ldr	r3, [pc, #604]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a96      	ldr	r2, [pc, #600]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fc f87e 	bl	8001250 <HAL_GetTick>
 8005154:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005158:	f7fc f87a 	bl	8001250 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e2d7      	b.n	800571a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800516a:	4b8e      	ldr	r3, [pc, #568]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b00      	cmp	r3, #0
 8005180:	d06a      	beq.n	8005258 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005182:	4b88      	ldr	r3, [pc, #544]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800518a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800518c:	4b85      	ldr	r3, [pc, #532]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d007      	beq.n	80051a8 <HAL_RCC_OscConfig+0x2e0>
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b18      	cmp	r3, #24
 800519c:	d11b      	bne.n	80051d6 <HAL_RCC_OscConfig+0x30e>
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d116      	bne.n	80051d6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051a8:	4b7e      	ldr	r3, [pc, #504]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_RCC_OscConfig+0x2f8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	2b80      	cmp	r3, #128	@ 0x80
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e2ac      	b.n	800571a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051c0:	4b78      	ldr	r3, [pc, #480]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	061b      	lsls	r3, r3, #24
 80051ce:	4975      	ldr	r1, [pc, #468]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051d4:	e040      	b.n	8005258 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d023      	beq.n	8005226 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80051de:	4b71      	ldr	r3, [pc, #452]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a70      	ldr	r2, [pc, #448]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 80051e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fc f831 	bl	8001250 <HAL_GetTick>
 80051ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051f2:	f7fc f82d 	bl	8001250 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e28a      	b.n	800571a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005204:	4b67      	ldr	r3, [pc, #412]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005210:	4b64      	ldr	r3, [pc, #400]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	061b      	lsls	r3, r3, #24
 800521e:	4961      	ldr	r1, [pc, #388]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 8005220:	4313      	orrs	r3, r2
 8005222:	60cb      	str	r3, [r1, #12]
 8005224:	e018      	b.n	8005258 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005226:	4b5f      	ldr	r3, [pc, #380]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a5e      	ldr	r2, [pc, #376]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 800522c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7fc f80d 	bl	8001250 <HAL_GetTick>
 8005236:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800523a:	f7fc f809 	bl	8001250 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e266      	b.n	800571a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800524c:	4b55      	ldr	r3, [pc, #340]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f0      	bne.n	800523a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d036      	beq.n	80052d2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d019      	beq.n	80052a0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800526c:	4b4d      	ldr	r3, [pc, #308]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 800526e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005270:	4a4c      	ldr	r2, [pc, #304]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005278:	f7fb ffea 	bl	8001250 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005280:	f7fb ffe6 	bl	8001250 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e243      	b.n	800571a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005292:	4b44      	ldr	r3, [pc, #272]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 8005294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f0      	beq.n	8005280 <HAL_RCC_OscConfig+0x3b8>
 800529e:	e018      	b.n	80052d2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a0:	4b40      	ldr	r3, [pc, #256]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 80052a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a4:	4a3f      	ldr	r2, [pc, #252]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fb ffd0 	bl	8001250 <HAL_GetTick>
 80052b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b4:	f7fb ffcc 	bl	8001250 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e229      	b.n	800571a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052c6:	4b37      	ldr	r3, [pc, #220]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 80052c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d036      	beq.n	800534c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d019      	beq.n	800531a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052e6:	4b2f      	ldr	r3, [pc, #188]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a2e      	ldr	r2, [pc, #184]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 80052ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052f2:	f7fb ffad 	bl	8001250 <HAL_GetTick>
 80052f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052fa:	f7fb ffa9 	bl	8001250 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e206      	b.n	800571a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800530c:	4b25      	ldr	r3, [pc, #148]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0f0      	beq.n	80052fa <HAL_RCC_OscConfig+0x432>
 8005318:	e018      	b.n	800534c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800531a:	4b22      	ldr	r3, [pc, #136]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a21      	ldr	r2, [pc, #132]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 8005320:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005324:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005326:	f7fb ff93 	bl	8001250 <HAL_GetTick>
 800532a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800532e:	f7fb ff8f 	bl	8001250 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e1ec      	b.n	800571a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005340:	4b18      	ldr	r3, [pc, #96]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f0      	bne.n	800532e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 80af 	beq.w	80054b8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800535a:	4b13      	ldr	r3, [pc, #76]	@ (80053a8 <HAL_RCC_OscConfig+0x4e0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a12      	ldr	r2, [pc, #72]	@ (80053a8 <HAL_RCC_OscConfig+0x4e0>)
 8005360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005364:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005366:	f7fb ff73 	bl	8001250 <HAL_GetTick>
 800536a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536e:	f7fb ff6f 	bl	8001250 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b64      	cmp	r3, #100	@ 0x64
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e1cc      	b.n	800571a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005380:	4b09      	ldr	r3, [pc, #36]	@ (80053a8 <HAL_RCC_OscConfig+0x4e0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d10b      	bne.n	80053ac <HAL_RCC_OscConfig+0x4e4>
 8005394:	4b03      	ldr	r3, [pc, #12]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 8005396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005398:	4a02      	ldr	r2, [pc, #8]	@ (80053a4 <HAL_RCC_OscConfig+0x4dc>)
 800539a:	f043 0301 	orr.w	r3, r3, #1
 800539e:	6713      	str	r3, [r2, #112]	@ 0x70
 80053a0:	e05b      	b.n	800545a <HAL_RCC_OscConfig+0x592>
 80053a2:	bf00      	nop
 80053a4:	58024400 	.word	0x58024400
 80053a8:	58024800 	.word	0x58024800
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d112      	bne.n	80053da <HAL_RCC_OscConfig+0x512>
 80053b4:	4b9d      	ldr	r3, [pc, #628]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80053b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b8:	4a9c      	ldr	r2, [pc, #624]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80053ba:	f023 0301 	bic.w	r3, r3, #1
 80053be:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c0:	4b9a      	ldr	r3, [pc, #616]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c4:	4a99      	ldr	r2, [pc, #612]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80053c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80053cc:	4b97      	ldr	r3, [pc, #604]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d0:	4a96      	ldr	r2, [pc, #600]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80053d2:	f023 0304 	bic.w	r3, r3, #4
 80053d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d8:	e03f      	b.n	800545a <HAL_RCC_OscConfig+0x592>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	2b05      	cmp	r3, #5
 80053e0:	d112      	bne.n	8005408 <HAL_RCC_OscConfig+0x540>
 80053e2:	4b92      	ldr	r3, [pc, #584]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80053e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e6:	4a91      	ldr	r2, [pc, #580]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80053e8:	f043 0304 	orr.w	r3, r3, #4
 80053ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ee:	4b8f      	ldr	r3, [pc, #572]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80053f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f2:	4a8e      	ldr	r2, [pc, #568]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80053f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053fa:	4b8c      	ldr	r3, [pc, #560]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fe:	4a8b      	ldr	r2, [pc, #556]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005400:	f043 0301 	orr.w	r3, r3, #1
 8005404:	6713      	str	r3, [r2, #112]	@ 0x70
 8005406:	e028      	b.n	800545a <HAL_RCC_OscConfig+0x592>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b85      	cmp	r3, #133	@ 0x85
 800540e:	d112      	bne.n	8005436 <HAL_RCC_OscConfig+0x56e>
 8005410:	4b86      	ldr	r3, [pc, #536]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005414:	4a85      	ldr	r2, [pc, #532]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005416:	f043 0304 	orr.w	r3, r3, #4
 800541a:	6713      	str	r3, [r2, #112]	@ 0x70
 800541c:	4b83      	ldr	r3, [pc, #524]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 800541e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005420:	4a82      	ldr	r2, [pc, #520]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005426:	6713      	str	r3, [r2, #112]	@ 0x70
 8005428:	4b80      	ldr	r3, [pc, #512]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 800542a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542c:	4a7f      	ldr	r2, [pc, #508]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	6713      	str	r3, [r2, #112]	@ 0x70
 8005434:	e011      	b.n	800545a <HAL_RCC_OscConfig+0x592>
 8005436:	4b7d      	ldr	r3, [pc, #500]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800543a:	4a7c      	ldr	r2, [pc, #496]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	6713      	str	r3, [r2, #112]	@ 0x70
 8005442:	4b7a      	ldr	r3, [pc, #488]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005446:	4a79      	ldr	r2, [pc, #484]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005448:	f023 0304 	bic.w	r3, r3, #4
 800544c:	6713      	str	r3, [r2, #112]	@ 0x70
 800544e:	4b77      	ldr	r3, [pc, #476]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005452:	4a76      	ldr	r2, [pc, #472]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005454:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005458:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d015      	beq.n	800548e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005462:	f7fb fef5 	bl	8001250 <HAL_GetTick>
 8005466:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005468:	e00a      	b.n	8005480 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546a:	f7fb fef1 	bl	8001250 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005478:	4293      	cmp	r3, r2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e14c      	b.n	800571a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005480:	4b6a      	ldr	r3, [pc, #424]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0ee      	beq.n	800546a <HAL_RCC_OscConfig+0x5a2>
 800548c:	e014      	b.n	80054b8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548e:	f7fb fedf 	bl	8001250 <HAL_GetTick>
 8005492:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005494:	e00a      	b.n	80054ac <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005496:	f7fb fedb 	bl	8001250 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e136      	b.n	800571a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054ac:	4b5f      	ldr	r3, [pc, #380]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80054ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1ee      	bne.n	8005496 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 812b 	beq.w	8005718 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80054c2:	4b5a      	ldr	r3, [pc, #360]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054ca:	2b18      	cmp	r3, #24
 80054cc:	f000 80bb 	beq.w	8005646 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	f040 8095 	bne.w	8005604 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054da:	4b54      	ldr	r3, [pc, #336]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a53      	ldr	r2, [pc, #332]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80054e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fb feb3 	bl	8001250 <HAL_GetTick>
 80054ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ee:	f7fb feaf 	bl	8001250 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e10c      	b.n	800571a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005500:	4b4a      	ldr	r3, [pc, #296]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f0      	bne.n	80054ee <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800550c:	4b47      	ldr	r3, [pc, #284]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 800550e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005510:	4b47      	ldr	r3, [pc, #284]	@ (8005630 <HAL_RCC_OscConfig+0x768>)
 8005512:	4013      	ands	r3, r2
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800551c:	0112      	lsls	r2, r2, #4
 800551e:	430a      	orrs	r2, r1
 8005520:	4942      	ldr	r1, [pc, #264]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005522:	4313      	orrs	r3, r2
 8005524:	628b      	str	r3, [r1, #40]	@ 0x28
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552a:	3b01      	subs	r3, #1
 800552c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005534:	3b01      	subs	r3, #1
 8005536:	025b      	lsls	r3, r3, #9
 8005538:	b29b      	uxth	r3, r3
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005540:	3b01      	subs	r3, #1
 8005542:	041b      	lsls	r3, r3, #16
 8005544:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554e:	3b01      	subs	r3, #1
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005556:	4935      	ldr	r1, [pc, #212]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005558:	4313      	orrs	r3, r2
 800555a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800555c:	4b33      	ldr	r3, [pc, #204]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	4a32      	ldr	r2, [pc, #200]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005568:	4b30      	ldr	r3, [pc, #192]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 800556a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800556c:	4b31      	ldr	r3, [pc, #196]	@ (8005634 <HAL_RCC_OscConfig+0x76c>)
 800556e:	4013      	ands	r3, r2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005574:	00d2      	lsls	r2, r2, #3
 8005576:	492d      	ldr	r1, [pc, #180]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005578:	4313      	orrs	r3, r2
 800557a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800557c:	4b2b      	ldr	r3, [pc, #172]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	f023 020c 	bic.w	r2, r3, #12
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005588:	4928      	ldr	r1, [pc, #160]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 800558a:	4313      	orrs	r3, r2
 800558c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800558e:	4b27      	ldr	r3, [pc, #156]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005592:	f023 0202 	bic.w	r2, r3, #2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559a:	4924      	ldr	r1, [pc, #144]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 800559c:	4313      	orrs	r3, r2
 800559e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055a0:	4b22      	ldr	r3, [pc, #136]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	4a21      	ldr	r2, [pc, #132]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80055a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ac:	4b1f      	ldr	r3, [pc, #124]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80055ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b0:	4a1e      	ldr	r2, [pc, #120]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80055b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80055b8:	4b1c      	ldr	r3, [pc, #112]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80055ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055bc:	4a1b      	ldr	r2, [pc, #108]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80055be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80055c4:	4b19      	ldr	r3, [pc, #100]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80055c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c8:	4a18      	ldr	r2, [pc, #96]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d0:	4b16      	ldr	r3, [pc, #88]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a15      	ldr	r2, [pc, #84]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80055d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7fb fe38 	bl	8001250 <HAL_GetTick>
 80055e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e4:	f7fb fe34 	bl	8001250 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e091      	b.n	800571a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055f6:	4b0d      	ldr	r3, [pc, #52]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCC_OscConfig+0x71c>
 8005602:	e089      	b.n	8005718 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005604:	4b09      	ldr	r3, [pc, #36]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a08      	ldr	r2, [pc, #32]	@ (800562c <HAL_RCC_OscConfig+0x764>)
 800560a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800560e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fb fe1e 	bl	8001250 <HAL_GetTick>
 8005614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005616:	e00f      	b.n	8005638 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005618:	f7fb fe1a 	bl	8001250 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d908      	bls.n	8005638 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e077      	b.n	800571a <HAL_RCC_OscConfig+0x852>
 800562a:	bf00      	nop
 800562c:	58024400 	.word	0x58024400
 8005630:	fffffc0c 	.word	0xfffffc0c
 8005634:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005638:	4b3a      	ldr	r3, [pc, #232]	@ (8005724 <HAL_RCC_OscConfig+0x85c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e9      	bne.n	8005618 <HAL_RCC_OscConfig+0x750>
 8005644:	e068      	b.n	8005718 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005646:	4b37      	ldr	r3, [pc, #220]	@ (8005724 <HAL_RCC_OscConfig+0x85c>)
 8005648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800564c:	4b35      	ldr	r3, [pc, #212]	@ (8005724 <HAL_RCC_OscConfig+0x85c>)
 800564e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005650:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005656:	2b01      	cmp	r3, #1
 8005658:	d031      	beq.n	80056be <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f003 0203 	and.w	r2, r3, #3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005664:	429a      	cmp	r2, r3
 8005666:	d12a      	bne.n	80056be <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d122      	bne.n	80056be <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005682:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005684:	429a      	cmp	r2, r3
 8005686:	d11a      	bne.n	80056be <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	0a5b      	lsrs	r3, r3, #9
 800568c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005694:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005696:	429a      	cmp	r2, r3
 8005698:	d111      	bne.n	80056be <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d108      	bne.n	80056be <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	0e1b      	lsrs	r3, r3, #24
 80056b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d001      	beq.n	80056c2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e02b      	b.n	800571a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80056c2:	4b18      	ldr	r3, [pc, #96]	@ (8005724 <HAL_RCC_OscConfig+0x85c>)
 80056c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c6:	08db      	lsrs	r3, r3, #3
 80056c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056cc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d01f      	beq.n	8005718 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80056d8:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <HAL_RCC_OscConfig+0x85c>)
 80056da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056dc:	4a11      	ldr	r2, [pc, #68]	@ (8005724 <HAL_RCC_OscConfig+0x85c>)
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056e4:	f7fb fdb4 	bl	8001250 <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80056ea:	bf00      	nop
 80056ec:	f7fb fdb0 	bl	8001250 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d0f9      	beq.n	80056ec <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005724 <HAL_RCC_OscConfig+0x85c>)
 80056fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <HAL_RCC_OscConfig+0x860>)
 80056fe:	4013      	ands	r3, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005704:	00d2      	lsls	r2, r2, #3
 8005706:	4907      	ldr	r1, [pc, #28]	@ (8005724 <HAL_RCC_OscConfig+0x85c>)
 8005708:	4313      	orrs	r3, r2
 800570a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800570c:	4b05      	ldr	r3, [pc, #20]	@ (8005724 <HAL_RCC_OscConfig+0x85c>)
 800570e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005710:	4a04      	ldr	r2, [pc, #16]	@ (8005724 <HAL_RCC_OscConfig+0x85c>)
 8005712:	f043 0301 	orr.w	r3, r3, #1
 8005716:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3730      	adds	r7, #48	@ 0x30
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	58024400 	.word	0x58024400
 8005728:	ffff0007 	.word	0xffff0007

0800572c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e19c      	b.n	8005a7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005740:	4b8a      	ldr	r3, [pc, #552]	@ (800596c <HAL_RCC_ClockConfig+0x240>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d910      	bls.n	8005770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574e:	4b87      	ldr	r3, [pc, #540]	@ (800596c <HAL_RCC_ClockConfig+0x240>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f023 020f 	bic.w	r2, r3, #15
 8005756:	4985      	ldr	r1, [pc, #532]	@ (800596c <HAL_RCC_ClockConfig+0x240>)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	4313      	orrs	r3, r2
 800575c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800575e:	4b83      	ldr	r3, [pc, #524]	@ (800596c <HAL_RCC_ClockConfig+0x240>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d001      	beq.n	8005770 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e184      	b.n	8005a7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	4b7b      	ldr	r3, [pc, #492]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005788:	429a      	cmp	r2, r3
 800578a:	d908      	bls.n	800579e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800578c:	4b78      	ldr	r3, [pc, #480]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	4975      	ldr	r1, [pc, #468]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 800579a:	4313      	orrs	r3, r2
 800579c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d010      	beq.n	80057cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695a      	ldr	r2, [r3, #20]
 80057ae:	4b70      	ldr	r3, [pc, #448]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d908      	bls.n	80057cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	496a      	ldr	r1, [pc, #424]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d010      	beq.n	80057fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699a      	ldr	r2, [r3, #24]
 80057dc:	4b64      	ldr	r3, [pc, #400]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d908      	bls.n	80057fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057e8:	4b61      	ldr	r3, [pc, #388]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	495e      	ldr	r1, [pc, #376]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d010      	beq.n	8005828 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69da      	ldr	r2, [r3, #28]
 800580a:	4b59      	ldr	r3, [pc, #356]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005812:	429a      	cmp	r2, r3
 8005814:	d908      	bls.n	8005828 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005816:	4b56      	ldr	r3, [pc, #344]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	4953      	ldr	r1, [pc, #332]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 8005824:	4313      	orrs	r3, r2
 8005826:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d010      	beq.n	8005856 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	4b4d      	ldr	r3, [pc, #308]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	429a      	cmp	r2, r3
 8005842:	d908      	bls.n	8005856 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005844:	4b4a      	ldr	r3, [pc, #296]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f023 020f 	bic.w	r2, r3, #15
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	4947      	ldr	r1, [pc, #284]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 8005852:	4313      	orrs	r3, r2
 8005854:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d055      	beq.n	800590e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005862:	4b43      	ldr	r3, [pc, #268]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	4940      	ldr	r1, [pc, #256]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 8005870:	4313      	orrs	r3, r2
 8005872:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b02      	cmp	r3, #2
 800587a:	d107      	bne.n	800588c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800587c:	4b3c      	ldr	r3, [pc, #240]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d121      	bne.n	80058cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e0f6      	b.n	8005a7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b03      	cmp	r3, #3
 8005892:	d107      	bne.n	80058a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005894:	4b36      	ldr	r3, [pc, #216]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d115      	bne.n	80058cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0ea      	b.n	8005a7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d107      	bne.n	80058bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058ac:	4b30      	ldr	r3, [pc, #192]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0de      	b.n	8005a7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0d6      	b.n	8005a7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058cc:	4b28      	ldr	r3, [pc, #160]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f023 0207 	bic.w	r2, r3, #7
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	4925      	ldr	r1, [pc, #148]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058de:	f7fb fcb7 	bl	8001250 <HAL_GetTick>
 80058e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e6:	f7fb fcb3 	bl	8001250 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e0be      	b.n	8005a7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	429a      	cmp	r2, r3
 800590c:	d1eb      	bne.n	80058e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d010      	beq.n	800593c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	4b14      	ldr	r3, [pc, #80]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	429a      	cmp	r2, r3
 8005928:	d208      	bcs.n	800593c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800592a:	4b11      	ldr	r3, [pc, #68]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f023 020f 	bic.w	r2, r3, #15
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	490e      	ldr	r1, [pc, #56]	@ (8005970 <HAL_RCC_ClockConfig+0x244>)
 8005938:	4313      	orrs	r3, r2
 800593a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800593c:	4b0b      	ldr	r3, [pc, #44]	@ (800596c <HAL_RCC_ClockConfig+0x240>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d214      	bcs.n	8005974 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594a:	4b08      	ldr	r3, [pc, #32]	@ (800596c <HAL_RCC_ClockConfig+0x240>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f023 020f 	bic.w	r2, r3, #15
 8005952:	4906      	ldr	r1, [pc, #24]	@ (800596c <HAL_RCC_ClockConfig+0x240>)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	4313      	orrs	r3, r2
 8005958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800595a:	4b04      	ldr	r3, [pc, #16]	@ (800596c <HAL_RCC_ClockConfig+0x240>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d005      	beq.n	8005974 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e086      	b.n	8005a7a <HAL_RCC_ClockConfig+0x34e>
 800596c:	52002000 	.word	0x52002000
 8005970:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d010      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	4b3f      	ldr	r3, [pc, #252]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800598c:	429a      	cmp	r2, r3
 800598e:	d208      	bcs.n	80059a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005990:	4b3c      	ldr	r3, [pc, #240]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	4939      	ldr	r1, [pc, #228]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d010      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	4b34      	ldr	r3, [pc, #208]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d208      	bcs.n	80059d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059be:	4b31      	ldr	r3, [pc, #196]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	492e      	ldr	r1, [pc, #184]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d010      	beq.n	80059fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699a      	ldr	r2, [r3, #24]
 80059e0:	4b28      	ldr	r3, [pc, #160]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d208      	bcs.n	80059fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059ec:	4b25      	ldr	r3, [pc, #148]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	4922      	ldr	r1, [pc, #136]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d010      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69da      	ldr	r2, [r3, #28]
 8005a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d208      	bcs.n	8005a2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	4917      	ldr	r1, [pc, #92]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005a2c:	f000 f89e 	bl	8005b6c <HAL_RCC_GetSysClockFreq>
 8005a30:	4602      	mov	r2, r0
 8005a32:	4b14      	ldr	r3, [pc, #80]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	0a1b      	lsrs	r3, r3, #8
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	4912      	ldr	r1, [pc, #72]	@ (8005a88 <HAL_RCC_ClockConfig+0x35c>)
 8005a3e:	5ccb      	ldrb	r3, [r1, r3]
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	fa22 f303 	lsr.w	r3, r2, r3
 8005a48:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8005a84 <HAL_RCC_ClockConfig+0x358>)
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	4a0d      	ldr	r2, [pc, #52]	@ (8005a88 <HAL_RCC_ClockConfig+0x35c>)
 8005a54:	5cd3      	ldrb	r3, [r2, r3]
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a60:	4a0a      	ldr	r2, [pc, #40]	@ (8005a8c <HAL_RCC_ClockConfig+0x360>)
 8005a62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a64:	4a0a      	ldr	r2, [pc, #40]	@ (8005a90 <HAL_RCC_ClockConfig+0x364>)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a94 <HAL_RCC_ClockConfig+0x368>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fb fba4 	bl	80011bc <HAL_InitTick>
 8005a74:	4603      	mov	r3, r0
 8005a76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	58024400 	.word	0x58024400
 8005a88:	0800ba78 	.word	0x0800ba78
 8005a8c:	24002bc4 	.word	0x24002bc4
 8005a90:	24002bc0 	.word	0x24002bc0
 8005a94:	24002bc8 	.word	0x24002bc8

08005a98 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08c      	sub	sp, #48	@ 0x30
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d12a      	bne.n	8005b00 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8005b60 <HAL_RCC_MCOConfig+0xc8>)
 8005aac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005ab0:	4a2b      	ldr	r2, [pc, #172]	@ (8005b60 <HAL_RCC_MCOConfig+0xc8>)
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005aba:	4b29      	ldr	r3, [pc, #164]	@ (8005b60 <HAL_RCC_MCOConfig+0xc8>)
 8005abc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005ada:	2300      	movs	r3, #0
 8005adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005ade:	f107 031c 	add.w	r3, r7, #28
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	481f      	ldr	r0, [pc, #124]	@ (8005b64 <HAL_RCC_MCOConfig+0xcc>)
 8005ae6:	f7fe fedb 	bl	80048a0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005aea:	4b1d      	ldr	r3, [pc, #116]	@ (8005b60 <HAL_RCC_MCOConfig+0xc8>)
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	430b      	orrs	r3, r1
 8005af8:	4919      	ldr	r1, [pc, #100]	@ (8005b60 <HAL_RCC_MCOConfig+0xc8>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005afe:	e02a      	b.n	8005b56 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005b00:	4b17      	ldr	r3, [pc, #92]	@ (8005b60 <HAL_RCC_MCOConfig+0xc8>)
 8005b02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005b06:	4a16      	ldr	r2, [pc, #88]	@ (8005b60 <HAL_RCC_MCOConfig+0xc8>)
 8005b08:	f043 0304 	orr.w	r3, r3, #4
 8005b0c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005b10:	4b13      	ldr	r3, [pc, #76]	@ (8005b60 <HAL_RCC_MCOConfig+0xc8>)
 8005b12:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005b1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b24:	2302      	movs	r3, #2
 8005b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b30:	2300      	movs	r3, #0
 8005b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005b34:	f107 031c 	add.w	r3, r7, #28
 8005b38:	4619      	mov	r1, r3
 8005b3a:	480b      	ldr	r0, [pc, #44]	@ (8005b68 <HAL_RCC_MCOConfig+0xd0>)
 8005b3c:	f7fe feb0 	bl	80048a0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005b40:	4b07      	ldr	r3, [pc, #28]	@ (8005b60 <HAL_RCC_MCOConfig+0xc8>)
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	01d9      	lsls	r1, r3, #7
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	4903      	ldr	r1, [pc, #12]	@ (8005b60 <HAL_RCC_MCOConfig+0xc8>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	610b      	str	r3, [r1, #16]
}
 8005b56:	bf00      	nop
 8005b58:	3730      	adds	r7, #48	@ 0x30
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	58024400 	.word	0x58024400
 8005b64:	58020000 	.word	0x58020000
 8005b68:	58020800 	.word	0x58020800

08005b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b089      	sub	sp, #36	@ 0x24
 8005b70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b72:	4bb3      	ldr	r3, [pc, #716]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b7a:	2b18      	cmp	r3, #24
 8005b7c:	f200 8155 	bhi.w	8005e2a <HAL_RCC_GetSysClockFreq+0x2be>
 8005b80:	a201      	add	r2, pc, #4	@ (adr r2, 8005b88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005bed 	.word	0x08005bed
 8005b8c:	08005e2b 	.word	0x08005e2b
 8005b90:	08005e2b 	.word	0x08005e2b
 8005b94:	08005e2b 	.word	0x08005e2b
 8005b98:	08005e2b 	.word	0x08005e2b
 8005b9c:	08005e2b 	.word	0x08005e2b
 8005ba0:	08005e2b 	.word	0x08005e2b
 8005ba4:	08005e2b 	.word	0x08005e2b
 8005ba8:	08005c13 	.word	0x08005c13
 8005bac:	08005e2b 	.word	0x08005e2b
 8005bb0:	08005e2b 	.word	0x08005e2b
 8005bb4:	08005e2b 	.word	0x08005e2b
 8005bb8:	08005e2b 	.word	0x08005e2b
 8005bbc:	08005e2b 	.word	0x08005e2b
 8005bc0:	08005e2b 	.word	0x08005e2b
 8005bc4:	08005e2b 	.word	0x08005e2b
 8005bc8:	08005c19 	.word	0x08005c19
 8005bcc:	08005e2b 	.word	0x08005e2b
 8005bd0:	08005e2b 	.word	0x08005e2b
 8005bd4:	08005e2b 	.word	0x08005e2b
 8005bd8:	08005e2b 	.word	0x08005e2b
 8005bdc:	08005e2b 	.word	0x08005e2b
 8005be0:	08005e2b 	.word	0x08005e2b
 8005be4:	08005e2b 	.word	0x08005e2b
 8005be8:	08005c1f 	.word	0x08005c1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bec:	4b94      	ldr	r3, [pc, #592]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d009      	beq.n	8005c0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bf8:	4b91      	ldr	r3, [pc, #580]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	08db      	lsrs	r3, r3, #3
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	4a90      	ldr	r2, [pc, #576]	@ (8005e44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c04:	fa22 f303 	lsr.w	r3, r2, r3
 8005c08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c0a:	e111      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c0c:	4b8d      	ldr	r3, [pc, #564]	@ (8005e44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c0e:	61bb      	str	r3, [r7, #24]
      break;
 8005c10:	e10e      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c12:	4b8d      	ldr	r3, [pc, #564]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c14:	61bb      	str	r3, [r7, #24]
      break;
 8005c16:	e10b      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005c18:	4b8c      	ldr	r3, [pc, #560]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c1a:	61bb      	str	r3, [r7, #24]
      break;
 8005c1c:	e108      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c1e:	4b88      	ldr	r3, [pc, #544]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c28:	4b85      	ldr	r3, [pc, #532]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2c:	091b      	lsrs	r3, r3, #4
 8005c2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c34:	4b82      	ldr	r3, [pc, #520]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c3e:	4b80      	ldr	r3, [pc, #512]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c42:	08db      	lsrs	r3, r3, #3
 8005c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	fb02 f303 	mul.w	r3, r2, r3
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80e1 	beq.w	8005e24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	f000 8083 	beq.w	8005d70 <HAL_RCC_GetSysClockFreq+0x204>
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	f200 80a1 	bhi.w	8005db4 <HAL_RCC_GetSysClockFreq+0x248>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_RCC_GetSysClockFreq+0x114>
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d056      	beq.n	8005d2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005c7e:	e099      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c80:	4b6f      	ldr	r3, [pc, #444]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d02d      	beq.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	08db      	lsrs	r3, r3, #3
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	4a6b      	ldr	r2, [pc, #428]	@ (8005e44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	ee07 3a90 	vmov	s15, r3
 8005ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb6:	4b62      	ldr	r3, [pc, #392]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005ce6:	e087      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005e54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfa:	4b51      	ldr	r3, [pc, #324]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d2a:	e065      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005e58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3e:	4b40      	ldr	r3, [pc, #256]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d6e:	e043      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005e5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d82:	4b2f      	ldr	r3, [pc, #188]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005db2:	e021      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dbe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005e58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dda:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005df6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005df8:	4b11      	ldr	r3, [pc, #68]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfc:	0a5b      	lsrs	r3, r3, #9
 8005dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e02:	3301      	adds	r3, #1
 8005e04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1c:	ee17 3a90 	vmov	r3, s15
 8005e20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005e22:	e005      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61bb      	str	r3, [r7, #24]
      break;
 8005e28:	e002      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e2a:	4b07      	ldr	r3, [pc, #28]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e2c:	61bb      	str	r3, [r7, #24]
      break;
 8005e2e:	bf00      	nop
  }

  return sysclockfreq;
 8005e30:	69bb      	ldr	r3, [r7, #24]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3724      	adds	r7, #36	@ 0x24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	58024400 	.word	0x58024400
 8005e44:	03d09000 	.word	0x03d09000
 8005e48:	003d0900 	.word	0x003d0900
 8005e4c:	007a1200 	.word	0x007a1200
 8005e50:	46000000 	.word	0x46000000
 8005e54:	4c742400 	.word	0x4c742400
 8005e58:	4a742400 	.word	0x4a742400
 8005e5c:	4af42400 	.word	0x4af42400

08005e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005e66:	f7ff fe81 	bl	8005b6c <HAL_RCC_GetSysClockFreq>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	4b10      	ldr	r3, [pc, #64]	@ (8005eb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	0a1b      	lsrs	r3, r3, #8
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	490f      	ldr	r1, [pc, #60]	@ (8005eb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005e78:	5ccb      	ldrb	r3, [r1, r3]
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e82:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005e84:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	4a09      	ldr	r2, [pc, #36]	@ (8005eb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005e8e:	5cd3      	ldrb	r3, [r2, r3]
 8005e90:	f003 031f 	and.w	r3, r3, #31
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9a:	4a07      	ldr	r2, [pc, #28]	@ (8005eb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e9e:	4a07      	ldr	r2, [pc, #28]	@ (8005ebc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ea4:	4b04      	ldr	r3, [pc, #16]	@ (8005eb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	58024400 	.word	0x58024400
 8005eb4:	0800ba78 	.word	0x0800ba78
 8005eb8:	24002bc4 	.word	0x24002bc4
 8005ebc:	24002bc0 	.word	0x24002bc0

08005ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005ec4:	f7ff ffcc 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	091b      	lsrs	r3, r3, #4
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	4904      	ldr	r1, [pc, #16]	@ (8005ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ed6:	5ccb      	ldrb	r3, [r1, r3]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	0800ba78 	.word	0x0800ba78

08005eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005ef0:	f7ff ffb6 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	4b06      	ldr	r3, [pc, #24]	@ (8005f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	0a1b      	lsrs	r3, r3, #8
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	4904      	ldr	r1, [pc, #16]	@ (8005f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f02:	5ccb      	ldrb	r3, [r1, r3]
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	58024400 	.word	0x58024400
 8005f14:	0800ba78 	.word	0x0800ba78

08005f18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f1c:	b0c8      	sub	sp, #288	@ 0x120
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f24:	2300      	movs	r3, #0
 8005f26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005f3c:	2500      	movs	r5, #0
 8005f3e:	ea54 0305 	orrs.w	r3, r4, r5
 8005f42:	d049      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f4e:	d02f      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005f50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f54:	d828      	bhi.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f5a:	d01a      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f60:	d822      	bhi.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f6a:	d007      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f6c:	e01c      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f6e:	4ba7      	ldr	r3, [pc, #668]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	4aa6      	ldr	r2, [pc, #664]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f7a:	e01a      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f80:	3308      	adds	r3, #8
 8005f82:	2102      	movs	r1, #2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f001 fc99 	bl	80078bc <RCCEx_PLL2_Config>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f90:	e00f      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f96:	3328      	adds	r3, #40	@ 0x28
 8005f98:	2102      	movs	r1, #2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 fd40 	bl	8007a20 <RCCEx_PLL3_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005fa6:	e004      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005fae:	e000      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005fba:	4b94      	ldr	r3, [pc, #592]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fbe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fc8:	4a90      	ldr	r2, [pc, #576]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fce:	e003      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005fe4:	f04f 0900 	mov.w	r9, #0
 8005fe8:	ea58 0309 	orrs.w	r3, r8, r9
 8005fec:	d047      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d82a      	bhi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8006000 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffe:	bf00      	nop
 8006000:	08006015 	.word	0x08006015
 8006004:	08006023 	.word	0x08006023
 8006008:	08006039 	.word	0x08006039
 800600c:	08006057 	.word	0x08006057
 8006010:	08006057 	.word	0x08006057
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006014:	4b7d      	ldr	r3, [pc, #500]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006018:	4a7c      	ldr	r2, [pc, #496]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800601a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800601e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006020:	e01a      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006026:	3308      	adds	r3, #8
 8006028:	2100      	movs	r1, #0
 800602a:	4618      	mov	r0, r3
 800602c:	f001 fc46 	bl	80078bc <RCCEx_PLL2_Config>
 8006030:	4603      	mov	r3, r0
 8006032:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006036:	e00f      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800603c:	3328      	adds	r3, #40	@ 0x28
 800603e:	2100      	movs	r1, #0
 8006040:	4618      	mov	r0, r3
 8006042:	f001 fced 	bl	8007a20 <RCCEx_PLL3_Config>
 8006046:	4603      	mov	r3, r0
 8006048:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800604c:	e004      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006054:	e000      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006058:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006060:	4b6a      	ldr	r3, [pc, #424]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006064:	f023 0107 	bic.w	r1, r3, #7
 8006068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800606c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606e:	4a67      	ldr	r2, [pc, #412]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006070:	430b      	orrs	r3, r1
 8006072:	6513      	str	r3, [r2, #80]	@ 0x50
 8006074:	e003      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006076:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800607a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800607e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800608a:	f04f 0b00 	mov.w	fp, #0
 800608e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006092:	d054      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800609a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800609e:	d036      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80060a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80060a4:	d82f      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060aa:	d032      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80060ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b0:	d829      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80060b4:	d02f      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80060b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80060b8:	d825      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060ba:	2b80      	cmp	r3, #128	@ 0x80
 80060bc:	d018      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80060be:	2b80      	cmp	r3, #128	@ 0x80
 80060c0:	d821      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80060c6:	2b40      	cmp	r3, #64	@ 0x40
 80060c8:	d007      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80060ca:	e01c      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060cc:	4b4f      	ldr	r3, [pc, #316]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	4a4e      	ldr	r2, [pc, #312]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80060d8:	e01e      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060de:	3308      	adds	r3, #8
 80060e0:	2100      	movs	r1, #0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 fbea 	bl	80078bc <RCCEx_PLL2_Config>
 80060e8:	4603      	mov	r3, r0
 80060ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80060ee:	e013      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060f4:	3328      	adds	r3, #40	@ 0x28
 80060f6:	2100      	movs	r1, #0
 80060f8:	4618      	mov	r0, r3
 80060fa:	f001 fc91 	bl	8007a20 <RCCEx_PLL3_Config>
 80060fe:	4603      	mov	r3, r0
 8006100:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006104:	e008      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800610c:	e004      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800610e:	bf00      	nop
 8006110:	e002      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006112:	bf00      	nop
 8006114:	e000      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006118:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10a      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006120:	4b3a      	ldr	r3, [pc, #232]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006124:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800612c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800612e:	4a37      	ldr	r2, [pc, #220]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006130:	430b      	orrs	r3, r1
 8006132:	6513      	str	r3, [r2, #80]	@ 0x50
 8006134:	e003      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006136:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800613a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800613e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800614a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800614e:	2300      	movs	r3, #0
 8006150:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006154:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006158:	460b      	mov	r3, r1
 800615a:	4313      	orrs	r3, r2
 800615c:	d05c      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800615e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006164:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006168:	d03b      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800616a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800616e:	d834      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006174:	d037      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006176:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800617a:	d82e      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800617c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006180:	d033      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006182:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006186:	d828      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800618c:	d01a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800618e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006192:	d822      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800619c:	d007      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x296>
 800619e:	e01c      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a0:	4b1a      	ldr	r3, [pc, #104]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	4a19      	ldr	r2, [pc, #100]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80061ac:	e01e      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061b2:	3308      	adds	r3, #8
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 fb80 	bl	80078bc <RCCEx_PLL2_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80061c2:	e013      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061c8:	3328      	adds	r3, #40	@ 0x28
 80061ca:	2100      	movs	r1, #0
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 fc27 	bl	8007a20 <RCCEx_PLL3_Config>
 80061d2:	4603      	mov	r3, r0
 80061d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80061d8:	e008      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80061e0:	e004      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80061e2:	bf00      	nop
 80061e4:	e002      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80061e6:	bf00      	nop
 80061e8:	e000      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80061ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10d      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80061f4:	4b05      	ldr	r3, [pc, #20]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80061fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006202:	4a02      	ldr	r2, [pc, #8]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006204:	430b      	orrs	r3, r1
 8006206:	6513      	str	r3, [r2, #80]	@ 0x50
 8006208:	e006      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800620a:	bf00      	nop
 800620c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006210:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006214:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006224:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006228:	2300      	movs	r3, #0
 800622a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800622e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006232:	460b      	mov	r3, r1
 8006234:	4313      	orrs	r3, r2
 8006236:	d03a      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800623c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800623e:	2b30      	cmp	r3, #48	@ 0x30
 8006240:	d01f      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006242:	2b30      	cmp	r3, #48	@ 0x30
 8006244:	d819      	bhi.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006246:	2b20      	cmp	r3, #32
 8006248:	d00c      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800624a:	2b20      	cmp	r3, #32
 800624c:	d815      	bhi.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d019      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006252:	2b10      	cmp	r3, #16
 8006254:	d111      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006256:	4bae      	ldr	r3, [pc, #696]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	4aad      	ldr	r2, [pc, #692]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800625c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006260:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006262:	e011      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006268:	3308      	adds	r3, #8
 800626a:	2102      	movs	r1, #2
 800626c:	4618      	mov	r0, r3
 800626e:	f001 fb25 	bl	80078bc <RCCEx_PLL2_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006278:	e006      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006280:	e002      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006282:	bf00      	nop
 8006284:	e000      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006288:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006290:	4b9f      	ldr	r3, [pc, #636]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006294:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800629c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800629e:	4a9c      	ldr	r2, [pc, #624]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062a0:	430b      	orrs	r3, r1
 80062a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062a4:	e003      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80062ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80062ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062be:	2300      	movs	r3, #0
 80062c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80062c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4313      	orrs	r3, r2
 80062cc:	d051      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80062ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062d8:	d035      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80062da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062de:	d82e      	bhi.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80062e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062e4:	d031      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80062e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062ea:	d828      	bhi.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80062ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062f0:	d01a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80062f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062f6:	d822      	bhi.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80062fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006300:	d007      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006302:	e01c      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006304:	4b82      	ldr	r3, [pc, #520]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006308:	4a81      	ldr	r2, [pc, #516]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800630a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800630e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006310:	e01c      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006316:	3308      	adds	r3, #8
 8006318:	2100      	movs	r1, #0
 800631a:	4618      	mov	r0, r3
 800631c:	f001 face 	bl	80078bc <RCCEx_PLL2_Config>
 8006320:	4603      	mov	r3, r0
 8006322:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006326:	e011      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800632c:	3328      	adds	r3, #40	@ 0x28
 800632e:	2100      	movs	r1, #0
 8006330:	4618      	mov	r0, r3
 8006332:	f001 fb75 	bl	8007a20 <RCCEx_PLL3_Config>
 8006336:	4603      	mov	r3, r0
 8006338:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800633c:	e006      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006344:	e002      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006346:	bf00      	nop
 8006348:	e000      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800634a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006354:	4b6e      	ldr	r3, [pc, #440]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006358:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800635c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006362:	4a6b      	ldr	r2, [pc, #428]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006364:	430b      	orrs	r3, r1
 8006366:	6513      	str	r3, [r2, #80]	@ 0x50
 8006368:	e003      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800636e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800637e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006382:	2300      	movs	r3, #0
 8006384:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006388:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800638c:	460b      	mov	r3, r1
 800638e:	4313      	orrs	r3, r2
 8006390:	d053      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006396:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800639c:	d033      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800639e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063a2:	d82c      	bhi.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063a8:	d02f      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80063aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063ae:	d826      	bhi.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063b4:	d02b      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80063b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063ba:	d820      	bhi.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063c0:	d012      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80063c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063c6:	d81a      	bhi.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d022      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80063cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d0:	d115      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063d6:	3308      	adds	r3, #8
 80063d8:	2101      	movs	r1, #1
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 fa6e 	bl	80078bc <RCCEx_PLL2_Config>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063e6:	e015      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063ec:	3328      	adds	r3, #40	@ 0x28
 80063ee:	2101      	movs	r1, #1
 80063f0:	4618      	mov	r0, r3
 80063f2:	f001 fb15 	bl	8007a20 <RCCEx_PLL3_Config>
 80063f6:	4603      	mov	r3, r0
 80063f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063fc:	e00a      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006404:	e006      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006406:	bf00      	nop
 8006408:	e004      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800640a:	bf00      	nop
 800640c:	e002      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800640e:	bf00      	nop
 8006410:	e000      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006414:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10a      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800641c:	4b3c      	ldr	r3, [pc, #240]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800641e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006420:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800642a:	4a39      	ldr	r2, [pc, #228]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800642c:	430b      	orrs	r3, r1
 800642e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006430:	e003      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006432:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006436:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800643a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006446:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800644a:	2300      	movs	r3, #0
 800644c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006450:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006454:	460b      	mov	r3, r1
 8006456:	4313      	orrs	r3, r2
 8006458:	d060      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800645a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800645e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006462:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006466:	d039      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006468:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800646c:	d832      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800646e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006472:	d035      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006474:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006478:	d82c      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800647a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800647e:	d031      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006484:	d826      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006486:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800648a:	d02d      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800648c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006490:	d820      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006496:	d012      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800649c:	d81a      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d024      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80064a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064a6:	d115      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ac:	3308      	adds	r3, #8
 80064ae:	2101      	movs	r1, #1
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 fa03 	bl	80078bc <RCCEx_PLL2_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064bc:	e017      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064c2:	3328      	adds	r3, #40	@ 0x28
 80064c4:	2101      	movs	r1, #1
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 faaa 	bl	8007a20 <RCCEx_PLL3_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064d2:	e00c      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064da:	e008      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064dc:	bf00      	nop
 80064de:	e006      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064e0:	bf00      	nop
 80064e2:	e004      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064e4:	bf00      	nop
 80064e6:	e002      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064e8:	bf00      	nop
 80064ea:	e000      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10e      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064f6:	4b06      	ldr	r3, [pc, #24]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80064fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006502:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006506:	4a02      	ldr	r2, [pc, #8]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006508:	430b      	orrs	r3, r1
 800650a:	6593      	str	r3, [r2, #88]	@ 0x58
 800650c:	e006      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800650e:	bf00      	nop
 8006510:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006514:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006518:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800651c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006528:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800652c:	2300      	movs	r3, #0
 800652e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006536:	460b      	mov	r3, r1
 8006538:	4313      	orrs	r3, r2
 800653a:	d037      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800653c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006546:	d00e      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800654c:	d816      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d018      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006552:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006556:	d111      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006558:	4bc4      	ldr	r3, [pc, #784]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800655a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655c:	4ac3      	ldr	r2, [pc, #780]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800655e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006564:	e00f      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800656a:	3308      	adds	r3, #8
 800656c:	2101      	movs	r1, #1
 800656e:	4618      	mov	r0, r3
 8006570:	f001 f9a4 	bl	80078bc <RCCEx_PLL2_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800657a:	e004      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006582:	e000      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006586:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800658e:	4bb7      	ldr	r3, [pc, #732]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006592:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006596:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800659a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800659c:	4ab3      	ldr	r2, [pc, #716]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800659e:	430b      	orrs	r3, r1
 80065a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80065a2:	e003      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80065b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065bc:	2300      	movs	r3, #0
 80065be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4313      	orrs	r3, r2
 80065ca:	d039      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80065cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d81c      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80065d6:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	08006619 	.word	0x08006619
 80065e0:	080065ed 	.word	0x080065ed
 80065e4:	080065fb 	.word	0x080065fb
 80065e8:	08006619 	.word	0x08006619
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ec:	4b9f      	ldr	r3, [pc, #636]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	4a9e      	ldr	r2, [pc, #632]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065f8:	e00f      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065fe:	3308      	adds	r3, #8
 8006600:	2102      	movs	r1, #2
 8006602:	4618      	mov	r0, r3
 8006604:	f001 f95a 	bl	80078bc <RCCEx_PLL2_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800660e:	e004      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006616:	e000      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006622:	4b92      	ldr	r3, [pc, #584]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006626:	f023 0103 	bic.w	r1, r3, #3
 800662a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800662e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006630:	4a8e      	ldr	r2, [pc, #568]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006632:	430b      	orrs	r3, r1
 8006634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006636:	e003      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006638:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800663c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800664c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006650:	2300      	movs	r3, #0
 8006652:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006656:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800665a:	460b      	mov	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	f000 8099 	beq.w	8006794 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006662:	4b83      	ldr	r3, [pc, #524]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a82      	ldr	r2, [pc, #520]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800666c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800666e:	f7fa fdef 	bl	8001250 <HAL_GetTick>
 8006672:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006676:	e00b      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006678:	f7fa fdea 	bl	8001250 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b64      	cmp	r3, #100	@ 0x64
 8006686:	d903      	bls.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800668e:	e005      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006690:	4b77      	ldr	r3, [pc, #476]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0ed      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800669c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d173      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066a4:	4b71      	ldr	r3, [pc, #452]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066b0:	4053      	eors	r3, r2
 80066b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d015      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066ba:	4b6c      	ldr	r3, [pc, #432]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066c6:	4b69      	ldr	r3, [pc, #420]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ca:	4a68      	ldr	r2, [pc, #416]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066d2:	4b66      	ldr	r3, [pc, #408]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d6:	4a65      	ldr	r2, [pc, #404]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066de:	4a63      	ldr	r2, [pc, #396]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066f2:	d118      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f4:	f7fa fdac 	bl	8001250 <HAL_GetTick>
 80066f8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066fc:	e00d      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066fe:	f7fa fda7 	bl	8001250 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006708:	1ad2      	subs	r2, r2, r3
 800670a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800670e:	429a      	cmp	r2, r3
 8006710:	d903      	bls.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006718:	e005      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800671a:	4b54      	ldr	r3, [pc, #336]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800671c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0eb      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006726:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800672a:	2b00      	cmp	r3, #0
 800672c:	d129      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800672e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006732:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800673a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800673e:	d10e      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006740:	4b4a      	ldr	r3, [pc, #296]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006748:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800674c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006750:	091a      	lsrs	r2, r3, #4
 8006752:	4b48      	ldr	r3, [pc, #288]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006754:	4013      	ands	r3, r2
 8006756:	4a45      	ldr	r2, [pc, #276]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006758:	430b      	orrs	r3, r1
 800675a:	6113      	str	r3, [r2, #16]
 800675c:	e005      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800675e:	4b43      	ldr	r3, [pc, #268]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	4a42      	ldr	r2, [pc, #264]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006764:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006768:	6113      	str	r3, [r2, #16]
 800676a:	4b40      	ldr	r3, [pc, #256]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800676c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800676e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006772:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800677a:	4a3c      	ldr	r2, [pc, #240]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800677c:	430b      	orrs	r3, r1
 800677e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006780:	e008      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006782:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006786:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800678a:	e003      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006790:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f002 0301 	and.w	r3, r2, #1
 80067a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067a4:	2300      	movs	r3, #0
 80067a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f000 8090 	beq.w	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80067b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067be:	2b28      	cmp	r3, #40	@ 0x28
 80067c0:	d870      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80067c2:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080068ad 	.word	0x080068ad
 80067cc:	080068a5 	.word	0x080068a5
 80067d0:	080068a5 	.word	0x080068a5
 80067d4:	080068a5 	.word	0x080068a5
 80067d8:	080068a5 	.word	0x080068a5
 80067dc:	080068a5 	.word	0x080068a5
 80067e0:	080068a5 	.word	0x080068a5
 80067e4:	080068a5 	.word	0x080068a5
 80067e8:	08006879 	.word	0x08006879
 80067ec:	080068a5 	.word	0x080068a5
 80067f0:	080068a5 	.word	0x080068a5
 80067f4:	080068a5 	.word	0x080068a5
 80067f8:	080068a5 	.word	0x080068a5
 80067fc:	080068a5 	.word	0x080068a5
 8006800:	080068a5 	.word	0x080068a5
 8006804:	080068a5 	.word	0x080068a5
 8006808:	0800688f 	.word	0x0800688f
 800680c:	080068a5 	.word	0x080068a5
 8006810:	080068a5 	.word	0x080068a5
 8006814:	080068a5 	.word	0x080068a5
 8006818:	080068a5 	.word	0x080068a5
 800681c:	080068a5 	.word	0x080068a5
 8006820:	080068a5 	.word	0x080068a5
 8006824:	080068a5 	.word	0x080068a5
 8006828:	080068ad 	.word	0x080068ad
 800682c:	080068a5 	.word	0x080068a5
 8006830:	080068a5 	.word	0x080068a5
 8006834:	080068a5 	.word	0x080068a5
 8006838:	080068a5 	.word	0x080068a5
 800683c:	080068a5 	.word	0x080068a5
 8006840:	080068a5 	.word	0x080068a5
 8006844:	080068a5 	.word	0x080068a5
 8006848:	080068ad 	.word	0x080068ad
 800684c:	080068a5 	.word	0x080068a5
 8006850:	080068a5 	.word	0x080068a5
 8006854:	080068a5 	.word	0x080068a5
 8006858:	080068a5 	.word	0x080068a5
 800685c:	080068a5 	.word	0x080068a5
 8006860:	080068a5 	.word	0x080068a5
 8006864:	080068a5 	.word	0x080068a5
 8006868:	080068ad 	.word	0x080068ad
 800686c:	58024400 	.word	0x58024400
 8006870:	58024800 	.word	0x58024800
 8006874:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800687c:	3308      	adds	r3, #8
 800687e:	2101      	movs	r1, #1
 8006880:	4618      	mov	r0, r3
 8006882:	f001 f81b 	bl	80078bc <RCCEx_PLL2_Config>
 8006886:	4603      	mov	r3, r0
 8006888:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800688c:	e00f      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800688e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006892:	3328      	adds	r3, #40	@ 0x28
 8006894:	2101      	movs	r1, #1
 8006896:	4618      	mov	r0, r3
 8006898:	f001 f8c2 	bl	8007a20 <RCCEx_PLL3_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068a2:	e004      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80068aa:	e000      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80068ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10b      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068b6:	4bc0      	ldr	r3, [pc, #768]	@ (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80068be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068c6:	4abc      	ldr	r2, [pc, #752]	@ (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068c8:	430b      	orrs	r3, r1
 80068ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80068cc:	e003      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f002 0302 	and.w	r3, r2, #2
 80068e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068e6:	2300      	movs	r3, #0
 80068e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80068ec:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80068f0:	460b      	mov	r3, r1
 80068f2:	4313      	orrs	r3, r2
 80068f4:	d043      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80068f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068fe:	2b05      	cmp	r3, #5
 8006900:	d824      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006902:	a201      	add	r2, pc, #4	@ (adr r2, 8006908 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006908:	08006955 	.word	0x08006955
 800690c:	08006921 	.word	0x08006921
 8006910:	08006937 	.word	0x08006937
 8006914:	08006955 	.word	0x08006955
 8006918:	08006955 	.word	0x08006955
 800691c:	08006955 	.word	0x08006955
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006924:	3308      	adds	r3, #8
 8006926:	2101      	movs	r1, #1
 8006928:	4618      	mov	r0, r3
 800692a:	f000 ffc7 	bl	80078bc <RCCEx_PLL2_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006934:	e00f      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800693a:	3328      	adds	r3, #40	@ 0x28
 800693c:	2101      	movs	r1, #1
 800693e:	4618      	mov	r0, r3
 8006940:	f001 f86e 	bl	8007a20 <RCCEx_PLL3_Config>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800694a:	e004      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006952:	e000      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006956:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10b      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800695e:	4b96      	ldr	r3, [pc, #600]	@ (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006962:	f023 0107 	bic.w	r1, r3, #7
 8006966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800696a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800696e:	4a92      	ldr	r2, [pc, #584]	@ (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006970:	430b      	orrs	r3, r1
 8006972:	6553      	str	r3, [r2, #84]	@ 0x54
 8006974:	e003      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006976:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800697a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800697e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	f002 0304 	and.w	r3, r2, #4
 800698a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800698e:	2300      	movs	r3, #0
 8006990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006994:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006998:	460b      	mov	r3, r1
 800699a:	4313      	orrs	r3, r2
 800699c:	d043      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800699e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	d824      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80069aa:	a201      	add	r2, pc, #4	@ (adr r2, 80069b0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	080069fd 	.word	0x080069fd
 80069b4:	080069c9 	.word	0x080069c9
 80069b8:	080069df 	.word	0x080069df
 80069bc:	080069fd 	.word	0x080069fd
 80069c0:	080069fd 	.word	0x080069fd
 80069c4:	080069fd 	.word	0x080069fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069cc:	3308      	adds	r3, #8
 80069ce:	2101      	movs	r1, #1
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 ff73 	bl	80078bc <RCCEx_PLL2_Config>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069dc:	e00f      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069e2:	3328      	adds	r3, #40	@ 0x28
 80069e4:	2101      	movs	r1, #1
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 f81a 	bl	8007a20 <RCCEx_PLL3_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069f2:	e004      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80069fa:	e000      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80069fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10b      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a06:	4b6c      	ldr	r3, [pc, #432]	@ (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a0a:	f023 0107 	bic.w	r1, r3, #7
 8006a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a16:	4a68      	ldr	r2, [pc, #416]	@ (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a1c:	e003      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f002 0320 	and.w	r3, r2, #32
 8006a32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a36:	2300      	movs	r3, #0
 8006a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d055      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a52:	d033      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a58:	d82c      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a5e:	d02f      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a64:	d826      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006a66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a6a:	d02b      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006a6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a70:	d820      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006a72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a76:	d012      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a7c:	d81a      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d022      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006a82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a86:	d115      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 ff13 	bl	80078bc <RCCEx_PLL2_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a9c:	e015      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aa2:	3328      	adds	r3, #40	@ 0x28
 8006aa4:	2102      	movs	r1, #2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 ffba 	bl	8007a20 <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ab2:	e00a      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006aba:	e006      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006abc:	bf00      	nop
 8006abe:	e004      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006ac0:	bf00      	nop
 8006ac2:	e002      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006ac4:	bf00      	nop
 8006ac6:	e000      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10b      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ad2:	4b39      	ldr	r3, [pc, #228]	@ (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ae2:	4a35      	ldr	r2, [pc, #212]	@ (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ae8:	e003      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006aee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006afe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b02:	2300      	movs	r3, #0
 8006b04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	d058      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b1e:	d033      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006b20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b24:	d82c      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b2a:	d02f      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b30:	d826      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b36:	d02b      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006b38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b3c:	d820      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b42:	d012      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006b44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b48:	d81a      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d022      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b52:	d115      	bne.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b58:	3308      	adds	r3, #8
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fead 	bl	80078bc <RCCEx_PLL2_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b68:	e015      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b6e:	3328      	adds	r3, #40	@ 0x28
 8006b70:	2102      	movs	r1, #2
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 ff54 	bl	8007a20 <RCCEx_PLL3_Config>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b7e:	e00a      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b86:	e006      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006b88:	bf00      	nop
 8006b8a:	e004      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006b8c:	bf00      	nop
 8006b8e:	e002      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006b90:	bf00      	nop
 8006b92:	e000      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10e      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b9e:	4b06      	ldr	r3, [pc, #24]	@ (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006baa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bae:	4a02      	ldr	r2, [pc, #8]	@ (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bb4:	e006      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006bb6:	bf00      	nop
 8006bb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006bde:	460b      	mov	r3, r1
 8006be0:	4313      	orrs	r3, r2
 8006be2:	d055      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006be8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006bec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006bf0:	d033      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006bf2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006bf6:	d82c      	bhi.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bfc:	d02f      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c02:	d826      	bhi.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c08:	d02b      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006c0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006c0e:	d820      	bhi.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c14:	d012      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006c16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c1a:	d81a      	bhi.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d022      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c24:	d115      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fe44 	bl	80078bc <RCCEx_PLL2_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c3a:	e015      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c40:	3328      	adds	r3, #40	@ 0x28
 8006c42:	2102      	movs	r1, #2
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 feeb 	bl	8007a20 <RCCEx_PLL3_Config>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c50:	e00a      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c58:	e006      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006c5a:	bf00      	nop
 8006c5c:	e004      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006c5e:	bf00      	nop
 8006c60:	e002      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006c62:	bf00      	nop
 8006c64:	e000      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10b      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c70:	4ba1      	ldr	r3, [pc, #644]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c80:	4a9d      	ldr	r2, [pc, #628]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c82:	430b      	orrs	r3, r1
 8006c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c86:	e003      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f002 0308 	and.w	r3, r2, #8
 8006c9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ca6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006caa:	460b      	mov	r3, r1
 8006cac:	4313      	orrs	r3, r2
 8006cae:	d01e      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cbc:	d10c      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cc2:	3328      	adds	r3, #40	@ 0x28
 8006cc4:	2102      	movs	r1, #2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 feaa 	bl	8007a20 <RCCEx_PLL3_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006cd8:	4b87      	ldr	r3, [pc, #540]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cdc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ce8:	4a83      	ldr	r2, [pc, #524]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cea:	430b      	orrs	r3, r1
 8006cec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	f002 0310 	and.w	r3, r2, #16
 8006cfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	d01e      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d1a:	d10c      	bne.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d20:	3328      	adds	r3, #40	@ 0x28
 8006d22:	2102      	movs	r1, #2
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fe7b 	bl	8007a20 <RCCEx_PLL3_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d36:	4b70      	ldr	r3, [pc, #448]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d46:	4a6c      	ldr	r2, [pc, #432]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d48:	430b      	orrs	r3, r1
 8006d4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006d58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d62:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006d66:	460b      	mov	r3, r1
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	d03e      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d78:	d022      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006d7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d7e:	d81b      	bhi.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d88:	d00b      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006d8a:	e015      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d90:	3308      	adds	r3, #8
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fd91 	bl	80078bc <RCCEx_PLL2_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006da0:	e00f      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006da6:	3328      	adds	r3, #40	@ 0x28
 8006da8:	2102      	movs	r1, #2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fe38 	bl	8007a20 <RCCEx_PLL3_Config>
 8006db0:	4603      	mov	r3, r0
 8006db2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006db6:	e004      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006dbe:	e000      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dca:	4b4b      	ldr	r3, [pc, #300]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006dda:	4a47      	ldr	r2, [pc, #284]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8006de0:	e003      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006de6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006df6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006df8:	2300      	movs	r3, #0
 8006dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006dfc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006e00:	460b      	mov	r3, r1
 8006e02:	4313      	orrs	r3, r2
 8006e04:	d03b      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e12:	d01f      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006e14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e18:	d818      	bhi.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e1e:	d003      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006e20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e24:	d007      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006e26:	e011      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e28:	4b33      	ldr	r3, [pc, #204]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2c:	4a32      	ldr	r2, [pc, #200]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e34:	e00f      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e3a:	3328      	adds	r3, #40	@ 0x28
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fdee 	bl	8007a20 <RCCEx_PLL3_Config>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e4a:	e004      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e52:	e000      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10b      	bne.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e5e:	4b26      	ldr	r3, [pc, #152]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e6e:	4a22      	ldr	r2, [pc, #136]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e74:	e003      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006e8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006e94:	460b      	mov	r3, r1
 8006e96:	4313      	orrs	r3, r2
 8006e98:	d034      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea8:	d007      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006eaa:	e011      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eac:	4b12      	ldr	r3, [pc, #72]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb0:	4a11      	ldr	r2, [pc, #68]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006eb8:	e00e      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	2102      	movs	r1, #2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fcfa 	bl	80078bc <RCCEx_PLL2_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ece:	e003      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10d      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ee0:	4b05      	ldr	r3, [pc, #20]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ee4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eee:	4a02      	ldr	r2, [pc, #8]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ef4:	e006      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006ef6:	bf00      	nop
 8006ef8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006f10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f12:	2300      	movs	r3, #0
 8006f14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f16:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	d00c      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f24:	3328      	adds	r3, #40	@ 0x28
 8006f26:	2102      	movs	r1, #2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fd79 	bl	8007a20 <RCCEx_PLL3_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006f46:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f48:	2300      	movs	r3, #0
 8006f4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f4c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006f50:	460b      	mov	r3, r1
 8006f52:	4313      	orrs	r3, r2
 8006f54:	d038      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f62:	d018      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006f64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f68:	d811      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f6e:	d014      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f74:	d80b      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d011      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f7e:	d106      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f80:	4bc3      	ldr	r3, [pc, #780]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f84:	4ac2      	ldr	r2, [pc, #776]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f94:	e004      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006f96:	bf00      	nop
 8006f98:	e002      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006f9a:	bf00      	nop
 8006f9c:	e000      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10b      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fa8:	4bb9      	ldr	r3, [pc, #740]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb8:	4ab5      	ldr	r2, [pc, #724]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006fba:	430b      	orrs	r3, r1
 8006fbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fbe:	e003      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006fd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fda:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fe4:	4baa      	ldr	r3, [pc, #680]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fe8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ff0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ff2:	4aa7      	ldr	r2, [pc, #668]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007004:	653b      	str	r3, [r7, #80]	@ 0x50
 8007006:	2300      	movs	r3, #0
 8007008:	657b      	str	r3, [r7, #84]	@ 0x54
 800700a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800700e:	460b      	mov	r3, r1
 8007010:	4313      	orrs	r3, r2
 8007012:	d009      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007014:	4b9e      	ldr	r3, [pc, #632]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007018:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800701c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007022:	4a9b      	ldr	r2, [pc, #620]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007024:	430b      	orrs	r3, r1
 8007026:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007034:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007036:	2300      	movs	r3, #0
 8007038:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800703a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800703e:	460b      	mov	r3, r1
 8007040:	4313      	orrs	r3, r2
 8007042:	d009      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007044:	4b92      	ldr	r3, [pc, #584]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007048:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800704c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007052:	4a8f      	ldr	r2, [pc, #572]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007054:	430b      	orrs	r3, r1
 8007056:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007058:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007064:	643b      	str	r3, [r7, #64]	@ 0x40
 8007066:	2300      	movs	r3, #0
 8007068:	647b      	str	r3, [r7, #68]	@ 0x44
 800706a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800706e:	460b      	mov	r3, r1
 8007070:	4313      	orrs	r3, r2
 8007072:	d00e      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007074:	4b86      	ldr	r3, [pc, #536]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	4a85      	ldr	r2, [pc, #532]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800707a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800707e:	6113      	str	r3, [r2, #16]
 8007080:	4b83      	ldr	r3, [pc, #524]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007082:	6919      	ldr	r1, [r3, #16]
 8007084:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007088:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800708c:	4a80      	ldr	r2, [pc, #512]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800708e:	430b      	orrs	r3, r1
 8007090:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800709e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070a0:	2300      	movs	r3, #0
 80070a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070a4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80070a8:	460b      	mov	r3, r1
 80070aa:	4313      	orrs	r3, r2
 80070ac:	d009      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070ae:	4b78      	ldr	r3, [pc, #480]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80070b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070bc:	4a74      	ldr	r2, [pc, #464]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070be:	430b      	orrs	r3, r1
 80070c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80070ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d0:	2300      	movs	r3, #0
 80070d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80070d8:	460b      	mov	r3, r1
 80070da:	4313      	orrs	r3, r2
 80070dc:	d00a      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070de:	4b6c      	ldr	r3, [pc, #432]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80070e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070ee:	4a68      	ldr	r2, [pc, #416]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80070f0:	430b      	orrs	r3, r1
 80070f2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80070f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	2100      	movs	r1, #0
 80070fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007106:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	d011      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007114:	3308      	adds	r3, #8
 8007116:	2100      	movs	r1, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fbcf 	bl	80078bc <RCCEx_PLL2_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007124:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007130:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007134:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	2100      	movs	r1, #0
 800713e:	6239      	str	r1, [r7, #32]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	627b      	str	r3, [r7, #36]	@ 0x24
 8007146:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800714a:	460b      	mov	r3, r1
 800714c:	4313      	orrs	r3, r2
 800714e:	d011      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007154:	3308      	adds	r3, #8
 8007156:	2101      	movs	r1, #1
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fbaf 	bl	80078bc <RCCEx_PLL2_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007164:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800716c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007170:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	2100      	movs	r1, #0
 800717e:	61b9      	str	r1, [r7, #24]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	61fb      	str	r3, [r7, #28]
 8007186:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800718a:	460b      	mov	r3, r1
 800718c:	4313      	orrs	r3, r2
 800718e:	d011      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007194:	3308      	adds	r3, #8
 8007196:	2102      	movs	r1, #2
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fb8f 	bl	80078bc <RCCEx_PLL2_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80071a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80071b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	2100      	movs	r1, #0
 80071be:	6139      	str	r1, [r7, #16]
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80071ca:	460b      	mov	r3, r1
 80071cc:	4313      	orrs	r3, r2
 80071ce:	d011      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071d4:	3328      	adds	r3, #40	@ 0x28
 80071d6:	2100      	movs	r1, #0
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fc21 	bl	8007a20 <RCCEx_PLL3_Config>
 80071de:	4603      	mov	r3, r0
 80071e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80071e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80071f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	2100      	movs	r1, #0
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800720a:	460b      	mov	r3, r1
 800720c:	4313      	orrs	r3, r2
 800720e:	d011      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007210:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007214:	3328      	adds	r3, #40	@ 0x28
 8007216:	2101      	movs	r1, #1
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fc01 	bl	8007a20 <RCCEx_PLL3_Config>
 800721e:	4603      	mov	r3, r0
 8007220:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007224:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007230:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	2100      	movs	r1, #0
 800723e:	6039      	str	r1, [r7, #0]
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	607b      	str	r3, [r7, #4]
 8007246:	e9d7 1200 	ldrd	r1, r2, [r7]
 800724a:	460b      	mov	r3, r1
 800724c:	4313      	orrs	r3, r2
 800724e:	d011      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007254:	3328      	adds	r3, #40	@ 0x28
 8007256:	2102      	movs	r1, #2
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fbe1 	bl	8007a20 <RCCEx_PLL3_Config>
 800725e:	4603      	mov	r3, r0
 8007260:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007264:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007270:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007274:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	e000      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
}
 8007282:	4618      	mov	r0, r3
 8007284:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007288:	46bd      	mov	sp, r7
 800728a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800728e:	bf00      	nop
 8007290:	58024400 	.word	0x58024400

08007294 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007298:	f7fe fde2 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 800729c:	4602      	mov	r2, r0
 800729e:	4b06      	ldr	r3, [pc, #24]	@ (80072b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	091b      	lsrs	r3, r3, #4
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	4904      	ldr	r1, [pc, #16]	@ (80072bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072aa:	5ccb      	ldrb	r3, [r1, r3]
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	58024400 	.word	0x58024400
 80072bc:	0800ba78 	.word	0x0800ba78

080072c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b089      	sub	sp, #36	@ 0x24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072c8:	4ba1      	ldr	r3, [pc, #644]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072cc:	f003 0303 	and.w	r3, r3, #3
 80072d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80072d2:	4b9f      	ldr	r3, [pc, #636]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d6:	0b1b      	lsrs	r3, r3, #12
 80072d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80072de:	4b9c      	ldr	r3, [pc, #624]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e2:	091b      	lsrs	r3, r3, #4
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80072ea:	4b99      	ldr	r3, [pc, #612]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ee:	08db      	lsrs	r3, r3, #3
 80072f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	fb02 f303 	mul.w	r3, r2, r3
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 8111 	beq.w	8007530 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	2b02      	cmp	r3, #2
 8007312:	f000 8083 	beq.w	800741c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b02      	cmp	r3, #2
 800731a:	f200 80a1 	bhi.w	8007460 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d056      	beq.n	80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800732a:	e099      	b.n	8007460 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800732c:	4b88      	ldr	r3, [pc, #544]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0320 	and.w	r3, r3, #32
 8007334:	2b00      	cmp	r3, #0
 8007336:	d02d      	beq.n	8007394 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007338:	4b85      	ldr	r3, [pc, #532]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	08db      	lsrs	r3, r3, #3
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	4a84      	ldr	r2, [pc, #528]	@ (8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007344:	fa22 f303 	lsr.w	r3, r2, r3
 8007348:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	ee07 3a90 	vmov	s15, r3
 8007350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007362:	4b7b      	ldr	r3, [pc, #492]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007372:	ed97 6a03 	vldr	s12, [r7, #12]
 8007376:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800737a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007392:	e087      	b.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800755c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80073a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073d6:	e065      	b.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ea:	4b59      	ldr	r3, [pc, #356]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800740e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800741a:	e043      	b.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800742a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742e:	4b48      	ldr	r3, [pc, #288]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007442:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800745e:	e021      	b.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800746e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007472:	4b37      	ldr	r3, [pc, #220]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007482:	ed97 6a03 	vldr	s12, [r7, #12]
 8007486:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800748a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80074a4:	4b2a      	ldr	r3, [pc, #168]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a8:	0a5b      	lsrs	r3, r3, #9
 80074aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074be:	edd7 6a07 	vldr	s13, [r7, #28]
 80074c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ca:	ee17 2a90 	vmov	r2, s15
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80074d2:	4b1f      	ldr	r3, [pc, #124]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d6:	0c1b      	lsrs	r3, r3, #16
 80074d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074dc:	ee07 3a90 	vmov	s15, r3
 80074e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f8:	ee17 2a90 	vmov	r2, s15
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007500:	4b13      	ldr	r3, [pc, #76]	@ (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007504:	0e1b      	lsrs	r3, r3, #24
 8007506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800751a:	edd7 6a07 	vldr	s13, [r7, #28]
 800751e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007526:	ee17 2a90 	vmov	r2, s15
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800752e:	e008      	b.n	8007542 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	609a      	str	r2, [r3, #8]
}
 8007542:	bf00      	nop
 8007544:	3724      	adds	r7, #36	@ 0x24
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	58024400 	.word	0x58024400
 8007554:	03d09000 	.word	0x03d09000
 8007558:	46000000 	.word	0x46000000
 800755c:	4c742400 	.word	0x4c742400
 8007560:	4a742400 	.word	0x4a742400
 8007564:	4af42400 	.word	0x4af42400

08007568 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007568:	b480      	push	{r7}
 800756a:	b089      	sub	sp, #36	@ 0x24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007570:	4ba1      	ldr	r3, [pc, #644]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800757a:	4b9f      	ldr	r3, [pc, #636]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757e:	0d1b      	lsrs	r3, r3, #20
 8007580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007584:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007586:	4b9c      	ldr	r3, [pc, #624]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758a:	0a1b      	lsrs	r3, r3, #8
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007592:	4b99      	ldr	r3, [pc, #612]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007596:	08db      	lsrs	r3, r3, #3
 8007598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	fb02 f303 	mul.w	r3, r2, r3
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 8111 	beq.w	80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	f000 8083 	beq.w	80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	f200 80a1 	bhi.w	8007708 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d056      	beq.n	8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80075d2:	e099      	b.n	8007708 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075d4:	4b88      	ldr	r3, [pc, #544]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d02d      	beq.n	800763c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075e0:	4b85      	ldr	r3, [pc, #532]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	08db      	lsrs	r3, r3, #3
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	4a84      	ldr	r2, [pc, #528]	@ (80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80075ec:	fa22 f303 	lsr.w	r3, r2, r3
 80075f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760a:	4b7b      	ldr	r3, [pc, #492]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761a:	ed97 6a03 	vldr	s12, [r7, #12]
 800761e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800762e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800763a:	e087      	b.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007646:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007804 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800764a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764e:	4b6a      	ldr	r3, [pc, #424]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007662:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800766e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800767e:	e065      	b.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800768e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007692:	4b59      	ldr	r3, [pc, #356]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076c2:	e043      	b.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800780c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80076d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d6:	4b48      	ldr	r3, [pc, #288]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007706:	e021      	b.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007712:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771a:	4b37      	ldr	r3, [pc, #220]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800771c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772a:	ed97 6a03 	vldr	s12, [r7, #12]
 800772e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800773e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800774a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800774c:	4b2a      	ldr	r3, [pc, #168]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800774e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007750:	0a5b      	lsrs	r3, r3, #9
 8007752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007766:	edd7 6a07 	vldr	s13, [r7, #28]
 800776a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800776e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007772:	ee17 2a90 	vmov	r2, s15
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800777a:	4b1f      	ldr	r3, [pc, #124]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777e:	0c1b      	lsrs	r3, r3, #16
 8007780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007794:	edd7 6a07 	vldr	s13, [r7, #28]
 8007798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a0:	ee17 2a90 	vmov	r2, s15
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80077a8:	4b13      	ldr	r3, [pc, #76]	@ (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ac:	0e1b      	lsrs	r3, r3, #24
 80077ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ce:	ee17 2a90 	vmov	r2, s15
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80077d6:	e008      	b.n	80077ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	609a      	str	r2, [r3, #8]
}
 80077ea:	bf00      	nop
 80077ec:	3724      	adds	r7, #36	@ 0x24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	58024400 	.word	0x58024400
 80077fc:	03d09000 	.word	0x03d09000
 8007800:	46000000 	.word	0x46000000
 8007804:	4c742400 	.word	0x4c742400
 8007808:	4a742400 	.word	0x4a742400
 800780c:	4af42400 	.word	0x4af42400

08007810 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8007818:	4b26      	ldr	r3, [pc, #152]	@ (80078b4 <HAL_RCCEx_CRSConfig+0xa4>)
 800781a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800781e:	4a25      	ldr	r2, [pc, #148]	@ (80078b4 <HAL_RCCEx_CRSConfig+0xa4>)
 8007820:	f043 0302 	orr.w	r3, r3, #2
 8007824:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8007828:	4b22      	ldr	r3, [pc, #136]	@ (80078b4 <HAL_RCCEx_CRSConfig+0xa4>)
 800782a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800782e:	4a21      	ldr	r2, [pc, #132]	@ (80078b4 <HAL_RCCEx_CRSConfig+0xa4>)
 8007830:	f023 0302 	bic.w	r3, r3, #2
 8007834:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8007838:	f7f9 fd16 	bl	8001268 <HAL_GetREVID>
 800783c:	4603      	mov	r3, r0
 800783e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007842:	4293      	cmp	r3, r2
 8007844:	d80b      	bhi.n	800785e <HAL_RCCEx_CRSConfig+0x4e>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800784e:	d106      	bne.n	800785e <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	e008      	b.n	8007870 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	041b      	lsls	r3, r3, #16
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8007886:	4a0c      	ldr	r2, [pc, #48]	@ (80078b8 <HAL_RCCEx_CRSConfig+0xa8>)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800788c:	4b0a      	ldr	r3, [pc, #40]	@ (80078b8 <HAL_RCCEx_CRSConfig+0xa8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	4907      	ldr	r1, [pc, #28]	@ (80078b8 <HAL_RCCEx_CRSConfig+0xa8>)
 800789c:	4313      	orrs	r3, r2
 800789e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80078a0:	4b05      	ldr	r3, [pc, #20]	@ (80078b8 <HAL_RCCEx_CRSConfig+0xa8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a04      	ldr	r2, [pc, #16]	@ (80078b8 <HAL_RCCEx_CRSConfig+0xa8>)
 80078a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80078aa:	6013      	str	r3, [r2, #0]
}
 80078ac:	bf00      	nop
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	58024400 	.word	0x58024400
 80078b8:	40008400 	.word	0x40008400

080078bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078ca:	4b53      	ldr	r3, [pc, #332]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 80078cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d101      	bne.n	80078da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e099      	b.n	8007a0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078da:	4b4f      	ldr	r3, [pc, #316]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a4e      	ldr	r2, [pc, #312]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 80078e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e6:	f7f9 fcb3 	bl	8001250 <HAL_GetTick>
 80078ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078ec:	e008      	b.n	8007900 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078ee:	f7f9 fcaf 	bl	8001250 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d901      	bls.n	8007900 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e086      	b.n	8007a0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007900:	4b45      	ldr	r3, [pc, #276]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1f0      	bne.n	80078ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800790c:	4b42      	ldr	r3, [pc, #264]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 800790e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007910:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	031b      	lsls	r3, r3, #12
 800791a:	493f      	ldr	r1, [pc, #252]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 800791c:	4313      	orrs	r3, r2
 800791e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	3b01      	subs	r3, #1
 8007926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	3b01      	subs	r3, #1
 8007930:	025b      	lsls	r3, r3, #9
 8007932:	b29b      	uxth	r3, r3
 8007934:	431a      	orrs	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	3b01      	subs	r3, #1
 800793c:	041b      	lsls	r3, r3, #16
 800793e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007942:	431a      	orrs	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	3b01      	subs	r3, #1
 800794a:	061b      	lsls	r3, r3, #24
 800794c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007950:	4931      	ldr	r1, [pc, #196]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 8007952:	4313      	orrs	r3, r2
 8007954:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007956:	4b30      	ldr	r3, [pc, #192]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 8007958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	492d      	ldr	r1, [pc, #180]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 8007964:	4313      	orrs	r3, r2
 8007966:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007968:	4b2b      	ldr	r3, [pc, #172]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 800796a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796c:	f023 0220 	bic.w	r2, r3, #32
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	4928      	ldr	r1, [pc, #160]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 8007976:	4313      	orrs	r3, r2
 8007978:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800797a:	4b27      	ldr	r3, [pc, #156]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 800797c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797e:	4a26      	ldr	r2, [pc, #152]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 8007980:	f023 0310 	bic.w	r3, r3, #16
 8007984:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007986:	4b24      	ldr	r3, [pc, #144]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 8007988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800798a:	4b24      	ldr	r3, [pc, #144]	@ (8007a1c <RCCEx_PLL2_Config+0x160>)
 800798c:	4013      	ands	r3, r2
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	69d2      	ldr	r2, [r2, #28]
 8007992:	00d2      	lsls	r2, r2, #3
 8007994:	4920      	ldr	r1, [pc, #128]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 8007996:	4313      	orrs	r3, r2
 8007998:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800799a:	4b1f      	ldr	r3, [pc, #124]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 800799c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799e:	4a1e      	ldr	r2, [pc, #120]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 80079a0:	f043 0310 	orr.w	r3, r3, #16
 80079a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d106      	bne.n	80079ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 80079ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b0:	4a19      	ldr	r2, [pc, #100]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 80079b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80079b8:	e00f      	b.n	80079da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d106      	bne.n	80079ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079c0:	4b15      	ldr	r3, [pc, #84]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	4a14      	ldr	r2, [pc, #80]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 80079c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80079cc:	e005      	b.n	80079da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079ce:	4b12      	ldr	r3, [pc, #72]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d2:	4a11      	ldr	r2, [pc, #68]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 80079d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80079d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079da:	4b0f      	ldr	r3, [pc, #60]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a0e      	ldr	r2, [pc, #56]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 80079e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079e6:	f7f9 fc33 	bl	8001250 <HAL_GetTick>
 80079ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079ec:	e008      	b.n	8007a00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079ee:	f7f9 fc2f 	bl	8001250 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d901      	bls.n	8007a00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e006      	b.n	8007a0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a00:	4b05      	ldr	r3, [pc, #20]	@ (8007a18 <RCCEx_PLL2_Config+0x15c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d0f0      	beq.n	80079ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	ffff0007 	.word	0xffff0007

08007a20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a2e:	4b53      	ldr	r3, [pc, #332]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d101      	bne.n	8007a3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e099      	b.n	8007b72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a3e:	4b4f      	ldr	r3, [pc, #316]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a4e      	ldr	r2, [pc, #312]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a4a:	f7f9 fc01 	bl	8001250 <HAL_GetTick>
 8007a4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a50:	e008      	b.n	8007a64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a52:	f7f9 fbfd 	bl	8001250 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d901      	bls.n	8007a64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e086      	b.n	8007b72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a64:	4b45      	ldr	r3, [pc, #276]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1f0      	bne.n	8007a52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a70:	4b42      	ldr	r3, [pc, #264]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a74:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	051b      	lsls	r3, r3, #20
 8007a7e:	493f      	ldr	r1, [pc, #252]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	025b      	lsls	r3, r3, #9
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	041b      	lsls	r3, r3, #16
 8007aa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	061b      	lsls	r3, r3, #24
 8007ab0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ab4:	4931      	ldr	r1, [pc, #196]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007aba:	4b30      	ldr	r3, [pc, #192]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	492d      	ldr	r1, [pc, #180]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007acc:	4b2b      	ldr	r3, [pc, #172]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	4928      	ldr	r1, [pc, #160]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ade:	4b27      	ldr	r3, [pc, #156]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae2:	4a26      	ldr	r2, [pc, #152]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007aea:	4b24      	ldr	r3, [pc, #144]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aee:	4b24      	ldr	r3, [pc, #144]	@ (8007b80 <RCCEx_PLL3_Config+0x160>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	69d2      	ldr	r2, [r2, #28]
 8007af6:	00d2      	lsls	r2, r2, #3
 8007af8:	4920      	ldr	r1, [pc, #128]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007afe:	4b1f      	ldr	r3, [pc, #124]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b02:	4a1e      	ldr	r2, [pc, #120]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d106      	bne.n	8007b1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b10:	4b1a      	ldr	r3, [pc, #104]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b14:	4a19      	ldr	r2, [pc, #100]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007b16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b1c:	e00f      	b.n	8007b3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d106      	bne.n	8007b32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b24:	4b15      	ldr	r3, [pc, #84]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	4a14      	ldr	r2, [pc, #80]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007b2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b30:	e005      	b.n	8007b3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b32:	4b12      	ldr	r3, [pc, #72]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b36:	4a11      	ldr	r2, [pc, #68]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007b38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a0e      	ldr	r2, [pc, #56]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b4a:	f7f9 fb81 	bl	8001250 <HAL_GetTick>
 8007b4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b50:	e008      	b.n	8007b64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b52:	f7f9 fb7d 	bl	8001250 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d901      	bls.n	8007b64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e006      	b.n	8007b72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b64:	4b05      	ldr	r3, [pc, #20]	@ (8007b7c <RCCEx_PLL3_Config+0x15c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0f0      	beq.n	8007b52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	58024400 	.word	0x58024400
 8007b80:	ffff0007 	.word	0xffff0007

08007b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e049      	b.n	8007c2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7f9 f914 	bl	8000dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	f000 f8a6 	bl	8007d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d001      	beq.n	8007c4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e04c      	b.n	8007ce6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a26      	ldr	r2, [pc, #152]	@ (8007cf4 <HAL_TIM_Base_Start+0xc0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d022      	beq.n	8007ca4 <HAL_TIM_Base_Start+0x70>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c66:	d01d      	beq.n	8007ca4 <HAL_TIM_Base_Start+0x70>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a22      	ldr	r2, [pc, #136]	@ (8007cf8 <HAL_TIM_Base_Start+0xc4>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d018      	beq.n	8007ca4 <HAL_TIM_Base_Start+0x70>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a21      	ldr	r2, [pc, #132]	@ (8007cfc <HAL_TIM_Base_Start+0xc8>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d013      	beq.n	8007ca4 <HAL_TIM_Base_Start+0x70>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1f      	ldr	r2, [pc, #124]	@ (8007d00 <HAL_TIM_Base_Start+0xcc>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00e      	beq.n	8007ca4 <HAL_TIM_Base_Start+0x70>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8007d04 <HAL_TIM_Base_Start+0xd0>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d009      	beq.n	8007ca4 <HAL_TIM_Base_Start+0x70>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a1c      	ldr	r2, [pc, #112]	@ (8007d08 <HAL_TIM_Base_Start+0xd4>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d004      	beq.n	8007ca4 <HAL_TIM_Base_Start+0x70>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8007d0c <HAL_TIM_Base_Start+0xd8>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d115      	bne.n	8007cd0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	4b19      	ldr	r3, [pc, #100]	@ (8007d10 <HAL_TIM_Base_Start+0xdc>)
 8007cac:	4013      	ands	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b06      	cmp	r3, #6
 8007cb4:	d015      	beq.n	8007ce2 <HAL_TIM_Base_Start+0xae>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cbc:	d011      	beq.n	8007ce2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f042 0201 	orr.w	r2, r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cce:	e008      	b.n	8007ce2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0201 	orr.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	e000      	b.n	8007ce4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800
 8007d00:	40000c00 	.word	0x40000c00
 8007d04:	40010400 	.word	0x40010400
 8007d08:	40001800 	.word	0x40001800
 8007d0c:	40014000 	.word	0x40014000
 8007d10:	00010007 	.word	0x00010007

08007d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a46      	ldr	r2, [pc, #280]	@ (8007e40 <TIM_Base_SetConfig+0x12c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d013      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d32:	d00f      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a43      	ldr	r2, [pc, #268]	@ (8007e44 <TIM_Base_SetConfig+0x130>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00b      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a42      	ldr	r2, [pc, #264]	@ (8007e48 <TIM_Base_SetConfig+0x134>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d007      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a41      	ldr	r2, [pc, #260]	@ (8007e4c <TIM_Base_SetConfig+0x138>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d003      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a40      	ldr	r2, [pc, #256]	@ (8007e50 <TIM_Base_SetConfig+0x13c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d108      	bne.n	8007d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a35      	ldr	r2, [pc, #212]	@ (8007e40 <TIM_Base_SetConfig+0x12c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d01f      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d74:	d01b      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a32      	ldr	r2, [pc, #200]	@ (8007e44 <TIM_Base_SetConfig+0x130>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d017      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a31      	ldr	r2, [pc, #196]	@ (8007e48 <TIM_Base_SetConfig+0x134>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d013      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a30      	ldr	r2, [pc, #192]	@ (8007e4c <TIM_Base_SetConfig+0x138>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d00f      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a2f      	ldr	r2, [pc, #188]	@ (8007e50 <TIM_Base_SetConfig+0x13c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00b      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a2e      	ldr	r2, [pc, #184]	@ (8007e54 <TIM_Base_SetConfig+0x140>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d007      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a2d      	ldr	r2, [pc, #180]	@ (8007e58 <TIM_Base_SetConfig+0x144>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d003      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a2c      	ldr	r2, [pc, #176]	@ (8007e5c <TIM_Base_SetConfig+0x148>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d108      	bne.n	8007dc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a16      	ldr	r2, [pc, #88]	@ (8007e40 <TIM_Base_SetConfig+0x12c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00f      	beq.n	8007e0c <TIM_Base_SetConfig+0xf8>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a18      	ldr	r2, [pc, #96]	@ (8007e50 <TIM_Base_SetConfig+0x13c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d00b      	beq.n	8007e0c <TIM_Base_SetConfig+0xf8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a17      	ldr	r2, [pc, #92]	@ (8007e54 <TIM_Base_SetConfig+0x140>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d007      	beq.n	8007e0c <TIM_Base_SetConfig+0xf8>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a16      	ldr	r2, [pc, #88]	@ (8007e58 <TIM_Base_SetConfig+0x144>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d003      	beq.n	8007e0c <TIM_Base_SetConfig+0xf8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a15      	ldr	r2, [pc, #84]	@ (8007e5c <TIM_Base_SetConfig+0x148>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d103      	bne.n	8007e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	691a      	ldr	r2, [r3, #16]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d105      	bne.n	8007e32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f023 0201 	bic.w	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	611a      	str	r2, [r3, #16]
  }
}
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40010000 	.word	0x40010000
 8007e44:	40000400 	.word	0x40000400
 8007e48:	40000800 	.word	0x40000800
 8007e4c:	40000c00 	.word	0x40000c00
 8007e50:	40010400 	.word	0x40010400
 8007e54:	40014000 	.word	0x40014000
 8007e58:	40014400 	.word	0x40014400
 8007e5c:	40014800 	.word	0x40014800

08007e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d101      	bne.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e74:	2302      	movs	r3, #2
 8007e76:	e06d      	b.n	8007f54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a30      	ldr	r2, [pc, #192]	@ (8007f60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d004      	beq.n	8007eac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8007f64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d108      	bne.n	8007ebe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007eb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a20      	ldr	r2, [pc, #128]	@ (8007f60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d022      	beq.n	8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eea:	d01d      	beq.n	8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d018      	beq.n	8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a1c      	ldr	r2, [pc, #112]	@ (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d013      	beq.n	8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1a      	ldr	r2, [pc, #104]	@ (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d00e      	beq.n	8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a15      	ldr	r2, [pc, #84]	@ (8007f64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d009      	beq.n	8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a16      	ldr	r2, [pc, #88]	@ (8007f74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d004      	beq.n	8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a15      	ldr	r2, [pc, #84]	@ (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d10c      	bne.n	8007f42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	40010000 	.word	0x40010000
 8007f64:	40010400 	.word	0x40010400
 8007f68:	40000400 	.word	0x40000400
 8007f6c:	40000800 	.word	0x40000800
 8007f70:	40000c00 	.word	0x40000c00
 8007f74:	40001800 	.word	0x40001800
 8007f78:	40014000 	.word	0x40014000

08007f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e042      	b.n	8008014 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d106      	bne.n	8007fa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7f8 ff3b 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2224      	movs	r2, #36	@ 0x24
 8007faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0201 	bic.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f001 fb52 	bl	8009670 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fce3 	bl	8008998 <UART_SetConfig>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d101      	bne.n	8007fdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e01b      	b.n	8008014 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0201 	orr.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 fbd1 	bl	80097b4 <UART_CheckIdleState>
 8008012:	4603      	mov	r3, r0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	@ 0x28
 8008020:	af02      	add	r7, sp, #8
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	4613      	mov	r3, r2
 800802a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008032:	2b20      	cmp	r3, #32
 8008034:	d17b      	bne.n	800812e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <HAL_UART_Transmit+0x26>
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e074      	b.n	8008130 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2221      	movs	r2, #33	@ 0x21
 8008052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008056:	f7f9 f8fb 	bl	8001250 <HAL_GetTick>
 800805a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	88fa      	ldrh	r2, [r7, #6]
 8008060:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	88fa      	ldrh	r2, [r7, #6]
 8008068:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008074:	d108      	bne.n	8008088 <HAL_UART_Transmit+0x6c>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d104      	bne.n	8008088 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	e003      	b.n	8008090 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800808c:	2300      	movs	r3, #0
 800808e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008090:	e030      	b.n	80080f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2200      	movs	r2, #0
 800809a:	2180      	movs	r1, #128	@ 0x80
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f001 fc33 	bl	8009908 <UART_WaitOnFlagUntilTimeout>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d005      	beq.n	80080b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2220      	movs	r2, #32
 80080ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e03d      	b.n	8008130 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10b      	bne.n	80080d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	3302      	adds	r3, #2
 80080ce:	61bb      	str	r3, [r7, #24]
 80080d0:	e007      	b.n	80080e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	3301      	adds	r3, #1
 80080e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1c8      	bne.n	8008092 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	2200      	movs	r2, #0
 8008108:	2140      	movs	r1, #64	@ 0x40
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f001 fbfc 	bl	8009908 <UART_WaitOnFlagUntilTimeout>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2220      	movs	r2, #32
 800811a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e006      	b.n	8008130 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	e000      	b.n	8008130 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800812e:	2302      	movs	r3, #2
  }
}
 8008130:	4618      	mov	r0, r3
 8008132:	3720      	adds	r7, #32
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	@ 0x28
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	4613      	mov	r3, r2
 8008144:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800814c:	2b20      	cmp	r3, #32
 800814e:	d137      	bne.n	80081c0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <HAL_UART_Receive_DMA+0x24>
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e030      	b.n	80081c2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a18      	ldr	r2, [pc, #96]	@ (80081cc <HAL_UART_Receive_DMA+0x94>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d01f      	beq.n	80081b0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d018      	beq.n	80081b0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	613b      	str	r3, [r7, #16]
   return(result);
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008192:	627b      	str	r3, [r7, #36]	@ 0x24
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	461a      	mov	r2, r3
 800819a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819c:	623b      	str	r3, [r7, #32]
 800819e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a0:	69f9      	ldr	r1, [r7, #28]
 80081a2:	6a3a      	ldr	r2, [r7, #32]
 80081a4:	e841 2300 	strex	r3, r2, [r1]
 80081a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e6      	bne.n	800817e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	461a      	mov	r2, r3
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f001 fc14 	bl	80099e4 <UART_Start_Receive_DMA>
 80081bc:	4603      	mov	r3, r0
 80081be:	e000      	b.n	80081c2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081c0:	2302      	movs	r3, #2
  }
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3728      	adds	r7, #40	@ 0x28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	58000c00 	.word	0x58000c00

080081d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b0ba      	sub	sp, #232	@ 0xe8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80081fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80081fe:	4013      	ands	r3, r2
 8008200:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008208:	2b00      	cmp	r3, #0
 800820a:	d11b      	bne.n	8008244 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800820c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008210:	f003 0320 	and.w	r3, r3, #32
 8008214:	2b00      	cmp	r3, #0
 8008216:	d015      	beq.n	8008244 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d105      	bne.n	8008230 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d009      	beq.n	8008244 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 8377 	beq.w	8008928 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	4798      	blx	r3
      }
      return;
 8008242:	e371      	b.n	8008928 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 8123 	beq.w	8008494 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800824e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008252:	4b8d      	ldr	r3, [pc, #564]	@ (8008488 <HAL_UART_IRQHandler+0x2b8>)
 8008254:	4013      	ands	r3, r2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d106      	bne.n	8008268 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800825a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800825e:	4b8b      	ldr	r3, [pc, #556]	@ (800848c <HAL_UART_IRQHandler+0x2bc>)
 8008260:	4013      	ands	r3, r2
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 8116 	beq.w	8008494 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d011      	beq.n	8008298 <HAL_UART_IRQHandler+0xc8>
 8008274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2201      	movs	r2, #1
 8008286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800828e:	f043 0201 	orr.w	r2, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d011      	beq.n	80082c8 <HAL_UART_IRQHandler+0xf8>
 80082a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00b      	beq.n	80082c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2202      	movs	r2, #2
 80082b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082be:	f043 0204 	orr.w	r2, r3, #4
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d011      	beq.n	80082f8 <HAL_UART_IRQHandler+0x128>
 80082d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00b      	beq.n	80082f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2204      	movs	r2, #4
 80082e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ee:	f043 0202 	orr.w	r2, r3, #2
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082fc:	f003 0308 	and.w	r3, r3, #8
 8008300:	2b00      	cmp	r3, #0
 8008302:	d017      	beq.n	8008334 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d105      	bne.n	800831c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008310:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008314:	4b5c      	ldr	r3, [pc, #368]	@ (8008488 <HAL_UART_IRQHandler+0x2b8>)
 8008316:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00b      	beq.n	8008334 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2208      	movs	r2, #8
 8008322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800832a:	f043 0208 	orr.w	r2, r3, #8
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800833c:	2b00      	cmp	r3, #0
 800833e:	d012      	beq.n	8008366 <HAL_UART_IRQHandler+0x196>
 8008340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008344:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00c      	beq.n	8008366 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800835c:	f043 0220 	orr.w	r2, r3, #32
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 82dd 	beq.w	800892c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d013      	beq.n	80083a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800837e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b00      	cmp	r3, #0
 8008388:	d105      	bne.n	8008396 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800838a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800838e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ba:	2b40      	cmp	r3, #64	@ 0x40
 80083bc:	d005      	beq.n	80083ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80083be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d054      	beq.n	8008474 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f001 fbf2 	bl	8009bb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083da:	2b40      	cmp	r3, #64	@ 0x40
 80083dc:	d146      	bne.n	800846c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3308      	adds	r3, #8
 80083e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80083f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3308      	adds	r3, #8
 8008406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800840a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800840e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1d9      	bne.n	80083de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008430:	2b00      	cmp	r3, #0
 8008432:	d017      	beq.n	8008464 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800843a:	4a15      	ldr	r2, [pc, #84]	@ (8008490 <HAL_UART_IRQHandler+0x2c0>)
 800843c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008444:	4618      	mov	r0, r3
 8008446:	f7fa fc63 	bl	8002d10 <HAL_DMA_Abort_IT>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d019      	beq.n	8008484 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800845e:	4610      	mov	r0, r2
 8008460:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008462:	e00f      	b.n	8008484 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fa81 	bl	800896c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800846a:	e00b      	b.n	8008484 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fa7d 	bl	800896c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008472:	e007      	b.n	8008484 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fa79 	bl	800896c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008482:	e253      	b.n	800892c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008484:	bf00      	nop
    return;
 8008486:	e251      	b.n	800892c <HAL_UART_IRQHandler+0x75c>
 8008488:	10000001 	.word	0x10000001
 800848c:	04000120 	.word	0x04000120
 8008490:	08009e67 	.word	0x08009e67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008498:	2b01      	cmp	r3, #1
 800849a:	f040 81e7 	bne.w	800886c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800849e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a2:	f003 0310 	and.w	r3, r3, #16
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 81e0 	beq.w	800886c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80084ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084b0:	f003 0310 	and.w	r3, r3, #16
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 81d9 	beq.w	800886c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2210      	movs	r2, #16
 80084c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084cc:	2b40      	cmp	r3, #64	@ 0x40
 80084ce:	f040 8151 	bne.w	8008774 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a96      	ldr	r2, [pc, #600]	@ (8008734 <HAL_UART_IRQHandler+0x564>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d068      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a93      	ldr	r2, [pc, #588]	@ (8008738 <HAL_UART_IRQHandler+0x568>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d061      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a91      	ldr	r2, [pc, #580]	@ (800873c <HAL_UART_IRQHandler+0x56c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d05a      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a8e      	ldr	r2, [pc, #568]	@ (8008740 <HAL_UART_IRQHandler+0x570>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d053      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a8c      	ldr	r2, [pc, #560]	@ (8008744 <HAL_UART_IRQHandler+0x574>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d04c      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a89      	ldr	r2, [pc, #548]	@ (8008748 <HAL_UART_IRQHandler+0x578>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d045      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a87      	ldr	r2, [pc, #540]	@ (800874c <HAL_UART_IRQHandler+0x57c>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d03e      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a84      	ldr	r2, [pc, #528]	@ (8008750 <HAL_UART_IRQHandler+0x580>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d037      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a82      	ldr	r2, [pc, #520]	@ (8008754 <HAL_UART_IRQHandler+0x584>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d030      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a7f      	ldr	r2, [pc, #508]	@ (8008758 <HAL_UART_IRQHandler+0x588>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d029      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a7d      	ldr	r2, [pc, #500]	@ (800875c <HAL_UART_IRQHandler+0x58c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d022      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a7a      	ldr	r2, [pc, #488]	@ (8008760 <HAL_UART_IRQHandler+0x590>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d01b      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a78      	ldr	r2, [pc, #480]	@ (8008764 <HAL_UART_IRQHandler+0x594>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d014      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a75      	ldr	r2, [pc, #468]	@ (8008768 <HAL_UART_IRQHandler+0x598>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d00d      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a73      	ldr	r2, [pc, #460]	@ (800876c <HAL_UART_IRQHandler+0x59c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d006      	beq.n	80085b2 <HAL_UART_IRQHandler+0x3e2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a70      	ldr	r2, [pc, #448]	@ (8008770 <HAL_UART_IRQHandler+0x5a0>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d106      	bne.n	80085c0 <HAL_UART_IRQHandler+0x3f0>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	b29b      	uxth	r3, r3
 80085be:	e005      	b.n	80085cc <HAL_UART_IRQHandler+0x3fc>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 81ab 	beq.w	8008930 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085e4:	429a      	cmp	r2, r3
 80085e6:	f080 81a3 	bcs.w	8008930 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008600:	f000 8087 	beq.w	8008712 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008618:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800861c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800862e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008632:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800863a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1da      	bne.n	8008604 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3308      	adds	r3, #8
 8008654:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008658:	e853 3f00 	ldrex	r3, [r3]
 800865c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800865e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008660:	f023 0301 	bic.w	r3, r3, #1
 8008664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3308      	adds	r3, #8
 800866e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008672:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008676:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008678:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800867a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e1      	bne.n	800864e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800869a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800869c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3308      	adds	r3, #8
 80086aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80086ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80086b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80086b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80086bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e3      	bne.n	800868a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2220      	movs	r2, #32
 80086c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086e0:	f023 0310 	bic.w	r3, r3, #16
 80086e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	461a      	mov	r2, r3
 80086ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e4      	bne.n	80086d0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800870c:	4618      	mov	r0, r3
 800870e:	f7f9 ffe1 	bl	80026d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2202      	movs	r2, #2
 8008716:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008724:	b29b      	uxth	r3, r3
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	b29b      	uxth	r3, r3
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f927 	bl	8008980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008732:	e0fd      	b.n	8008930 <HAL_UART_IRQHandler+0x760>
 8008734:	40020010 	.word	0x40020010
 8008738:	40020028 	.word	0x40020028
 800873c:	40020040 	.word	0x40020040
 8008740:	40020058 	.word	0x40020058
 8008744:	40020070 	.word	0x40020070
 8008748:	40020088 	.word	0x40020088
 800874c:	400200a0 	.word	0x400200a0
 8008750:	400200b8 	.word	0x400200b8
 8008754:	40020410 	.word	0x40020410
 8008758:	40020428 	.word	0x40020428
 800875c:	40020440 	.word	0x40020440
 8008760:	40020458 	.word	0x40020458
 8008764:	40020470 	.word	0x40020470
 8008768:	40020488 	.word	0x40020488
 800876c:	400204a0 	.word	0x400204a0
 8008770:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008780:	b29b      	uxth	r3, r3
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800878e:	b29b      	uxth	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 80cf 	beq.w	8008934 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008796:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 80ca 	beq.w	8008934 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a8:	e853 3f00 	ldrex	r3, [r3]
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80087c4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1e4      	bne.n	80087a0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3308      	adds	r3, #8
 80087dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	623b      	str	r3, [r7, #32]
   return(result);
 80087e6:	6a3a      	ldr	r2, [r7, #32]
 80087e8:	4b55      	ldr	r3, [pc, #340]	@ (8008940 <HAL_UART_IRQHandler+0x770>)
 80087ea:	4013      	ands	r3, r2
 80087ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3308      	adds	r3, #8
 80087f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80087fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80087fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e3      	bne.n	80087d6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2220      	movs	r2, #32
 8008812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	e853 3f00 	ldrex	r3, [r3]
 800882e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 0310 	bic.w	r3, r3, #16
 8008836:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008844:	61fb      	str	r3, [r7, #28]
 8008846:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008848:	69b9      	ldr	r1, [r7, #24]
 800884a:	69fa      	ldr	r2, [r7, #28]
 800884c:	e841 2300 	strex	r3, r2, [r1]
 8008850:	617b      	str	r3, [r7, #20]
   return(result);
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e4      	bne.n	8008822 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800885e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f88b 	bl	8008980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800886a:	e063      	b.n	8008934 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800886c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008870:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00e      	beq.n	8008896 <HAL_UART_IRQHandler+0x6c6>
 8008878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800887c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d008      	beq.n	8008896 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800888c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f001 fb2a 	bl	8009ee8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008894:	e051      	b.n	800893a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800889a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d014      	beq.n	80088cc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80088a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d105      	bne.n	80088ba <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d008      	beq.n	80088cc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d03a      	beq.n	8008938 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3
    }
    return;
 80088ca:	e035      	b.n	8008938 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d009      	beq.n	80088ec <HAL_UART_IRQHandler+0x71c>
 80088d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 fad4 	bl	8009e92 <UART_EndTransmit_IT>
    return;
 80088ea:	e026      	b.n	800893a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <HAL_UART_IRQHandler+0x73c>
 80088f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 fb03 	bl	8009f10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800890a:	e016      	b.n	800893a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800890c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008910:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d010      	beq.n	800893a <HAL_UART_IRQHandler+0x76a>
 8008918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800891c:	2b00      	cmp	r3, #0
 800891e:	da0c      	bge.n	800893a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f001 faeb 	bl	8009efc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008926:	e008      	b.n	800893a <HAL_UART_IRQHandler+0x76a>
      return;
 8008928:	bf00      	nop
 800892a:	e006      	b.n	800893a <HAL_UART_IRQHandler+0x76a>
    return;
 800892c:	bf00      	nop
 800892e:	e004      	b.n	800893a <HAL_UART_IRQHandler+0x76a>
      return;
 8008930:	bf00      	nop
 8008932:	e002      	b.n	800893a <HAL_UART_IRQHandler+0x76a>
      return;
 8008934:	bf00      	nop
 8008936:	e000      	b.n	800893a <HAL_UART_IRQHandler+0x76a>
    return;
 8008938:	bf00      	nop
  }
}
 800893a:	37e8      	adds	r7, #232	@ 0xe8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	effffffe 	.word	0xeffffffe

08008944 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800899c:	b092      	sub	sp, #72	@ 0x48
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	431a      	orrs	r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	431a      	orrs	r2, r3
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	4313      	orrs	r3, r2
 80089be:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	4bbe      	ldr	r3, [pc, #760]	@ (8008cc0 <UART_SetConfig+0x328>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	6812      	ldr	r2, [r2, #0]
 80089ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089d0:	430b      	orrs	r3, r1
 80089d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4ab3      	ldr	r2, [pc, #716]	@ (8008cc4 <UART_SetConfig+0x32c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d004      	beq.n	8008a04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a00:	4313      	orrs	r3, r2
 8008a02:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689a      	ldr	r2, [r3, #8]
 8008a0a:	4baf      	ldr	r3, [pc, #700]	@ (8008cc8 <UART_SetConfig+0x330>)
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	6812      	ldr	r2, [r2, #0]
 8008a12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a14:	430b      	orrs	r3, r1
 8008a16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1e:	f023 010f 	bic.w	r1, r3, #15
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4aa6      	ldr	r2, [pc, #664]	@ (8008ccc <UART_SetConfig+0x334>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d177      	bne.n	8008b28 <UART_SetConfig+0x190>
 8008a38:	4ba5      	ldr	r3, [pc, #660]	@ (8008cd0 <UART_SetConfig+0x338>)
 8008a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a40:	2b28      	cmp	r3, #40	@ 0x28
 8008a42:	d86d      	bhi.n	8008b20 <UART_SetConfig+0x188>
 8008a44:	a201      	add	r2, pc, #4	@ (adr r2, 8008a4c <UART_SetConfig+0xb4>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008af1 	.word	0x08008af1
 8008a50:	08008b21 	.word	0x08008b21
 8008a54:	08008b21 	.word	0x08008b21
 8008a58:	08008b21 	.word	0x08008b21
 8008a5c:	08008b21 	.word	0x08008b21
 8008a60:	08008b21 	.word	0x08008b21
 8008a64:	08008b21 	.word	0x08008b21
 8008a68:	08008b21 	.word	0x08008b21
 8008a6c:	08008af9 	.word	0x08008af9
 8008a70:	08008b21 	.word	0x08008b21
 8008a74:	08008b21 	.word	0x08008b21
 8008a78:	08008b21 	.word	0x08008b21
 8008a7c:	08008b21 	.word	0x08008b21
 8008a80:	08008b21 	.word	0x08008b21
 8008a84:	08008b21 	.word	0x08008b21
 8008a88:	08008b21 	.word	0x08008b21
 8008a8c:	08008b01 	.word	0x08008b01
 8008a90:	08008b21 	.word	0x08008b21
 8008a94:	08008b21 	.word	0x08008b21
 8008a98:	08008b21 	.word	0x08008b21
 8008a9c:	08008b21 	.word	0x08008b21
 8008aa0:	08008b21 	.word	0x08008b21
 8008aa4:	08008b21 	.word	0x08008b21
 8008aa8:	08008b21 	.word	0x08008b21
 8008aac:	08008b09 	.word	0x08008b09
 8008ab0:	08008b21 	.word	0x08008b21
 8008ab4:	08008b21 	.word	0x08008b21
 8008ab8:	08008b21 	.word	0x08008b21
 8008abc:	08008b21 	.word	0x08008b21
 8008ac0:	08008b21 	.word	0x08008b21
 8008ac4:	08008b21 	.word	0x08008b21
 8008ac8:	08008b21 	.word	0x08008b21
 8008acc:	08008b11 	.word	0x08008b11
 8008ad0:	08008b21 	.word	0x08008b21
 8008ad4:	08008b21 	.word	0x08008b21
 8008ad8:	08008b21 	.word	0x08008b21
 8008adc:	08008b21 	.word	0x08008b21
 8008ae0:	08008b21 	.word	0x08008b21
 8008ae4:	08008b21 	.word	0x08008b21
 8008ae8:	08008b21 	.word	0x08008b21
 8008aec:	08008b19 	.word	0x08008b19
 8008af0:	2301      	movs	r3, #1
 8008af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008af6:	e326      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008af8:	2304      	movs	r3, #4
 8008afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afe:	e322      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b00:	2308      	movs	r3, #8
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b06:	e31e      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b08:	2310      	movs	r3, #16
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b0e:	e31a      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b10:	2320      	movs	r3, #32
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b16:	e316      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b18:	2340      	movs	r3, #64	@ 0x40
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1e:	e312      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b20:	2380      	movs	r3, #128	@ 0x80
 8008b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b26:	e30e      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a69      	ldr	r2, [pc, #420]	@ (8008cd4 <UART_SetConfig+0x33c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d130      	bne.n	8008b94 <UART_SetConfig+0x1fc>
 8008b32:	4b67      	ldr	r3, [pc, #412]	@ (8008cd0 <UART_SetConfig+0x338>)
 8008b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	2b05      	cmp	r3, #5
 8008b3c:	d826      	bhi.n	8008b8c <UART_SetConfig+0x1f4>
 8008b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b44 <UART_SetConfig+0x1ac>)
 8008b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b44:	08008b5d 	.word	0x08008b5d
 8008b48:	08008b65 	.word	0x08008b65
 8008b4c:	08008b6d 	.word	0x08008b6d
 8008b50:	08008b75 	.word	0x08008b75
 8008b54:	08008b7d 	.word	0x08008b7d
 8008b58:	08008b85 	.word	0x08008b85
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b62:	e2f0      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b64:	2304      	movs	r3, #4
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6a:	e2ec      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b6c:	2308      	movs	r3, #8
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b72:	e2e8      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b74:	2310      	movs	r3, #16
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7a:	e2e4      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b7c:	2320      	movs	r3, #32
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b82:	e2e0      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b84:	2340      	movs	r3, #64	@ 0x40
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8a:	e2dc      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b8c:	2380      	movs	r3, #128	@ 0x80
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b92:	e2d8      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a4f      	ldr	r2, [pc, #316]	@ (8008cd8 <UART_SetConfig+0x340>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d130      	bne.n	8008c00 <UART_SetConfig+0x268>
 8008b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8008cd0 <UART_SetConfig+0x338>)
 8008ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ba2:	f003 0307 	and.w	r3, r3, #7
 8008ba6:	2b05      	cmp	r3, #5
 8008ba8:	d826      	bhi.n	8008bf8 <UART_SetConfig+0x260>
 8008baa:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb0 <UART_SetConfig+0x218>)
 8008bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb0:	08008bc9 	.word	0x08008bc9
 8008bb4:	08008bd1 	.word	0x08008bd1
 8008bb8:	08008bd9 	.word	0x08008bd9
 8008bbc:	08008be1 	.word	0x08008be1
 8008bc0:	08008be9 	.word	0x08008be9
 8008bc4:	08008bf1 	.word	0x08008bf1
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bce:	e2ba      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008bd0:	2304      	movs	r3, #4
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e2b6      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008bd8:	2308      	movs	r3, #8
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e2b2      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008be0:	2310      	movs	r3, #16
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be6:	e2ae      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008be8:	2320      	movs	r3, #32
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bee:	e2aa      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008bf0:	2340      	movs	r3, #64	@ 0x40
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e2a6      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008bf8:	2380      	movs	r3, #128	@ 0x80
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfe:	e2a2      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a35      	ldr	r2, [pc, #212]	@ (8008cdc <UART_SetConfig+0x344>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d130      	bne.n	8008c6c <UART_SetConfig+0x2d4>
 8008c0a:	4b31      	ldr	r3, [pc, #196]	@ (8008cd0 <UART_SetConfig+0x338>)
 8008c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c0e:	f003 0307 	and.w	r3, r3, #7
 8008c12:	2b05      	cmp	r3, #5
 8008c14:	d826      	bhi.n	8008c64 <UART_SetConfig+0x2cc>
 8008c16:	a201      	add	r2, pc, #4	@ (adr r2, 8008c1c <UART_SetConfig+0x284>)
 8008c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1c:	08008c35 	.word	0x08008c35
 8008c20:	08008c3d 	.word	0x08008c3d
 8008c24:	08008c45 	.word	0x08008c45
 8008c28:	08008c4d 	.word	0x08008c4d
 8008c2c:	08008c55 	.word	0x08008c55
 8008c30:	08008c5d 	.word	0x08008c5d
 8008c34:	2300      	movs	r3, #0
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3a:	e284      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008c3c:	2304      	movs	r3, #4
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c42:	e280      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008c44:	2308      	movs	r3, #8
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4a:	e27c      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008c4c:	2310      	movs	r3, #16
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c52:	e278      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008c54:	2320      	movs	r3, #32
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5a:	e274      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008c5c:	2340      	movs	r3, #64	@ 0x40
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e270      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008c64:	2380      	movs	r3, #128	@ 0x80
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6a:	e26c      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a1b      	ldr	r2, [pc, #108]	@ (8008ce0 <UART_SetConfig+0x348>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d142      	bne.n	8008cfc <UART_SetConfig+0x364>
 8008c76:	4b16      	ldr	r3, [pc, #88]	@ (8008cd0 <UART_SetConfig+0x338>)
 8008c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	2b05      	cmp	r3, #5
 8008c80:	d838      	bhi.n	8008cf4 <UART_SetConfig+0x35c>
 8008c82:	a201      	add	r2, pc, #4	@ (adr r2, 8008c88 <UART_SetConfig+0x2f0>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008ca1 	.word	0x08008ca1
 8008c8c:	08008ca9 	.word	0x08008ca9
 8008c90:	08008cb1 	.word	0x08008cb1
 8008c94:	08008cb9 	.word	0x08008cb9
 8008c98:	08008ce5 	.word	0x08008ce5
 8008c9c:	08008ced 	.word	0x08008ced
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca6:	e24e      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008ca8:	2304      	movs	r3, #4
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cae:	e24a      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008cb0:	2308      	movs	r3, #8
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e246      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008cb8:	2310      	movs	r3, #16
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cbe:	e242      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008cc0:	cfff69f3 	.word	0xcfff69f3
 8008cc4:	58000c00 	.word	0x58000c00
 8008cc8:	11fff4ff 	.word	0x11fff4ff
 8008ccc:	40011000 	.word	0x40011000
 8008cd0:	58024400 	.word	0x58024400
 8008cd4:	40004400 	.word	0x40004400
 8008cd8:	40004800 	.word	0x40004800
 8008cdc:	40004c00 	.word	0x40004c00
 8008ce0:	40005000 	.word	0x40005000
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e22c      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008cec:	2340      	movs	r3, #64	@ 0x40
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e228      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008cf4:	2380      	movs	r3, #128	@ 0x80
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e224      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4ab1      	ldr	r2, [pc, #708]	@ (8008fc8 <UART_SetConfig+0x630>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d176      	bne.n	8008df4 <UART_SetConfig+0x45c>
 8008d06:	4bb1      	ldr	r3, [pc, #708]	@ (8008fcc <UART_SetConfig+0x634>)
 8008d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d0e:	2b28      	cmp	r3, #40	@ 0x28
 8008d10:	d86c      	bhi.n	8008dec <UART_SetConfig+0x454>
 8008d12:	a201      	add	r2, pc, #4	@ (adr r2, 8008d18 <UART_SetConfig+0x380>)
 8008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d18:	08008dbd 	.word	0x08008dbd
 8008d1c:	08008ded 	.word	0x08008ded
 8008d20:	08008ded 	.word	0x08008ded
 8008d24:	08008ded 	.word	0x08008ded
 8008d28:	08008ded 	.word	0x08008ded
 8008d2c:	08008ded 	.word	0x08008ded
 8008d30:	08008ded 	.word	0x08008ded
 8008d34:	08008ded 	.word	0x08008ded
 8008d38:	08008dc5 	.word	0x08008dc5
 8008d3c:	08008ded 	.word	0x08008ded
 8008d40:	08008ded 	.word	0x08008ded
 8008d44:	08008ded 	.word	0x08008ded
 8008d48:	08008ded 	.word	0x08008ded
 8008d4c:	08008ded 	.word	0x08008ded
 8008d50:	08008ded 	.word	0x08008ded
 8008d54:	08008ded 	.word	0x08008ded
 8008d58:	08008dcd 	.word	0x08008dcd
 8008d5c:	08008ded 	.word	0x08008ded
 8008d60:	08008ded 	.word	0x08008ded
 8008d64:	08008ded 	.word	0x08008ded
 8008d68:	08008ded 	.word	0x08008ded
 8008d6c:	08008ded 	.word	0x08008ded
 8008d70:	08008ded 	.word	0x08008ded
 8008d74:	08008ded 	.word	0x08008ded
 8008d78:	08008dd5 	.word	0x08008dd5
 8008d7c:	08008ded 	.word	0x08008ded
 8008d80:	08008ded 	.word	0x08008ded
 8008d84:	08008ded 	.word	0x08008ded
 8008d88:	08008ded 	.word	0x08008ded
 8008d8c:	08008ded 	.word	0x08008ded
 8008d90:	08008ded 	.word	0x08008ded
 8008d94:	08008ded 	.word	0x08008ded
 8008d98:	08008ddd 	.word	0x08008ddd
 8008d9c:	08008ded 	.word	0x08008ded
 8008da0:	08008ded 	.word	0x08008ded
 8008da4:	08008ded 	.word	0x08008ded
 8008da8:	08008ded 	.word	0x08008ded
 8008dac:	08008ded 	.word	0x08008ded
 8008db0:	08008ded 	.word	0x08008ded
 8008db4:	08008ded 	.word	0x08008ded
 8008db8:	08008de5 	.word	0x08008de5
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc2:	e1c0      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008dc4:	2304      	movs	r3, #4
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dca:	e1bc      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008dcc:	2308      	movs	r3, #8
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd2:	e1b8      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008dd4:	2310      	movs	r3, #16
 8008dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dda:	e1b4      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008ddc:	2320      	movs	r3, #32
 8008dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de2:	e1b0      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008de4:	2340      	movs	r3, #64	@ 0x40
 8008de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dea:	e1ac      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008dec:	2380      	movs	r3, #128	@ 0x80
 8008dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df2:	e1a8      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a75      	ldr	r2, [pc, #468]	@ (8008fd0 <UART_SetConfig+0x638>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d130      	bne.n	8008e60 <UART_SetConfig+0x4c8>
 8008dfe:	4b73      	ldr	r3, [pc, #460]	@ (8008fcc <UART_SetConfig+0x634>)
 8008e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	2b05      	cmp	r3, #5
 8008e08:	d826      	bhi.n	8008e58 <UART_SetConfig+0x4c0>
 8008e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e10 <UART_SetConfig+0x478>)
 8008e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e10:	08008e29 	.word	0x08008e29
 8008e14:	08008e31 	.word	0x08008e31
 8008e18:	08008e39 	.word	0x08008e39
 8008e1c:	08008e41 	.word	0x08008e41
 8008e20:	08008e49 	.word	0x08008e49
 8008e24:	08008e51 	.word	0x08008e51
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2e:	e18a      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008e30:	2304      	movs	r3, #4
 8008e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e36:	e186      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008e38:	2308      	movs	r3, #8
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3e:	e182      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008e40:	2310      	movs	r3, #16
 8008e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e46:	e17e      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008e48:	2320      	movs	r3, #32
 8008e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4e:	e17a      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008e50:	2340      	movs	r3, #64	@ 0x40
 8008e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e56:	e176      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008e58:	2380      	movs	r3, #128	@ 0x80
 8008e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5e:	e172      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a5b      	ldr	r2, [pc, #364]	@ (8008fd4 <UART_SetConfig+0x63c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d130      	bne.n	8008ecc <UART_SetConfig+0x534>
 8008e6a:	4b58      	ldr	r3, [pc, #352]	@ (8008fcc <UART_SetConfig+0x634>)
 8008e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e6e:	f003 0307 	and.w	r3, r3, #7
 8008e72:	2b05      	cmp	r3, #5
 8008e74:	d826      	bhi.n	8008ec4 <UART_SetConfig+0x52c>
 8008e76:	a201      	add	r2, pc, #4	@ (adr r2, 8008e7c <UART_SetConfig+0x4e4>)
 8008e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7c:	08008e95 	.word	0x08008e95
 8008e80:	08008e9d 	.word	0x08008e9d
 8008e84:	08008ea5 	.word	0x08008ea5
 8008e88:	08008ead 	.word	0x08008ead
 8008e8c:	08008eb5 	.word	0x08008eb5
 8008e90:	08008ebd 	.word	0x08008ebd
 8008e94:	2300      	movs	r3, #0
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9a:	e154      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008e9c:	2304      	movs	r3, #4
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea2:	e150      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008ea4:	2308      	movs	r3, #8
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eaa:	e14c      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008eac:	2310      	movs	r3, #16
 8008eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb2:	e148      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008eb4:	2320      	movs	r3, #32
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eba:	e144      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008ebc:	2340      	movs	r3, #64	@ 0x40
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec2:	e140      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008ec4:	2380      	movs	r3, #128	@ 0x80
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eca:	e13c      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a41      	ldr	r2, [pc, #260]	@ (8008fd8 <UART_SetConfig+0x640>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	f040 8082 	bne.w	8008fdc <UART_SetConfig+0x644>
 8008ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8008fcc <UART_SetConfig+0x634>)
 8008eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008edc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ee0:	2b28      	cmp	r3, #40	@ 0x28
 8008ee2:	d86d      	bhi.n	8008fc0 <UART_SetConfig+0x628>
 8008ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8008eec <UART_SetConfig+0x554>)
 8008ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eea:	bf00      	nop
 8008eec:	08008f91 	.word	0x08008f91
 8008ef0:	08008fc1 	.word	0x08008fc1
 8008ef4:	08008fc1 	.word	0x08008fc1
 8008ef8:	08008fc1 	.word	0x08008fc1
 8008efc:	08008fc1 	.word	0x08008fc1
 8008f00:	08008fc1 	.word	0x08008fc1
 8008f04:	08008fc1 	.word	0x08008fc1
 8008f08:	08008fc1 	.word	0x08008fc1
 8008f0c:	08008f99 	.word	0x08008f99
 8008f10:	08008fc1 	.word	0x08008fc1
 8008f14:	08008fc1 	.word	0x08008fc1
 8008f18:	08008fc1 	.word	0x08008fc1
 8008f1c:	08008fc1 	.word	0x08008fc1
 8008f20:	08008fc1 	.word	0x08008fc1
 8008f24:	08008fc1 	.word	0x08008fc1
 8008f28:	08008fc1 	.word	0x08008fc1
 8008f2c:	08008fa1 	.word	0x08008fa1
 8008f30:	08008fc1 	.word	0x08008fc1
 8008f34:	08008fc1 	.word	0x08008fc1
 8008f38:	08008fc1 	.word	0x08008fc1
 8008f3c:	08008fc1 	.word	0x08008fc1
 8008f40:	08008fc1 	.word	0x08008fc1
 8008f44:	08008fc1 	.word	0x08008fc1
 8008f48:	08008fc1 	.word	0x08008fc1
 8008f4c:	08008fa9 	.word	0x08008fa9
 8008f50:	08008fc1 	.word	0x08008fc1
 8008f54:	08008fc1 	.word	0x08008fc1
 8008f58:	08008fc1 	.word	0x08008fc1
 8008f5c:	08008fc1 	.word	0x08008fc1
 8008f60:	08008fc1 	.word	0x08008fc1
 8008f64:	08008fc1 	.word	0x08008fc1
 8008f68:	08008fc1 	.word	0x08008fc1
 8008f6c:	08008fb1 	.word	0x08008fb1
 8008f70:	08008fc1 	.word	0x08008fc1
 8008f74:	08008fc1 	.word	0x08008fc1
 8008f78:	08008fc1 	.word	0x08008fc1
 8008f7c:	08008fc1 	.word	0x08008fc1
 8008f80:	08008fc1 	.word	0x08008fc1
 8008f84:	08008fc1 	.word	0x08008fc1
 8008f88:	08008fc1 	.word	0x08008fc1
 8008f8c:	08008fb9 	.word	0x08008fb9
 8008f90:	2301      	movs	r3, #1
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f96:	e0d6      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008f98:	2304      	movs	r3, #4
 8008f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9e:	e0d2      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008fa0:	2308      	movs	r3, #8
 8008fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa6:	e0ce      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008fa8:	2310      	movs	r3, #16
 8008faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fae:	e0ca      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008fb0:	2320      	movs	r3, #32
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb6:	e0c6      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008fb8:	2340      	movs	r3, #64	@ 0x40
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fbe:	e0c2      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008fc0:	2380      	movs	r3, #128	@ 0x80
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc6:	e0be      	b.n	8009146 <UART_SetConfig+0x7ae>
 8008fc8:	40011400 	.word	0x40011400
 8008fcc:	58024400 	.word	0x58024400
 8008fd0:	40007800 	.word	0x40007800
 8008fd4:	40007c00 	.word	0x40007c00
 8008fd8:	40011800 	.word	0x40011800
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4aad      	ldr	r2, [pc, #692]	@ (8009298 <UART_SetConfig+0x900>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d176      	bne.n	80090d4 <UART_SetConfig+0x73c>
 8008fe6:	4bad      	ldr	r3, [pc, #692]	@ (800929c <UART_SetConfig+0x904>)
 8008fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fee:	2b28      	cmp	r3, #40	@ 0x28
 8008ff0:	d86c      	bhi.n	80090cc <UART_SetConfig+0x734>
 8008ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff8 <UART_SetConfig+0x660>)
 8008ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff8:	0800909d 	.word	0x0800909d
 8008ffc:	080090cd 	.word	0x080090cd
 8009000:	080090cd 	.word	0x080090cd
 8009004:	080090cd 	.word	0x080090cd
 8009008:	080090cd 	.word	0x080090cd
 800900c:	080090cd 	.word	0x080090cd
 8009010:	080090cd 	.word	0x080090cd
 8009014:	080090cd 	.word	0x080090cd
 8009018:	080090a5 	.word	0x080090a5
 800901c:	080090cd 	.word	0x080090cd
 8009020:	080090cd 	.word	0x080090cd
 8009024:	080090cd 	.word	0x080090cd
 8009028:	080090cd 	.word	0x080090cd
 800902c:	080090cd 	.word	0x080090cd
 8009030:	080090cd 	.word	0x080090cd
 8009034:	080090cd 	.word	0x080090cd
 8009038:	080090ad 	.word	0x080090ad
 800903c:	080090cd 	.word	0x080090cd
 8009040:	080090cd 	.word	0x080090cd
 8009044:	080090cd 	.word	0x080090cd
 8009048:	080090cd 	.word	0x080090cd
 800904c:	080090cd 	.word	0x080090cd
 8009050:	080090cd 	.word	0x080090cd
 8009054:	080090cd 	.word	0x080090cd
 8009058:	080090b5 	.word	0x080090b5
 800905c:	080090cd 	.word	0x080090cd
 8009060:	080090cd 	.word	0x080090cd
 8009064:	080090cd 	.word	0x080090cd
 8009068:	080090cd 	.word	0x080090cd
 800906c:	080090cd 	.word	0x080090cd
 8009070:	080090cd 	.word	0x080090cd
 8009074:	080090cd 	.word	0x080090cd
 8009078:	080090bd 	.word	0x080090bd
 800907c:	080090cd 	.word	0x080090cd
 8009080:	080090cd 	.word	0x080090cd
 8009084:	080090cd 	.word	0x080090cd
 8009088:	080090cd 	.word	0x080090cd
 800908c:	080090cd 	.word	0x080090cd
 8009090:	080090cd 	.word	0x080090cd
 8009094:	080090cd 	.word	0x080090cd
 8009098:	080090c5 	.word	0x080090c5
 800909c:	2301      	movs	r3, #1
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a2:	e050      	b.n	8009146 <UART_SetConfig+0x7ae>
 80090a4:	2304      	movs	r3, #4
 80090a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090aa:	e04c      	b.n	8009146 <UART_SetConfig+0x7ae>
 80090ac:	2308      	movs	r3, #8
 80090ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b2:	e048      	b.n	8009146 <UART_SetConfig+0x7ae>
 80090b4:	2310      	movs	r3, #16
 80090b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ba:	e044      	b.n	8009146 <UART_SetConfig+0x7ae>
 80090bc:	2320      	movs	r3, #32
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c2:	e040      	b.n	8009146 <UART_SetConfig+0x7ae>
 80090c4:	2340      	movs	r3, #64	@ 0x40
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ca:	e03c      	b.n	8009146 <UART_SetConfig+0x7ae>
 80090cc:	2380      	movs	r3, #128	@ 0x80
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d2:	e038      	b.n	8009146 <UART_SetConfig+0x7ae>
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a71      	ldr	r2, [pc, #452]	@ (80092a0 <UART_SetConfig+0x908>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d130      	bne.n	8009140 <UART_SetConfig+0x7a8>
 80090de:	4b6f      	ldr	r3, [pc, #444]	@ (800929c <UART_SetConfig+0x904>)
 80090e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	2b05      	cmp	r3, #5
 80090e8:	d826      	bhi.n	8009138 <UART_SetConfig+0x7a0>
 80090ea:	a201      	add	r2, pc, #4	@ (adr r2, 80090f0 <UART_SetConfig+0x758>)
 80090ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f0:	08009109 	.word	0x08009109
 80090f4:	08009111 	.word	0x08009111
 80090f8:	08009119 	.word	0x08009119
 80090fc:	08009121 	.word	0x08009121
 8009100:	08009129 	.word	0x08009129
 8009104:	08009131 	.word	0x08009131
 8009108:	2302      	movs	r3, #2
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910e:	e01a      	b.n	8009146 <UART_SetConfig+0x7ae>
 8009110:	2304      	movs	r3, #4
 8009112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009116:	e016      	b.n	8009146 <UART_SetConfig+0x7ae>
 8009118:	2308      	movs	r3, #8
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911e:	e012      	b.n	8009146 <UART_SetConfig+0x7ae>
 8009120:	2310      	movs	r3, #16
 8009122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009126:	e00e      	b.n	8009146 <UART_SetConfig+0x7ae>
 8009128:	2320      	movs	r3, #32
 800912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912e:	e00a      	b.n	8009146 <UART_SetConfig+0x7ae>
 8009130:	2340      	movs	r3, #64	@ 0x40
 8009132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009136:	e006      	b.n	8009146 <UART_SetConfig+0x7ae>
 8009138:	2380      	movs	r3, #128	@ 0x80
 800913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913e:	e002      	b.n	8009146 <UART_SetConfig+0x7ae>
 8009140:	2380      	movs	r3, #128	@ 0x80
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a55      	ldr	r2, [pc, #340]	@ (80092a0 <UART_SetConfig+0x908>)
 800914c:	4293      	cmp	r3, r2
 800914e:	f040 80f8 	bne.w	8009342 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009152:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009156:	2b20      	cmp	r3, #32
 8009158:	dc46      	bgt.n	80091e8 <UART_SetConfig+0x850>
 800915a:	2b02      	cmp	r3, #2
 800915c:	db75      	blt.n	800924a <UART_SetConfig+0x8b2>
 800915e:	3b02      	subs	r3, #2
 8009160:	2b1e      	cmp	r3, #30
 8009162:	d872      	bhi.n	800924a <UART_SetConfig+0x8b2>
 8009164:	a201      	add	r2, pc, #4	@ (adr r2, 800916c <UART_SetConfig+0x7d4>)
 8009166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916a:	bf00      	nop
 800916c:	080091ef 	.word	0x080091ef
 8009170:	0800924b 	.word	0x0800924b
 8009174:	080091f7 	.word	0x080091f7
 8009178:	0800924b 	.word	0x0800924b
 800917c:	0800924b 	.word	0x0800924b
 8009180:	0800924b 	.word	0x0800924b
 8009184:	08009207 	.word	0x08009207
 8009188:	0800924b 	.word	0x0800924b
 800918c:	0800924b 	.word	0x0800924b
 8009190:	0800924b 	.word	0x0800924b
 8009194:	0800924b 	.word	0x0800924b
 8009198:	0800924b 	.word	0x0800924b
 800919c:	0800924b 	.word	0x0800924b
 80091a0:	0800924b 	.word	0x0800924b
 80091a4:	08009217 	.word	0x08009217
 80091a8:	0800924b 	.word	0x0800924b
 80091ac:	0800924b 	.word	0x0800924b
 80091b0:	0800924b 	.word	0x0800924b
 80091b4:	0800924b 	.word	0x0800924b
 80091b8:	0800924b 	.word	0x0800924b
 80091bc:	0800924b 	.word	0x0800924b
 80091c0:	0800924b 	.word	0x0800924b
 80091c4:	0800924b 	.word	0x0800924b
 80091c8:	0800924b 	.word	0x0800924b
 80091cc:	0800924b 	.word	0x0800924b
 80091d0:	0800924b 	.word	0x0800924b
 80091d4:	0800924b 	.word	0x0800924b
 80091d8:	0800924b 	.word	0x0800924b
 80091dc:	0800924b 	.word	0x0800924b
 80091e0:	0800924b 	.word	0x0800924b
 80091e4:	0800923d 	.word	0x0800923d
 80091e8:	2b40      	cmp	r3, #64	@ 0x40
 80091ea:	d02a      	beq.n	8009242 <UART_SetConfig+0x8aa>
 80091ec:	e02d      	b.n	800924a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80091ee:	f7fe f851 	bl	8007294 <HAL_RCCEx_GetD3PCLK1Freq>
 80091f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091f4:	e02f      	b.n	8009256 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe f860 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009204:	e027      	b.n	8009256 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009206:	f107 0318 	add.w	r3, r7, #24
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe f9ac 	bl	8007568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009214:	e01f      	b.n	8009256 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009216:	4b21      	ldr	r3, [pc, #132]	@ (800929c <UART_SetConfig+0x904>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0320 	and.w	r3, r3, #32
 800921e:	2b00      	cmp	r3, #0
 8009220:	d009      	beq.n	8009236 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009222:	4b1e      	ldr	r3, [pc, #120]	@ (800929c <UART_SetConfig+0x904>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	08db      	lsrs	r3, r3, #3
 8009228:	f003 0303 	and.w	r3, r3, #3
 800922c:	4a1d      	ldr	r2, [pc, #116]	@ (80092a4 <UART_SetConfig+0x90c>)
 800922e:	fa22 f303 	lsr.w	r3, r2, r3
 8009232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009234:	e00f      	b.n	8009256 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009236:	4b1b      	ldr	r3, [pc, #108]	@ (80092a4 <UART_SetConfig+0x90c>)
 8009238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800923a:	e00c      	b.n	8009256 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800923c:	4b1a      	ldr	r3, [pc, #104]	@ (80092a8 <UART_SetConfig+0x910>)
 800923e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009240:	e009      	b.n	8009256 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009248:	e005      	b.n	8009256 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009254:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 81ee 	beq.w	800963a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009262:	4a12      	ldr	r2, [pc, #72]	@ (80092ac <UART_SetConfig+0x914>)
 8009264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009268:	461a      	mov	r2, r3
 800926a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800926c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009270:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	685a      	ldr	r2, [r3, #4]
 8009276:	4613      	mov	r3, r2
 8009278:	005b      	lsls	r3, r3, #1
 800927a:	4413      	add	r3, r2
 800927c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800927e:	429a      	cmp	r2, r3
 8009280:	d305      	bcc.n	800928e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800928a:	429a      	cmp	r2, r3
 800928c:	d910      	bls.n	80092b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009294:	e1d1      	b.n	800963a <UART_SetConfig+0xca2>
 8009296:	bf00      	nop
 8009298:	40011c00 	.word	0x40011c00
 800929c:	58024400 	.word	0x58024400
 80092a0:	58000c00 	.word	0x58000c00
 80092a4:	03d09000 	.word	0x03d09000
 80092a8:	003d0900 	.word	0x003d0900
 80092ac:	0800ba90 	.word	0x0800ba90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b2:	2200      	movs	r2, #0
 80092b4:	60bb      	str	r3, [r7, #8]
 80092b6:	60fa      	str	r2, [r7, #12]
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092bc:	4ac0      	ldr	r2, [pc, #768]	@ (80095c0 <UART_SetConfig+0xc28>)
 80092be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	2200      	movs	r2, #0
 80092c6:	603b      	str	r3, [r7, #0]
 80092c8:	607a      	str	r2, [r7, #4]
 80092ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092d2:	f7f7 f80d 	bl	80002f0 <__aeabi_uldivmod>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	4610      	mov	r0, r2
 80092dc:	4619      	mov	r1, r3
 80092de:	f04f 0200 	mov.w	r2, #0
 80092e2:	f04f 0300 	mov.w	r3, #0
 80092e6:	020b      	lsls	r3, r1, #8
 80092e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092ec:	0202      	lsls	r2, r0, #8
 80092ee:	6979      	ldr	r1, [r7, #20]
 80092f0:	6849      	ldr	r1, [r1, #4]
 80092f2:	0849      	lsrs	r1, r1, #1
 80092f4:	2000      	movs	r0, #0
 80092f6:	460c      	mov	r4, r1
 80092f8:	4605      	mov	r5, r0
 80092fa:	eb12 0804 	adds.w	r8, r2, r4
 80092fe:	eb43 0905 	adc.w	r9, r3, r5
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	469a      	mov	sl, r3
 800930a:	4693      	mov	fp, r2
 800930c:	4652      	mov	r2, sl
 800930e:	465b      	mov	r3, fp
 8009310:	4640      	mov	r0, r8
 8009312:	4649      	mov	r1, r9
 8009314:	f7f6 ffec 	bl	80002f0 <__aeabi_uldivmod>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4613      	mov	r3, r2
 800931e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009322:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009326:	d308      	bcc.n	800933a <UART_SetConfig+0x9a2>
 8009328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800932e:	d204      	bcs.n	800933a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009336:	60da      	str	r2, [r3, #12]
 8009338:	e17f      	b.n	800963a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009340:	e17b      	b.n	800963a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	69db      	ldr	r3, [r3, #28]
 8009346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800934a:	f040 80bd 	bne.w	80094c8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800934e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009352:	2b20      	cmp	r3, #32
 8009354:	dc48      	bgt.n	80093e8 <UART_SetConfig+0xa50>
 8009356:	2b00      	cmp	r3, #0
 8009358:	db7b      	blt.n	8009452 <UART_SetConfig+0xaba>
 800935a:	2b20      	cmp	r3, #32
 800935c:	d879      	bhi.n	8009452 <UART_SetConfig+0xaba>
 800935e:	a201      	add	r2, pc, #4	@ (adr r2, 8009364 <UART_SetConfig+0x9cc>)
 8009360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009364:	080093ef 	.word	0x080093ef
 8009368:	080093f7 	.word	0x080093f7
 800936c:	08009453 	.word	0x08009453
 8009370:	08009453 	.word	0x08009453
 8009374:	080093ff 	.word	0x080093ff
 8009378:	08009453 	.word	0x08009453
 800937c:	08009453 	.word	0x08009453
 8009380:	08009453 	.word	0x08009453
 8009384:	0800940f 	.word	0x0800940f
 8009388:	08009453 	.word	0x08009453
 800938c:	08009453 	.word	0x08009453
 8009390:	08009453 	.word	0x08009453
 8009394:	08009453 	.word	0x08009453
 8009398:	08009453 	.word	0x08009453
 800939c:	08009453 	.word	0x08009453
 80093a0:	08009453 	.word	0x08009453
 80093a4:	0800941f 	.word	0x0800941f
 80093a8:	08009453 	.word	0x08009453
 80093ac:	08009453 	.word	0x08009453
 80093b0:	08009453 	.word	0x08009453
 80093b4:	08009453 	.word	0x08009453
 80093b8:	08009453 	.word	0x08009453
 80093bc:	08009453 	.word	0x08009453
 80093c0:	08009453 	.word	0x08009453
 80093c4:	08009453 	.word	0x08009453
 80093c8:	08009453 	.word	0x08009453
 80093cc:	08009453 	.word	0x08009453
 80093d0:	08009453 	.word	0x08009453
 80093d4:	08009453 	.word	0x08009453
 80093d8:	08009453 	.word	0x08009453
 80093dc:	08009453 	.word	0x08009453
 80093e0:	08009453 	.word	0x08009453
 80093e4:	08009445 	.word	0x08009445
 80093e8:	2b40      	cmp	r3, #64	@ 0x40
 80093ea:	d02e      	beq.n	800944a <UART_SetConfig+0xab2>
 80093ec:	e031      	b.n	8009452 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ee:	f7fc fd67 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 80093f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093f4:	e033      	b.n	800945e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093f6:	f7fc fd79 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 80093fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093fc:	e02f      	b.n	800945e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009402:	4618      	mov	r0, r3
 8009404:	f7fd ff5c 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800940c:	e027      	b.n	800945e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800940e:	f107 0318 	add.w	r3, r7, #24
 8009412:	4618      	mov	r0, r3
 8009414:	f7fe f8a8 	bl	8007568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800941c:	e01f      	b.n	800945e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800941e:	4b69      	ldr	r3, [pc, #420]	@ (80095c4 <UART_SetConfig+0xc2c>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0320 	and.w	r3, r3, #32
 8009426:	2b00      	cmp	r3, #0
 8009428:	d009      	beq.n	800943e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800942a:	4b66      	ldr	r3, [pc, #408]	@ (80095c4 <UART_SetConfig+0xc2c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	08db      	lsrs	r3, r3, #3
 8009430:	f003 0303 	and.w	r3, r3, #3
 8009434:	4a64      	ldr	r2, [pc, #400]	@ (80095c8 <UART_SetConfig+0xc30>)
 8009436:	fa22 f303 	lsr.w	r3, r2, r3
 800943a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800943c:	e00f      	b.n	800945e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800943e:	4b62      	ldr	r3, [pc, #392]	@ (80095c8 <UART_SetConfig+0xc30>)
 8009440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009442:	e00c      	b.n	800945e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009444:	4b61      	ldr	r3, [pc, #388]	@ (80095cc <UART_SetConfig+0xc34>)
 8009446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009448:	e009      	b.n	800945e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800944a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009450:	e005      	b.n	800945e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800945c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800945e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 80ea 	beq.w	800963a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946a:	4a55      	ldr	r2, [pc, #340]	@ (80095c0 <UART_SetConfig+0xc28>)
 800946c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009470:	461a      	mov	r2, r3
 8009472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009474:	fbb3 f3f2 	udiv	r3, r3, r2
 8009478:	005a      	lsls	r2, r3, #1
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	085b      	lsrs	r3, r3, #1
 8009480:	441a      	add	r2, r3
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	fbb2 f3f3 	udiv	r3, r2, r3
 800948a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800948c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948e:	2b0f      	cmp	r3, #15
 8009490:	d916      	bls.n	80094c0 <UART_SetConfig+0xb28>
 8009492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009498:	d212      	bcs.n	80094c0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800949a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949c:	b29b      	uxth	r3, r3
 800949e:	f023 030f 	bic.w	r3, r3, #15
 80094a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a6:	085b      	lsrs	r3, r3, #1
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80094b2:	4313      	orrs	r3, r2
 80094b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80094bc:	60da      	str	r2, [r3, #12]
 80094be:	e0bc      	b.n	800963a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80094c6:	e0b8      	b.n	800963a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094cc:	2b20      	cmp	r3, #32
 80094ce:	dc4b      	bgt.n	8009568 <UART_SetConfig+0xbd0>
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f2c0 8087 	blt.w	80095e4 <UART_SetConfig+0xc4c>
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	f200 8084 	bhi.w	80095e4 <UART_SetConfig+0xc4c>
 80094dc:	a201      	add	r2, pc, #4	@ (adr r2, 80094e4 <UART_SetConfig+0xb4c>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	0800956f 	.word	0x0800956f
 80094e8:	08009577 	.word	0x08009577
 80094ec:	080095e5 	.word	0x080095e5
 80094f0:	080095e5 	.word	0x080095e5
 80094f4:	0800957f 	.word	0x0800957f
 80094f8:	080095e5 	.word	0x080095e5
 80094fc:	080095e5 	.word	0x080095e5
 8009500:	080095e5 	.word	0x080095e5
 8009504:	0800958f 	.word	0x0800958f
 8009508:	080095e5 	.word	0x080095e5
 800950c:	080095e5 	.word	0x080095e5
 8009510:	080095e5 	.word	0x080095e5
 8009514:	080095e5 	.word	0x080095e5
 8009518:	080095e5 	.word	0x080095e5
 800951c:	080095e5 	.word	0x080095e5
 8009520:	080095e5 	.word	0x080095e5
 8009524:	0800959f 	.word	0x0800959f
 8009528:	080095e5 	.word	0x080095e5
 800952c:	080095e5 	.word	0x080095e5
 8009530:	080095e5 	.word	0x080095e5
 8009534:	080095e5 	.word	0x080095e5
 8009538:	080095e5 	.word	0x080095e5
 800953c:	080095e5 	.word	0x080095e5
 8009540:	080095e5 	.word	0x080095e5
 8009544:	080095e5 	.word	0x080095e5
 8009548:	080095e5 	.word	0x080095e5
 800954c:	080095e5 	.word	0x080095e5
 8009550:	080095e5 	.word	0x080095e5
 8009554:	080095e5 	.word	0x080095e5
 8009558:	080095e5 	.word	0x080095e5
 800955c:	080095e5 	.word	0x080095e5
 8009560:	080095e5 	.word	0x080095e5
 8009564:	080095d7 	.word	0x080095d7
 8009568:	2b40      	cmp	r3, #64	@ 0x40
 800956a:	d037      	beq.n	80095dc <UART_SetConfig+0xc44>
 800956c:	e03a      	b.n	80095e4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800956e:	f7fc fca7 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8009572:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009574:	e03c      	b.n	80095f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009576:	f7fc fcb9 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 800957a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800957c:	e038      	b.n	80095f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800957e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009582:	4618      	mov	r0, r3
 8009584:	f7fd fe9c 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800958c:	e030      	b.n	80095f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800958e:	f107 0318 	add.w	r3, r7, #24
 8009592:	4618      	mov	r0, r3
 8009594:	f7fd ffe8 	bl	8007568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800959c:	e028      	b.n	80095f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800959e:	4b09      	ldr	r3, [pc, #36]	@ (80095c4 <UART_SetConfig+0xc2c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 0320 	and.w	r3, r3, #32
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d012      	beq.n	80095d0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095aa:	4b06      	ldr	r3, [pc, #24]	@ (80095c4 <UART_SetConfig+0xc2c>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	08db      	lsrs	r3, r3, #3
 80095b0:	f003 0303 	and.w	r3, r3, #3
 80095b4:	4a04      	ldr	r2, [pc, #16]	@ (80095c8 <UART_SetConfig+0xc30>)
 80095b6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095bc:	e018      	b.n	80095f0 <UART_SetConfig+0xc58>
 80095be:	bf00      	nop
 80095c0:	0800ba90 	.word	0x0800ba90
 80095c4:	58024400 	.word	0x58024400
 80095c8:	03d09000 	.word	0x03d09000
 80095cc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80095d0:	4b24      	ldr	r3, [pc, #144]	@ (8009664 <UART_SetConfig+0xccc>)
 80095d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d4:	e00c      	b.n	80095f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095d6:	4b24      	ldr	r3, [pc, #144]	@ (8009668 <UART_SetConfig+0xcd0>)
 80095d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095da:	e009      	b.n	80095f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e2:	e005      	b.n	80095f0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80095e4:	2300      	movs	r3, #0
 80095e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095ee:	bf00      	nop
    }

    if (pclk != 0U)
 80095f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d021      	beq.n	800963a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095fa:	4a1c      	ldr	r2, [pc, #112]	@ (800966c <UART_SetConfig+0xcd4>)
 80095fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009600:	461a      	mov	r2, r3
 8009602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009604:	fbb3 f2f2 	udiv	r2, r3, r2
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	085b      	lsrs	r3, r3, #1
 800960e:	441a      	add	r2, r3
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	fbb2 f3f3 	udiv	r3, r2, r3
 8009618:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	2b0f      	cmp	r3, #15
 800961e:	d909      	bls.n	8009634 <UART_SetConfig+0xc9c>
 8009620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009626:	d205      	bcs.n	8009634 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962a:	b29a      	uxth	r2, r3
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	60da      	str	r2, [r3, #12]
 8009632:	e002      	b.n	800963a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2201      	movs	r2, #1
 800963e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2201      	movs	r2, #1
 8009646:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2200      	movs	r2, #0
 800964e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	2200      	movs	r2, #0
 8009654:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009656:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800965a:	4618      	mov	r0, r3
 800965c:	3748      	adds	r7, #72	@ 0x48
 800965e:	46bd      	mov	sp, r7
 8009660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009664:	03d09000 	.word	0x03d09000
 8009668:	003d0900 	.word	0x003d0900
 800966c:	0800ba90 	.word	0x0800ba90

08009670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967c:	f003 0308 	and.w	r3, r3, #8
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00a      	beq.n	800969a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c0:	f003 0302 	and.w	r3, r3, #2
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00a      	beq.n	80096de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e2:	f003 0304 	and.w	r3, r3, #4
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00a      	beq.n	8009700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	430a      	orrs	r2, r1
 80096fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00a      	beq.n	8009722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00a      	beq.n	8009744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	430a      	orrs	r2, r1
 8009742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800974c:	2b00      	cmp	r3, #0
 800974e:	d01a      	beq.n	8009786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	430a      	orrs	r2, r1
 8009764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800976a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800976e:	d10a      	bne.n	8009786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	430a      	orrs	r2, r1
 8009784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800978a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00a      	beq.n	80097a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	430a      	orrs	r2, r1
 80097a6:	605a      	str	r2, [r3, #4]
  }
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b098      	sub	sp, #96	@ 0x60
 80097b8:	af02      	add	r7, sp, #8
 80097ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097c4:	f7f7 fd44 	bl	8001250 <HAL_GetTick>
 80097c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0308 	and.w	r3, r3, #8
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d12f      	bne.n	8009838 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097e0:	2200      	movs	r2, #0
 80097e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f88e 	bl	8009908 <UART_WaitOnFlagUntilTimeout>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d022      	beq.n	8009838 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fa:	e853 3f00 	ldrex	r3, [r3]
 80097fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009806:	653b      	str	r3, [r7, #80]	@ 0x50
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009810:	647b      	str	r3, [r7, #68]	@ 0x44
 8009812:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009816:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800981e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e6      	bne.n	80097f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2220      	movs	r2, #32
 8009828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009834:	2303      	movs	r3, #3
 8009836:	e063      	b.n	8009900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0304 	and.w	r3, r3, #4
 8009842:	2b04      	cmp	r3, #4
 8009844:	d149      	bne.n	80098da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009846:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800984e:	2200      	movs	r2, #0
 8009850:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f857 	bl	8009908 <UART_WaitOnFlagUntilTimeout>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d03c      	beq.n	80098da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009868:	e853 3f00 	ldrex	r3, [r3]
 800986c:	623b      	str	r3, [r7, #32]
   return(result);
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800987e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009880:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009886:	e841 2300 	strex	r3, r2, [r1]
 800988a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800988c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1e6      	bne.n	8009860 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3308      	adds	r3, #8
 8009898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f023 0301 	bic.w	r3, r3, #1
 80098a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3308      	adds	r3, #8
 80098b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098b2:	61fa      	str	r2, [r7, #28]
 80098b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b6:	69b9      	ldr	r1, [r7, #24]
 80098b8:	69fa      	ldr	r2, [r7, #28]
 80098ba:	e841 2300 	strex	r3, r2, [r1]
 80098be:	617b      	str	r3, [r7, #20]
   return(result);
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1e5      	bne.n	8009892 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2220      	movs	r2, #32
 80098ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e012      	b.n	8009900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2220      	movs	r2, #32
 80098de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2220      	movs	r2, #32
 80098e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3758      	adds	r7, #88	@ 0x58
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	603b      	str	r3, [r7, #0]
 8009914:	4613      	mov	r3, r2
 8009916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009918:	e04f      	b.n	80099ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009920:	d04b      	beq.n	80099ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009922:	f7f7 fc95 	bl	8001250 <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	69ba      	ldr	r2, [r7, #24]
 800992e:	429a      	cmp	r2, r3
 8009930:	d302      	bcc.n	8009938 <UART_WaitOnFlagUntilTimeout+0x30>
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e04e      	b.n	80099da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 0304 	and.w	r3, r3, #4
 8009946:	2b00      	cmp	r3, #0
 8009948:	d037      	beq.n	80099ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	2b80      	cmp	r3, #128	@ 0x80
 800994e:	d034      	beq.n	80099ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b40      	cmp	r3, #64	@ 0x40
 8009954:	d031      	beq.n	80099ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	f003 0308 	and.w	r3, r3, #8
 8009960:	2b08      	cmp	r3, #8
 8009962:	d110      	bne.n	8009986 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2208      	movs	r2, #8
 800996a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 f921 	bl	8009bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2208      	movs	r2, #8
 8009976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e029      	b.n	80099da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009990:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009994:	d111      	bne.n	80099ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800999e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 f907 	bl	8009bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2220      	movs	r2, #32
 80099aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e00f      	b.n	80099da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	69da      	ldr	r2, [r3, #28]
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	4013      	ands	r3, r2
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	bf0c      	ite	eq
 80099ca:	2301      	moveq	r3, #1
 80099cc:	2300      	movne	r3, #0
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	461a      	mov	r2, r3
 80099d2:	79fb      	ldrb	r3, [r7, #7]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d0a0      	beq.n	800991a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
	...

080099e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b096      	sub	sp, #88	@ 0x58
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	4613      	mov	r3, r2
 80099f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	88fa      	ldrh	r2, [r7, #6]
 80099fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2222      	movs	r2, #34	@ 0x22
 8009a0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d02d      	beq.n	8009a76 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a20:	4a40      	ldr	r2, [pc, #256]	@ (8009b24 <UART_Start_Receive_DMA+0x140>)
 8009a22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8009b28 <UART_Start_Receive_DMA+0x144>)
 8009a2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a34:	4a3d      	ldr	r2, [pc, #244]	@ (8009b2c <UART_Start_Receive_DMA+0x148>)
 8009a36:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a3e:	2200      	movs	r2, #0
 8009a40:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3324      	adds	r3, #36	@ 0x24
 8009a4e:	4619      	mov	r1, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a54:	461a      	mov	r2, r3
 8009a56:	88fb      	ldrh	r3, [r7, #6]
 8009a58:	f7f8 fbd2 	bl	8002200 <HAL_DMA_Start_IT>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d009      	beq.n	8009a76 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2210      	movs	r2, #16
 8009a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e051      	b.n	8009b1a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d018      	beq.n	8009ab0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a86:	e853 3f00 	ldrex	r3, [r3]
 8009a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a92:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	461a      	mov	r2, r3
 8009a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a9e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009aa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009aa4:	e841 2300 	strex	r3, r2, [r1]
 8009aa8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1e6      	bne.n	8009a7e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aba:	e853 3f00 	ldrex	r3, [r3]
 8009abe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3308      	adds	r3, #8
 8009ace:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ad0:	637a      	str	r2, [r7, #52]	@ 0x34
 8009ad2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ad6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e5      	bne.n	8009ab0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3308      	adds	r3, #8
 8009aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	613b      	str	r3, [r7, #16]
   return(result);
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3308      	adds	r3, #8
 8009b02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b04:	623a      	str	r2, [r7, #32]
 8009b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b08:	69f9      	ldr	r1, [r7, #28]
 8009b0a:	6a3a      	ldr	r2, [r7, #32]
 8009b0c:	e841 2300 	strex	r3, r2, [r1]
 8009b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e5      	bne.n	8009ae4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3758      	adds	r7, #88	@ 0x58
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	08009c81 	.word	0x08009c81
 8009b28:	08009da9 	.word	0x08009da9
 8009b2c:	08009de7 	.word	0x08009de7

08009b30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b08f      	sub	sp, #60	@ 0x3c
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b58:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e6      	bne.n	8009b38 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3308      	adds	r3, #8
 8009b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3308      	adds	r3, #8
 8009b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b8a:	61ba      	str	r2, [r7, #24]
 8009b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8e:	6979      	ldr	r1, [r7, #20]
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	e841 2300 	strex	r3, r2, [r1]
 8009b96:	613b      	str	r3, [r7, #16]
   return(result);
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1e5      	bne.n	8009b6a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2220      	movs	r2, #32
 8009ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009ba6:	bf00      	nop
 8009ba8:	373c      	adds	r7, #60	@ 0x3c
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
	...

08009bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b095      	sub	sp, #84	@ 0x54
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc4:	e853 3f00 	ldrex	r3, [r3]
 8009bc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bda:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009be0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e6      	bne.n	8009bbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	e853 3f00 	ldrex	r3, [r3]
 8009bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bfe:	69fa      	ldr	r2, [r7, #28]
 8009c00:	4b1e      	ldr	r3, [pc, #120]	@ (8009c7c <UART_EndRxTransfer+0xc8>)
 8009c02:	4013      	ands	r3, r2
 8009c04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3308      	adds	r3, #8
 8009c0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c16:	e841 2300 	strex	r3, r2, [r1]
 8009c1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1e5      	bne.n	8009bee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d118      	bne.n	8009c5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f023 0310 	bic.w	r3, r3, #16
 8009c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	461a      	mov	r2, r3
 8009c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c48:	61bb      	str	r3, [r7, #24]
 8009c4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	6979      	ldr	r1, [r7, #20]
 8009c4e:	69ba      	ldr	r2, [r7, #24]
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	613b      	str	r3, [r7, #16]
   return(result);
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e6      	bne.n	8009c2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2220      	movs	r2, #32
 8009c60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c70:	bf00      	nop
 8009c72:	3754      	adds	r7, #84	@ 0x54
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	effffffe 	.word	0xeffffffe

08009c80 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b09c      	sub	sp, #112	@ 0x70
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c96:	d071      	beq.n	8009d7c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ca8:	e853 3f00 	ldrex	r3, [r3]
 8009cac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009cc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009cc6:	e841 2300 	strex	r3, r2, [r1]
 8009cca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1e6      	bne.n	8009ca0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3308      	adds	r3, #8
 8009cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce4:	f023 0301 	bic.w	r3, r3, #1
 8009ce8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3308      	adds	r3, #8
 8009cf0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009cf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8009cf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cfa:	e841 2300 	strex	r3, r2, [r1]
 8009cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1e5      	bne.n	8009cd2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3308      	adds	r3, #8
 8009d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d10:	e853 3f00 	ldrex	r3, [r3]
 8009d14:	623b      	str	r3, [r7, #32]
   return(result);
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3308      	adds	r3, #8
 8009d24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009d26:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e5      	bne.n	8009d06 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d118      	bne.n	8009d7c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	e853 3f00 	ldrex	r3, [r3]
 8009d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f023 0310 	bic.w	r3, r3, #16
 8009d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	461a      	mov	r2, r3
 8009d66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d68:	61fb      	str	r3, [r7, #28]
 8009d6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6c:	69b9      	ldr	r1, [r7, #24]
 8009d6e:	69fa      	ldr	r2, [r7, #28]
 8009d70:	e841 2300 	strex	r3, r2, [r1]
 8009d74:	617b      	str	r3, [r7, #20]
   return(result);
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1e6      	bne.n	8009d4a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d7e:	2200      	movs	r2, #0
 8009d80:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d107      	bne.n	8009d9a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d90:	4619      	mov	r1, r3
 8009d92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009d94:	f7fe fdf4 	bl	8008980 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d98:	e002      	b.n	8009da0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009d9a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009d9c:	f7f6 ff48 	bl	8000c30 <HAL_UART_RxCpltCallback>
}
 8009da0:	bf00      	nop
 8009da2:	3770      	adds	r7, #112	@ 0x70
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2201      	movs	r2, #1
 8009dba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d109      	bne.n	8009dd8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009dca:	085b      	lsrs	r3, r3, #1
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	4619      	mov	r1, r3
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f7fe fdd5 	bl	8008980 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009dd6:	e002      	b.n	8009dde <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7fe fdbd 	bl	8008958 <HAL_UART_RxHalfCpltCallback>
}
 8009dde:	bf00      	nop
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b086      	sub	sp, #24
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dfa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e0e:	2b80      	cmp	r3, #128	@ 0x80
 8009e10:	d109      	bne.n	8009e26 <UART_DMAError+0x40>
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	2b21      	cmp	r3, #33	@ 0x21
 8009e16:	d106      	bne.n	8009e26 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009e20:	6978      	ldr	r0, [r7, #20]
 8009e22:	f7ff fe85 	bl	8009b30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e30:	2b40      	cmp	r3, #64	@ 0x40
 8009e32:	d109      	bne.n	8009e48 <UART_DMAError+0x62>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b22      	cmp	r3, #34	@ 0x22
 8009e38:	d106      	bne.n	8009e48 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009e42:	6978      	ldr	r0, [r7, #20]
 8009e44:	f7ff feb6 	bl	8009bb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e4e:	f043 0210 	orr.w	r2, r3, #16
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e58:	6978      	ldr	r0, [r7, #20]
 8009e5a:	f7fe fd87 	bl	800896c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e5e:	bf00      	nop
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f7fe fd71 	bl	800896c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e8a:	bf00      	nop
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b088      	sub	sp, #32
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	e853 3f00 	ldrex	r3, [r3]
 8009ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eae:	61fb      	str	r3, [r7, #28]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	61bb      	str	r3, [r7, #24]
 8009eba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	6979      	ldr	r1, [r7, #20]
 8009ebe:	69ba      	ldr	r2, [r7, #24]
 8009ec0:	e841 2300 	strex	r3, r2, [r1]
 8009ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1e6      	bne.n	8009e9a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7fe fd32 	bl	8008944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ee0:	bf00      	nop
 8009ee2:	3720      	adds	r7, #32
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d101      	bne.n	8009f3a <HAL_UARTEx_DisableFifoMode+0x16>
 8009f36:	2302      	movs	r3, #2
 8009f38:	e027      	b.n	8009f8a <HAL_UARTEx_DisableFifoMode+0x66>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2224      	movs	r2, #36	@ 0x24
 8009f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f022 0201 	bic.w	r2, r2, #1
 8009f60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d101      	bne.n	8009fae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009faa:	2302      	movs	r3, #2
 8009fac:	e02d      	b.n	800a00a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2224      	movs	r2, #36	@ 0x24
 8009fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f022 0201 	bic.w	r2, r2, #1
 8009fd4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	683a      	ldr	r2, [r7, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f850 	bl	800a090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a022:	2b01      	cmp	r3, #1
 800a024:	d101      	bne.n	800a02a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a026:	2302      	movs	r3, #2
 800a028:	e02d      	b.n	800a086 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2224      	movs	r2, #36	@ 0x24
 800a036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f022 0201 	bic.w	r2, r2, #1
 800a050:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f812 	bl	800a090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2220      	movs	r2, #32
 800a078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
	...

0800a090 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d108      	bne.n	800a0b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0b0:	e031      	b.n	800a116 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0b2:	2310      	movs	r3, #16
 800a0b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0b6:	2310      	movs	r3, #16
 800a0b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	0e5b      	lsrs	r3, r3, #25
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 0307 	and.w	r3, r3, #7
 800a0c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	0f5b      	lsrs	r3, r3, #29
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	f003 0307 	and.w	r3, r3, #7
 800a0d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0da:	7bbb      	ldrb	r3, [r7, #14]
 800a0dc:	7b3a      	ldrb	r2, [r7, #12]
 800a0de:	4911      	ldr	r1, [pc, #68]	@ (800a124 <UARTEx_SetNbDataToProcess+0x94>)
 800a0e0:	5c8a      	ldrb	r2, [r1, r2]
 800a0e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0e6:	7b3a      	ldrb	r2, [r7, #12]
 800a0e8:	490f      	ldr	r1, [pc, #60]	@ (800a128 <UARTEx_SetNbDataToProcess+0x98>)
 800a0ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	7b7a      	ldrb	r2, [r7, #13]
 800a0fc:	4909      	ldr	r1, [pc, #36]	@ (800a124 <UARTEx_SetNbDataToProcess+0x94>)
 800a0fe:	5c8a      	ldrb	r2, [r1, r2]
 800a100:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a104:	7b7a      	ldrb	r2, [r7, #13]
 800a106:	4908      	ldr	r1, [pc, #32]	@ (800a128 <UARTEx_SetNbDataToProcess+0x98>)
 800a108:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a10a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a10e:	b29a      	uxth	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a116:	bf00      	nop
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	0800baa8 	.word	0x0800baa8
 800a128:	0800bab0 	.word	0x0800bab0

0800a12c <arm_conv_f32>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	b08b      	sub	sp, #44	@ 0x2c
 800a132:	4299      	cmp	r1, r3
 800a134:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a136:	d205      	bcs.n	800a144 <arm_conv_f32+0x18>
 800a138:	4606      	mov	r6, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	4610      	mov	r0, r2
 800a13e:	4619      	mov	r1, r3
 800a140:	4632      	mov	r2, r6
 800a142:	4623      	mov	r3, r4
 800a144:	f103 4b80 	add.w	fp, r3, #1073741824	@ 0x40000000
 800a148:	3101      	adds	r1, #1
 800a14a:	1ac9      	subs	r1, r1, r3
 800a14c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a150:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800a154:	9101      	str	r1, [sp, #4]
 800a156:	1e59      	subs	r1, r3, #1
 800a158:	eb02 070b 	add.w	r7, r2, fp
 800a15c:	f000 8277 	beq.w	800a64e <arm_conv_f32+0x522>
 800a160:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 800a420 <arm_conv_f32+0x2f4>
 800a164:	f102 0904 	add.w	r9, r2, #4
 800a168:	46aa      	mov	sl, r5
 800a16a:	4680      	mov	r8, r0
 800a16c:	2401      	movs	r4, #1
 800a16e:	f014 0603 	ands.w	r6, r4, #3
 800a172:	d01b      	beq.n	800a1ac <arm_conv_f32+0x80>
 800a174:	ed92 7a00 	vldr	s14, [r2]
 800a178:	edd8 6a00 	vldr	s13, [r8]
 800a17c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a180:	3e01      	subs	r6, #1
 800a182:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a186:	d011      	beq.n	800a1ac <arm_conv_f32+0x80>
 800a188:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a18c:	edd8 6a01 	vldr	s13, [r8, #4]
 800a190:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a194:	2e01      	cmp	r6, #1
 800a196:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a19a:	d007      	beq.n	800a1ac <arm_conv_f32+0x80>
 800a19c:	ed98 7a02 	vldr	s14, [r8, #8]
 800a1a0:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a1a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a1a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1ac:	3401      	adds	r4, #1
 800a1ae:	42a3      	cmp	r3, r4
 800a1b0:	ecea 7a01 	vstmia	sl!, {s15}
 800a1b4:	464a      	mov	r2, r9
 800a1b6:	d03a      	beq.n	800a22e <arm_conv_f32+0x102>
 800a1b8:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 800a1bc:	f000 824c 	beq.w	800a658 <arm_conv_f32+0x52c>
 800a1c0:	f100 0210 	add.w	r2, r0, #16
 800a1c4:	ea4f 180e 	mov.w	r8, lr, lsl #4
 800a1c8:	eddf 7a95 	vldr	s15, [pc, #596]	@ 800a420 <arm_conv_f32+0x2f4>
 800a1cc:	eb02 0c08 	add.w	ip, r2, r8
 800a1d0:	f1a9 0610 	sub.w	r6, r9, #16
 800a1d4:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a1d8:	edd6 3a04 	vldr	s7, [r6, #16]
 800a1dc:	ed12 6a03 	vldr	s12, [r2, #-12]
 800a1e0:	ed96 4a03 	vldr	s8, [r6, #12]
 800a1e4:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a1e8:	edd6 4a02 	vldr	s9, [r6, #8]
 800a1ec:	ed52 5a01 	vldr	s11, [r2, #-4]
 800a1f0:	ed96 5a01 	vldr	s10, [r6, #4]
 800a1f4:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a1f8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a1fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a200:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800a204:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a208:	ee65 6a85 	vmul.f32	s13, s11, s10
 800a20c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a210:	3210      	adds	r2, #16
 800a212:	4594      	cmp	ip, r2
 800a214:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a218:	f1a6 0610 	sub.w	r6, r6, #16
 800a21c:	d1da      	bne.n	800a1d4 <arm_conv_f32+0xa8>
 800a21e:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 800a222:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800a226:	4480      	add	r8, r0
 800a228:	f109 0904 	add.w	r9, r9, #4
 800a22c:	e79f      	b.n	800a16e <arm_conv_f32+0x42>
 800a22e:	2b03      	cmp	r3, #3
 800a230:	445d      	add	r5, fp
 800a232:	f240 80e9 	bls.w	800a408 <arm_conv_f32+0x2dc>
 800a236:	9b01      	ldr	r3, [sp, #4]
 800a238:	089a      	lsrs	r2, r3, #2
 800a23a:	9202      	str	r2, [sp, #8]
 800a23c:	f000 8203 	beq.w	800a646 <arm_conv_f32+0x51a>
 800a240:	ea4f 0894 	mov.w	r8, r4, lsr #2
 800a244:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800a248:	0112      	lsls	r2, r2, #4
 800a24a:	f004 0603 	and.w	r6, r4, #3
 800a24e:	9203      	str	r2, [sp, #12]
 800a250:	f1a3 0a10 	sub.w	sl, r3, #16
 800a254:	f1a3 020c 	sub.w	r2, r3, #12
 800a258:	3b08      	subs	r3, #8
 800a25a:	9204      	str	r2, [sp, #16]
 800a25c:	9305      	str	r3, [sp, #20]
 800a25e:	f106 39ff 	add.w	r9, r6, #4294967295
 800a262:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800a266:	9a03      	ldr	r2, [sp, #12]
 800a268:	f100 0c1c 	add.w	ip, r0, #28
 800a26c:	e9cd 4106 	strd	r4, r1, [sp, #24]
 800a270:	464c      	mov	r4, r9
 800a272:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 800a276:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800a27a:	f1a7 0310 	sub.w	r3, r7, #16
 800a27e:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 800a282:	eb05 0b02 	add.w	fp, r5, r2
 800a286:	461f      	mov	r7, r3
 800a288:	3510      	adds	r5, #16
 800a28a:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 800a420 <arm_conv_f32+0x2f4>
 800a28e:	ed1c 1a07 	vldr	s2, [ip, #-28]	@ 0xffffffe4
 800a292:	ed5c 1a06 	vldr	s3, [ip, #-24]	@ 0xffffffe8
 800a296:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 800a29a:	eeb0 5a46 	vmov.f32	s10, s12
 800a29e:	eef0 4a46 	vmov.f32	s9, s12
 800a2a2:	eef0 5a46 	vmov.f32	s11, s12
 800a2a6:	463a      	mov	r2, r7
 800a2a8:	4663      	mov	r3, ip
 800a2aa:	4641      	mov	r1, r8
 800a2ac:	edd2 6a04 	vldr	s13, [r2, #16]
 800a2b0:	ed13 0a04 	vldr	s0, [r3, #-16]
 800a2b4:	ed92 7a03 	vldr	s14, [r2, #12]
 800a2b8:	edd2 7a02 	vldr	s15, [r2, #8]
 800a2bc:	edd2 0a01 	vldr	s1, [r2, #4]
 800a2c0:	ee21 3aa6 	vmul.f32	s6, s3, s13
 800a2c4:	ee62 3a26 	vmul.f32	s7, s4, s13
 800a2c8:	ee61 2a26 	vmul.f32	s5, s2, s13
 800a2cc:	ed13 1a03 	vldr	s2, [r3, #-12]
 800a2d0:	ee66 6a80 	vmul.f32	s13, s13, s0
 800a2d4:	ee21 4a87 	vmul.f32	s8, s3, s14
 800a2d8:	ee73 4a24 	vadd.f32	s9, s6, s9
 800a2dc:	ee33 5a85 	vadd.f32	s10, s7, s10
 800a2e0:	ee22 3a07 	vmul.f32	s6, s4, s14
 800a2e4:	ed53 1a02 	vldr	s3, [r3, #-8]
 800a2e8:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800a2ec:	ee36 6a86 	vadd.f32	s12, s13, s12
 800a2f0:	ee60 3a07 	vmul.f32	s7, s0, s14
 800a2f4:	ee27 7a01 	vmul.f32	s14, s14, s2
 800a2f8:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a2fc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a300:	ee74 2a22 	vadd.f32	s5, s8, s5
 800a304:	ee60 4a27 	vmul.f32	s9, s0, s15
 800a308:	ee22 4a27 	vmul.f32	s8, s4, s15
 800a30c:	ee73 3a85 	vadd.f32	s7, s7, s10
 800a310:	ed13 2a01 	vldr	s4, [r3, #-4]
 800a314:	ee21 5a27 	vmul.f32	s10, s2, s15
 800a318:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800a31c:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a320:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a324:	ee34 4a22 	vadd.f32	s8, s8, s5
 800a328:	ee60 5a20 	vmul.f32	s11, s0, s1
 800a32c:	ee21 3a20 	vmul.f32	s6, s2, s1
 800a330:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a334:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800a338:	ee20 6a82 	vmul.f32	s12, s1, s4
 800a33c:	3901      	subs	r1, #1
 800a33e:	f1a2 0210 	sub.w	r2, r2, #16
 800a342:	ee75 5a84 	vadd.f32	s11, s11, s8
 800a346:	ee73 4a24 	vadd.f32	s9, s6, s9
 800a34a:	ee37 5a05 	vadd.f32	s10, s14, s10
 800a34e:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a352:	f103 0310 	add.w	r3, r3, #16
 800a356:	d1a9      	bne.n	800a2ac <arm_conv_f32+0x180>
 800a358:	eb0a 030c 	add.w	r3, sl, ip
 800a35c:	2e00      	cmp	r6, #0
 800a35e:	d042      	beq.n	800a3e6 <arm_conv_f32+0x2ba>
 800a360:	edde 7a00 	vldr	s15, [lr]
 800a364:	ed93 4a00 	vldr	s8, [r3]
 800a368:	ee61 6a27 	vmul.f32	s13, s2, s15
 800a36c:	ee61 3aa7 	vmul.f32	s7, s3, s15
 800a370:	ee22 7a27 	vmul.f32	s14, s4, s15
 800a374:	ee64 7a27 	vmul.f32	s15, s8, s15
 800a378:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800a37c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a380:	ee35 5a07 	vadd.f32	s10, s10, s14
 800a384:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a388:	eb09 030c 	add.w	r3, r9, ip
 800a38c:	b35c      	cbz	r4, 800a3e6 <arm_conv_f32+0x2ba>
 800a38e:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800a392:	edd3 6a00 	vldr	s13, [r3]
 800a396:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800a39a:	ee22 3a27 	vmul.f32	s6, s4, s15
 800a39e:	ee67 3a84 	vmul.f32	s7, s15, s8
 800a3a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3a6:	2c01      	cmp	r4, #1
 800a3a8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a3ac:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a3b0:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a3b4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a3b8:	eb00 030c 	add.w	r3, r0, ip
 800a3bc:	d013      	beq.n	800a3e6 <arm_conv_f32+0x2ba>
 800a3be:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800a3c2:	edd3 3a00 	vldr	s7, [r3]
 800a3c6:	ee62 7a07 	vmul.f32	s15, s4, s14
 800a3ca:	ee27 4a04 	vmul.f32	s8, s14, s8
 800a3ce:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a3d2:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a3d6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a3da:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a3de:	ee35 5a26 	vadd.f32	s10, s10, s13
 800a3e2:	ee36 6a07 	vadd.f32	s12, s12, s14
 800a3e6:	45ab      	cmp	fp, r5
 800a3e8:	ed45 5a04 	vstr	s11, [r5, #-16]
 800a3ec:	ed45 4a03 	vstr	s9, [r5, #-12]
 800a3f0:	ed05 5a02 	vstr	s10, [r5, #-8]
 800a3f4:	ed05 6a01 	vstr	s12, [r5, #-4]
 800a3f8:	f10c 0c10 	add.w	ip, ip, #16
 800a3fc:	f105 0310 	add.w	r3, r5, #16
 800a400:	f000 809e 	beq.w	800a540 <arm_conv_f32+0x414>
 800a404:	461d      	mov	r5, r3
 800a406:	e740      	b.n	800a28a <arm_conv_f32+0x15e>
 800a408:	9a01      	ldr	r2, [sp, #4]
 800a40a:	46ac      	mov	ip, r5
 800a40c:	2a00      	cmp	r2, #0
 800a40e:	d037      	beq.n	800a480 <arm_conv_f32+0x354>
 800a410:	9a01      	ldr	r2, [sp, #4]
 800a412:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 800a420 <arm_conv_f32+0x2f4>
 800a416:	0096      	lsls	r6, r2, #2
 800a418:	eb05 0c06 	add.w	ip, r5, r6
 800a41c:	4604      	mov	r4, r0
 800a41e:	e021      	b.n	800a464 <arm_conv_f32+0x338>
 800a420:	00000000 	.word	0x00000000
 800a424:	edd7 7a00 	vldr	s15, [r7]
 800a428:	ecb2 7a01 	vldmia	r2!, {s14}
 800a42c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a430:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a434:	b189      	cbz	r1, 800a45a <arm_conv_f32+0x32e>
 800a436:	ed17 7a01 	vldr	s14, [r7, #-4]
 800a43a:	edd4 6a01 	vldr	s13, [r4, #4]
 800a43e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a442:	2b02      	cmp	r3, #2
 800a444:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a448:	d007      	beq.n	800a45a <arm_conv_f32+0x32e>
 800a44a:	ed94 7a02 	vldr	s14, [r4, #8]
 800a44e:	ed57 6a02 	vldr	s13, [r7, #-8]
 800a452:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a456:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a45a:	ece5 7a01 	vstmia	r5!, {s15}
 800a45e:	4565      	cmp	r5, ip
 800a460:	4614      	mov	r4, r2
 800a462:	d00a      	beq.n	800a47a <arm_conv_f32+0x34e>
 800a464:	4622      	mov	r2, r4
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1dc      	bne.n	800a424 <arm_conv_f32+0x2f8>
 800a46a:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 800a420 <arm_conv_f32+0x2f4>
 800a46e:	ece5 7a01 	vstmia	r5!, {s15}
 800a472:	1d22      	adds	r2, r4, #4
 800a474:	4565      	cmp	r5, ip
 800a476:	4614      	mov	r4, r2
 800a478:	d1f4      	bne.n	800a464 <arm_conv_f32+0x338>
 800a47a:	4430      	add	r0, r6
 800a47c:	2900      	cmp	r1, #0
 800a47e:	d059      	beq.n	800a534 <arm_conv_f32+0x408>
 800a480:	088d      	lsrs	r5, r1, #2
 800a482:	ed5f 5a19 	vldr	s11, [pc, #-100]	@ 800a420 <arm_conv_f32+0x2f4>
 800a486:	d058      	beq.n	800a53a <arm_conv_f32+0x40e>
 800a488:	f100 0210 	add.w	r2, r0, #16
 800a48c:	f1a7 0310 	sub.w	r3, r7, #16
 800a490:	462c      	mov	r4, r5
 800a492:	ed52 6a04 	vldr	s13, [r2, #-16]
 800a496:	edd3 3a04 	vldr	s7, [r3, #16]
 800a49a:	ed12 7a03 	vldr	s14, [r2, #-12]
 800a49e:	ed93 4a03 	vldr	s8, [r3, #12]
 800a4a2:	ed52 7a02 	vldr	s15, [r2, #-8]
 800a4a6:	edd3 4a02 	vldr	s9, [r3, #8]
 800a4aa:	ed12 6a01 	vldr	s12, [r2, #-4]
 800a4ae:	ed93 5a01 	vldr	s10, [r3, #4]
 800a4b2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800a4b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a4ba:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a4be:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800a4c2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a4c6:	ee66 6a05 	vmul.f32	s13, s12, s10
 800a4ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4ce:	3c01      	subs	r4, #1
 800a4d0:	f102 0210 	add.w	r2, r2, #16
 800a4d4:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800a4d8:	f1a3 0310 	sub.w	r3, r3, #16
 800a4dc:	d1d9      	bne.n	800a492 <arm_conv_f32+0x366>
 800a4de:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 800a4e2:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800a4e6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800a4ea:	f011 0203 	ands.w	r2, r1, #3
 800a4ee:	d01b      	beq.n	800a528 <arm_conv_f32+0x3fc>
 800a4f0:	edd3 7a00 	vldr	s15, [r3]
 800a4f4:	ed95 7a00 	vldr	s14, [r5]
 800a4f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a4fc:	3a01      	subs	r2, #1
 800a4fe:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a502:	d011      	beq.n	800a528 <arm_conv_f32+0x3fc>
 800a504:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a508:	ed95 7a01 	vldr	s14, [r5, #4]
 800a50c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a510:	2a01      	cmp	r2, #1
 800a512:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a516:	d007      	beq.n	800a528 <arm_conv_f32+0x3fc>
 800a518:	edd5 7a02 	vldr	s15, [r5, #8]
 800a51c:	ed13 7a02 	vldr	s14, [r3, #-8]
 800a520:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a524:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a528:	3901      	subs	r1, #1
 800a52a:	ecec 5a01 	vstmia	ip!, {s11}
 800a52e:	f100 0004 	add.w	r0, r0, #4
 800a532:	d1a5      	bne.n	800a480 <arm_conv_f32+0x354>
 800a534:	b00b      	add	sp, #44	@ 0x2c
 800a536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53a:	463b      	mov	r3, r7
 800a53c:	4605      	mov	r5, r0
 800a53e:	e7d4      	b.n	800a4ea <arm_conv_f32+0x3be>
 800a540:	9b02      	ldr	r3, [sp, #8]
 800a542:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	9302      	str	r3, [sp, #8]
 800a54a:	9b03      	ldr	r3, [sp, #12]
 800a54c:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 800a550:	4403      	add	r3, r0
 800a552:	465d      	mov	r5, fp
 800a554:	469e      	mov	lr, r3
 800a556:	9b01      	ldr	r3, [sp, #4]
 800a558:	f013 0c03 	ands.w	ip, r3, #3
 800a55c:	d075      	beq.n	800a64a <arm_conv_f32+0x51e>
 800a55e:	9b02      	ldr	r3, [sp, #8]
 800a560:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 800a564:	f004 0403 	and.w	r4, r4, #3
 800a568:	f104 3bff 	add.w	fp, r4, #4294967295
 800a56c:	f103 0801 	add.w	r8, r3, #1
 800a570:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800a574:	e9cd 7002 	strd	r7, r0, [sp, #8]
 800a578:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 800a57c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800a580:	f1a7 0210 	sub.w	r2, r7, #16
 800a584:	4618      	mov	r0, r3
 800a586:	465b      	mov	r3, fp
 800a588:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 800a58c:	468b      	mov	fp, r1
 800a58e:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800a592:	4621      	mov	r1, r4
 800a594:	4617      	mov	r7, r2
 800a596:	461c      	mov	r4, r3
 800a598:	ed5f 7a5f 	vldr	s15, [pc, #-380]	@ 800a420 <arm_conv_f32+0x2f4>
 800a59c:	f10e 0210 	add.w	r2, lr, #16
 800a5a0:	463b      	mov	r3, r7
 800a5a2:	4656      	mov	r6, sl
 800a5a4:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a5a8:	edd3 3a04 	vldr	s7, [r3, #16]
 800a5ac:	ed12 6a03 	vldr	s12, [r2, #-12]
 800a5b0:	ed93 4a03 	vldr	s8, [r3, #12]
 800a5b4:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a5b8:	edd3 4a02 	vldr	s9, [r3, #8]
 800a5bc:	ed52 5a01 	vldr	s11, [r2, #-4]
 800a5c0:	ed93 5a01 	vldr	s10, [r3, #4]
 800a5c4:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a5c8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a5cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5d0:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800a5d4:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a5d8:	ee65 6a85 	vmul.f32	s13, s11, s10
 800a5dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5e0:	3e01      	subs	r6, #1
 800a5e2:	f102 0210 	add.w	r2, r2, #16
 800a5e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ea:	f1a3 0310 	sub.w	r3, r3, #16
 800a5ee:	d1d9      	bne.n	800a5a4 <arm_conv_f32+0x478>
 800a5f0:	4486      	add	lr, r0
 800a5f2:	b1d1      	cbz	r1, 800a62a <arm_conv_f32+0x4fe>
 800a5f4:	ed99 7a00 	vldr	s14, [r9]
 800a5f8:	edde 6a00 	vldr	s13, [lr]
 800a5fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a600:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a604:	b18c      	cbz	r4, 800a62a <arm_conv_f32+0x4fe>
 800a606:	ed19 7a01 	vldr	s14, [r9, #-4]
 800a60a:	edde 6a01 	vldr	s13, [lr, #4]
 800a60e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a612:	2c01      	cmp	r4, #1
 800a614:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a618:	d007      	beq.n	800a62a <arm_conv_f32+0x4fe>
 800a61a:	ed9e 7a02 	vldr	s14, [lr, #8]
 800a61e:	ed59 6a02 	vldr	s13, [r9, #-8]
 800a622:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a626:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a62a:	ece5 7a01 	vstmia	r5!, {s15}
 800a62e:	4565      	cmp	r5, ip
 800a630:	46c6      	mov	lr, r8
 800a632:	f108 0804 	add.w	r8, r8, #4
 800a636:	d1af      	bne.n	800a598 <arm_conv_f32+0x46c>
 800a638:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800a63c:	4659      	mov	r1, fp
 800a63e:	9b01      	ldr	r3, [sp, #4]
 800a640:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a644:	e71c      	b.n	800a480 <arm_conv_f32+0x354>
 800a646:	4686      	mov	lr, r0
 800a648:	e785      	b.n	800a556 <arm_conv_f32+0x42a>
 800a64a:	46ac      	mov	ip, r5
 800a64c:	e7f7      	b.n	800a63e <arm_conv_f32+0x512>
 800a64e:	9a01      	ldr	r2, [sp, #4]
 800a650:	2a00      	cmp	r2, #0
 800a652:	f47f aedd 	bne.w	800a410 <arm_conv_f32+0x2e4>
 800a656:	e76d      	b.n	800a534 <arm_conv_f32+0x408>
 800a658:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 800a420 <arm_conv_f32+0x2f4>
 800a65c:	4680      	mov	r8, r0
 800a65e:	e5e3      	b.n	800a228 <arm_conv_f32+0xfc>

0800a660 <memset>:
 800a660:	4402      	add	r2, r0
 800a662:	4603      	mov	r3, r0
 800a664:	4293      	cmp	r3, r2
 800a666:	d100      	bne.n	800a66a <memset+0xa>
 800a668:	4770      	bx	lr
 800a66a:	f803 1b01 	strb.w	r1, [r3], #1
 800a66e:	e7f9      	b.n	800a664 <memset+0x4>

0800a670 <__libc_init_array>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	4d0d      	ldr	r5, [pc, #52]	@ (800a6a8 <__libc_init_array+0x38>)
 800a674:	4c0d      	ldr	r4, [pc, #52]	@ (800a6ac <__libc_init_array+0x3c>)
 800a676:	1b64      	subs	r4, r4, r5
 800a678:	10a4      	asrs	r4, r4, #2
 800a67a:	2600      	movs	r6, #0
 800a67c:	42a6      	cmp	r6, r4
 800a67e:	d109      	bne.n	800a694 <__libc_init_array+0x24>
 800a680:	4d0b      	ldr	r5, [pc, #44]	@ (800a6b0 <__libc_init_array+0x40>)
 800a682:	4c0c      	ldr	r4, [pc, #48]	@ (800a6b4 <__libc_init_array+0x44>)
 800a684:	f000 fde4 	bl	800b250 <_init>
 800a688:	1b64      	subs	r4, r4, r5
 800a68a:	10a4      	asrs	r4, r4, #2
 800a68c:	2600      	movs	r6, #0
 800a68e:	42a6      	cmp	r6, r4
 800a690:	d105      	bne.n	800a69e <__libc_init_array+0x2e>
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	f855 3b04 	ldr.w	r3, [r5], #4
 800a698:	4798      	blx	r3
 800a69a:	3601      	adds	r6, #1
 800a69c:	e7ee      	b.n	800a67c <__libc_init_array+0xc>
 800a69e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a2:	4798      	blx	r3
 800a6a4:	3601      	adds	r6, #1
 800a6a6:	e7f2      	b.n	800a68e <__libc_init_array+0x1e>
 800a6a8:	0800bc98 	.word	0x0800bc98
 800a6ac:	0800bc98 	.word	0x0800bc98
 800a6b0:	0800bc98 	.word	0x0800bc98
 800a6b4:	0800bc9c 	.word	0x0800bc9c

0800a6b8 <cos>:
 800a6b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6ba:	eeb0 7b40 	vmov.f64	d7, d0
 800a6be:	ee17 3a90 	vmov	r3, s15
 800a6c2:	4a21      	ldr	r2, [pc, #132]	@ (800a748 <cos+0x90>)
 800a6c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d806      	bhi.n	800a6da <cos+0x22>
 800a6cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800a740 <cos+0x88>
 800a6d0:	b005      	add	sp, #20
 800a6d2:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6d6:	f000 b83b 	b.w	800a750 <__kernel_cos>
 800a6da:	4a1c      	ldr	r2, [pc, #112]	@ (800a74c <cos+0x94>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d904      	bls.n	800a6ea <cos+0x32>
 800a6e0:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a6e4:	b005      	add	sp, #20
 800a6e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6ea:	4668      	mov	r0, sp
 800a6ec:	f000 f8f0 	bl	800a8d0 <__ieee754_rem_pio2>
 800a6f0:	f000 0003 	and.w	r0, r0, #3
 800a6f4:	2801      	cmp	r0, #1
 800a6f6:	d009      	beq.n	800a70c <cos+0x54>
 800a6f8:	2802      	cmp	r0, #2
 800a6fa:	d010      	beq.n	800a71e <cos+0x66>
 800a6fc:	b9b0      	cbnz	r0, 800a72c <cos+0x74>
 800a6fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a702:	ed9d 0b00 	vldr	d0, [sp]
 800a706:	f000 f823 	bl	800a750 <__kernel_cos>
 800a70a:	e7eb      	b.n	800a6e4 <cos+0x2c>
 800a70c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a710:	ed9d 0b00 	vldr	d0, [sp]
 800a714:	f000 f884 	bl	800a820 <__kernel_sin>
 800a718:	eeb1 0b40 	vneg.f64	d0, d0
 800a71c:	e7e2      	b.n	800a6e4 <cos+0x2c>
 800a71e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a722:	ed9d 0b00 	vldr	d0, [sp]
 800a726:	f000 f813 	bl	800a750 <__kernel_cos>
 800a72a:	e7f5      	b.n	800a718 <cos+0x60>
 800a72c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a730:	ed9d 0b00 	vldr	d0, [sp]
 800a734:	2001      	movs	r0, #1
 800a736:	f000 f873 	bl	800a820 <__kernel_sin>
 800a73a:	e7d3      	b.n	800a6e4 <cos+0x2c>
 800a73c:	f3af 8000 	nop.w
	...
 800a748:	3fe921fb 	.word	0x3fe921fb
 800a74c:	7fefffff 	.word	0x7fefffff

0800a750 <__kernel_cos>:
 800a750:	eeb0 5b40 	vmov.f64	d5, d0
 800a754:	ee15 1a90 	vmov	r1, s11
 800a758:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800a75c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a760:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800a764:	d204      	bcs.n	800a770 <__kernel_cos+0x20>
 800a766:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800a76a:	ee17 3a90 	vmov	r3, s15
 800a76e:	b343      	cbz	r3, 800a7c2 <__kernel_cos+0x72>
 800a770:	ee25 6b05 	vmul.f64	d6, d5, d5
 800a774:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800a778:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800a7e8 <__kernel_cos+0x98>
 800a77c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a7f0 <__kernel_cos+0xa0>
 800a780:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a784:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a7f8 <__kernel_cos+0xa8>
 800a788:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a78c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a800 <__kernel_cos+0xb0>
 800a790:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a794:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a808 <__kernel_cos+0xb8>
 800a798:	4b1f      	ldr	r3, [pc, #124]	@ (800a818 <__kernel_cos+0xc8>)
 800a79a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a79e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a810 <__kernel_cos+0xc0>
 800a7a2:	4299      	cmp	r1, r3
 800a7a4:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a7a8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a7ac:	ee24 4b06 	vmul.f64	d4, d4, d6
 800a7b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a7b4:	eea6 1b04 	vfma.f64	d1, d6, d4
 800a7b8:	d804      	bhi.n	800a7c4 <__kernel_cos+0x74>
 800a7ba:	ee37 7b41 	vsub.f64	d7, d7, d1
 800a7be:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a7c2:	4770      	bx	lr
 800a7c4:	4b15      	ldr	r3, [pc, #84]	@ (800a81c <__kernel_cos+0xcc>)
 800a7c6:	4299      	cmp	r1, r3
 800a7c8:	d809      	bhi.n	800a7de <__kernel_cos+0x8e>
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800a7d0:	ec43 2b16 	vmov	d6, r2, r3
 800a7d4:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a7d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a7dc:	e7ed      	b.n	800a7ba <__kernel_cos+0x6a>
 800a7de:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800a7e2:	e7f7      	b.n	800a7d4 <__kernel_cos+0x84>
 800a7e4:	f3af 8000 	nop.w
 800a7e8:	be8838d4 	.word	0xbe8838d4
 800a7ec:	bda8fae9 	.word	0xbda8fae9
 800a7f0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a7f4:	3e21ee9e 	.word	0x3e21ee9e
 800a7f8:	809c52ad 	.word	0x809c52ad
 800a7fc:	be927e4f 	.word	0xbe927e4f
 800a800:	19cb1590 	.word	0x19cb1590
 800a804:	3efa01a0 	.word	0x3efa01a0
 800a808:	16c15177 	.word	0x16c15177
 800a80c:	bf56c16c 	.word	0xbf56c16c
 800a810:	5555554c 	.word	0x5555554c
 800a814:	3fa55555 	.word	0x3fa55555
 800a818:	3fd33332 	.word	0x3fd33332
 800a81c:	3fe90000 	.word	0x3fe90000

0800a820 <__kernel_sin>:
 800a820:	ee10 3a90 	vmov	r3, s1
 800a824:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a828:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a82c:	d204      	bcs.n	800a838 <__kernel_sin+0x18>
 800a82e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a832:	ee17 3a90 	vmov	r3, s15
 800a836:	b35b      	cbz	r3, 800a890 <__kernel_sin+0x70>
 800a838:	ee20 6b00 	vmul.f64	d6, d0, d0
 800a83c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800a840:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800a898 <__kernel_sin+0x78>
 800a844:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a8a0 <__kernel_sin+0x80>
 800a848:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a84c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800a8a8 <__kernel_sin+0x88>
 800a850:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a854:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a8b0 <__kernel_sin+0x90>
 800a858:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a85c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800a8b8 <__kernel_sin+0x98>
 800a860:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a864:	b930      	cbnz	r0, 800a874 <__kernel_sin+0x54>
 800a866:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a8c0 <__kernel_sin+0xa0>
 800a86a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a86e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800a872:	4770      	bx	lr
 800a874:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800a878:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800a87c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800a880:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800a884:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a8c8 <__kernel_sin+0xa8>
 800a888:	eea5 1b07 	vfma.f64	d1, d5, d7
 800a88c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	f3af 8000 	nop.w
 800a898:	5acfd57c 	.word	0x5acfd57c
 800a89c:	3de5d93a 	.word	0x3de5d93a
 800a8a0:	8a2b9ceb 	.word	0x8a2b9ceb
 800a8a4:	be5ae5e6 	.word	0xbe5ae5e6
 800a8a8:	57b1fe7d 	.word	0x57b1fe7d
 800a8ac:	3ec71de3 	.word	0x3ec71de3
 800a8b0:	19c161d5 	.word	0x19c161d5
 800a8b4:	bf2a01a0 	.word	0xbf2a01a0
 800a8b8:	1110f8a6 	.word	0x1110f8a6
 800a8bc:	3f811111 	.word	0x3f811111
 800a8c0:	55555549 	.word	0x55555549
 800a8c4:	bfc55555 	.word	0xbfc55555
 800a8c8:	55555549 	.word	0x55555549
 800a8cc:	3fc55555 	.word	0x3fc55555

0800a8d0 <__ieee754_rem_pio2>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	eeb0 7b40 	vmov.f64	d7, d0
 800a8d6:	ee17 5a90 	vmov	r5, s15
 800a8da:	4b99      	ldr	r3, [pc, #612]	@ (800ab40 <__ieee754_rem_pio2+0x270>)
 800a8dc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a8e0:	429e      	cmp	r6, r3
 800a8e2:	b088      	sub	sp, #32
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	d807      	bhi.n	800a8f8 <__ieee754_rem_pio2+0x28>
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	ed84 0b00 	vstr	d0, [r4]
 800a8f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	e01b      	b.n	800a930 <__ieee754_rem_pio2+0x60>
 800a8f8:	4b92      	ldr	r3, [pc, #584]	@ (800ab44 <__ieee754_rem_pio2+0x274>)
 800a8fa:	429e      	cmp	r6, r3
 800a8fc:	d83b      	bhi.n	800a976 <__ieee754_rem_pio2+0xa6>
 800a8fe:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800a902:	2d00      	cmp	r5, #0
 800a904:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800ab00 <__ieee754_rem_pio2+0x230>
 800a908:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800a90c:	dd19      	ble.n	800a942 <__ieee754_rem_pio2+0x72>
 800a90e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a912:	429e      	cmp	r6, r3
 800a914:	d00e      	beq.n	800a934 <__ieee754_rem_pio2+0x64>
 800a916:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800ab08 <__ieee754_rem_pio2+0x238>
 800a91a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800a91e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a922:	ed84 6b00 	vstr	d6, [r4]
 800a926:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a92a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a92e:	2001      	movs	r0, #1
 800a930:	b008      	add	sp, #32
 800a932:	bd70      	pop	{r4, r5, r6, pc}
 800a934:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800ab10 <__ieee754_rem_pio2+0x240>
 800a938:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800ab18 <__ieee754_rem_pio2+0x248>
 800a93c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a940:	e7eb      	b.n	800a91a <__ieee754_rem_pio2+0x4a>
 800a942:	429e      	cmp	r6, r3
 800a944:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a948:	d00e      	beq.n	800a968 <__ieee754_rem_pio2+0x98>
 800a94a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800ab08 <__ieee754_rem_pio2+0x238>
 800a94e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a952:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a956:	ed84 6b00 	vstr	d6, [r4]
 800a95a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a95e:	f04f 30ff 	mov.w	r0, #4294967295
 800a962:	ed84 7b02 	vstr	d7, [r4, #8]
 800a966:	e7e3      	b.n	800a930 <__ieee754_rem_pio2+0x60>
 800a968:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800ab10 <__ieee754_rem_pio2+0x240>
 800a96c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800ab18 <__ieee754_rem_pio2+0x248>
 800a970:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a974:	e7eb      	b.n	800a94e <__ieee754_rem_pio2+0x7e>
 800a976:	4b74      	ldr	r3, [pc, #464]	@ (800ab48 <__ieee754_rem_pio2+0x278>)
 800a978:	429e      	cmp	r6, r3
 800a97a:	d870      	bhi.n	800aa5e <__ieee754_rem_pio2+0x18e>
 800a97c:	f000 f8ec 	bl	800ab58 <fabs>
 800a980:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a984:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ab20 <__ieee754_rem_pio2+0x250>
 800a988:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a98c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a990:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a994:	ee17 0a90 	vmov	r0, s15
 800a998:	eeb1 4b45 	vneg.f64	d4, d5
 800a99c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ab00 <__ieee754_rem_pio2+0x230>
 800a9a0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800a9a4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ab08 <__ieee754_rem_pio2+0x238>
 800a9a8:	281f      	cmp	r0, #31
 800a9aa:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a9ae:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a9b2:	dc05      	bgt.n	800a9c0 <__ieee754_rem_pio2+0xf0>
 800a9b4:	4b65      	ldr	r3, [pc, #404]	@ (800ab4c <__ieee754_rem_pio2+0x27c>)
 800a9b6:	1e42      	subs	r2, r0, #1
 800a9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9bc:	42b3      	cmp	r3, r6
 800a9be:	d109      	bne.n	800a9d4 <__ieee754_rem_pio2+0x104>
 800a9c0:	ee16 3a90 	vmov	r3, s13
 800a9c4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a9c8:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800a9cc:	2b10      	cmp	r3, #16
 800a9ce:	ea4f 5226 	mov.w	r2, r6, asr #20
 800a9d2:	dc02      	bgt.n	800a9da <__ieee754_rem_pio2+0x10a>
 800a9d4:	ed84 6b00 	vstr	d6, [r4]
 800a9d8:	e01a      	b.n	800aa10 <__ieee754_rem_pio2+0x140>
 800a9da:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800ab10 <__ieee754_rem_pio2+0x240>
 800a9de:	eeb0 6b40 	vmov.f64	d6, d0
 800a9e2:	eea4 6b03 	vfma.f64	d6, d4, d3
 800a9e6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a9ea:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a9ee:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800ab18 <__ieee754_rem_pio2+0x248>
 800a9f2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800a9f6:	ee36 3b47 	vsub.f64	d3, d6, d7
 800a9fa:	ee13 3a90 	vmov	r3, s7
 800a9fe:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	2b31      	cmp	r3, #49	@ 0x31
 800aa06:	dc17      	bgt.n	800aa38 <__ieee754_rem_pio2+0x168>
 800aa08:	eeb0 0b46 	vmov.f64	d0, d6
 800aa0c:	ed84 3b00 	vstr	d3, [r4]
 800aa10:	ed94 6b00 	vldr	d6, [r4]
 800aa14:	2d00      	cmp	r5, #0
 800aa16:	ee30 0b46 	vsub.f64	d0, d0, d6
 800aa1a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800aa1e:	ed84 0b02 	vstr	d0, [r4, #8]
 800aa22:	da85      	bge.n	800a930 <__ieee754_rem_pio2+0x60>
 800aa24:	eeb1 6b46 	vneg.f64	d6, d6
 800aa28:	eeb1 0b40 	vneg.f64	d0, d0
 800aa2c:	ed84 6b00 	vstr	d6, [r4]
 800aa30:	ed84 0b02 	vstr	d0, [r4, #8]
 800aa34:	4240      	negs	r0, r0
 800aa36:	e77b      	b.n	800a930 <__ieee754_rem_pio2+0x60>
 800aa38:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800ab28 <__ieee754_rem_pio2+0x258>
 800aa3c:	eeb0 0b46 	vmov.f64	d0, d6
 800aa40:	eea4 0b07 	vfma.f64	d0, d4, d7
 800aa44:	ee36 6b40 	vsub.f64	d6, d6, d0
 800aa48:	eea4 6b07 	vfma.f64	d6, d4, d7
 800aa4c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800ab30 <__ieee754_rem_pio2+0x260>
 800aa50:	eeb0 7b46 	vmov.f64	d7, d6
 800aa54:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800aa58:	ee30 6b47 	vsub.f64	d6, d0, d7
 800aa5c:	e7ba      	b.n	800a9d4 <__ieee754_rem_pio2+0x104>
 800aa5e:	4b3c      	ldr	r3, [pc, #240]	@ (800ab50 <__ieee754_rem_pio2+0x280>)
 800aa60:	429e      	cmp	r6, r3
 800aa62:	d906      	bls.n	800aa72 <__ieee754_rem_pio2+0x1a2>
 800aa64:	ee30 7b40 	vsub.f64	d7, d0, d0
 800aa68:	ed80 7b02 	vstr	d7, [r0, #8]
 800aa6c:	ed80 7b00 	vstr	d7, [r0]
 800aa70:	e740      	b.n	800a8f4 <__ieee754_rem_pio2+0x24>
 800aa72:	ee10 3a10 	vmov	r3, s0
 800aa76:	1532      	asrs	r2, r6, #20
 800aa78:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800aa82:	ec41 0b17 	vmov	d7, r0, r1
 800aa86:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800aa8a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800ab38 <__ieee754_rem_pio2+0x268>
 800aa8e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800aa92:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aa96:	ed8d 6b02 	vstr	d6, [sp, #8]
 800aa9a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aa9e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800aaa2:	a808      	add	r0, sp, #32
 800aaa4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800aaa8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aaac:	ed8d 6b04 	vstr	d6, [sp, #16]
 800aab0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aab4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aab8:	2103      	movs	r1, #3
 800aaba:	ed30 7b02 	vldmdb	r0!, {d7}
 800aabe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac6:	460b      	mov	r3, r1
 800aac8:	f101 31ff 	add.w	r1, r1, #4294967295
 800aacc:	d0f5      	beq.n	800aaba <__ieee754_rem_pio2+0x1ea>
 800aace:	4921      	ldr	r1, [pc, #132]	@ (800ab54 <__ieee754_rem_pio2+0x284>)
 800aad0:	9101      	str	r1, [sp, #4]
 800aad2:	2102      	movs	r1, #2
 800aad4:	9100      	str	r1, [sp, #0]
 800aad6:	a802      	add	r0, sp, #8
 800aad8:	4621      	mov	r1, r4
 800aada:	f000 f845 	bl	800ab68 <__kernel_rem_pio2>
 800aade:	2d00      	cmp	r5, #0
 800aae0:	f6bf af26 	bge.w	800a930 <__ieee754_rem_pio2+0x60>
 800aae4:	ed94 7b00 	vldr	d7, [r4]
 800aae8:	eeb1 7b47 	vneg.f64	d7, d7
 800aaec:	ed84 7b00 	vstr	d7, [r4]
 800aaf0:	ed94 7b02 	vldr	d7, [r4, #8]
 800aaf4:	eeb1 7b47 	vneg.f64	d7, d7
 800aaf8:	ed84 7b02 	vstr	d7, [r4, #8]
 800aafc:	e79a      	b.n	800aa34 <__ieee754_rem_pio2+0x164>
 800aafe:	bf00      	nop
 800ab00:	54400000 	.word	0x54400000
 800ab04:	3ff921fb 	.word	0x3ff921fb
 800ab08:	1a626331 	.word	0x1a626331
 800ab0c:	3dd0b461 	.word	0x3dd0b461
 800ab10:	1a600000 	.word	0x1a600000
 800ab14:	3dd0b461 	.word	0x3dd0b461
 800ab18:	2e037073 	.word	0x2e037073
 800ab1c:	3ba3198a 	.word	0x3ba3198a
 800ab20:	6dc9c883 	.word	0x6dc9c883
 800ab24:	3fe45f30 	.word	0x3fe45f30
 800ab28:	2e000000 	.word	0x2e000000
 800ab2c:	3ba3198a 	.word	0x3ba3198a
 800ab30:	252049c1 	.word	0x252049c1
 800ab34:	397b839a 	.word	0x397b839a
 800ab38:	00000000 	.word	0x00000000
 800ab3c:	41700000 	.word	0x41700000
 800ab40:	3fe921fb 	.word	0x3fe921fb
 800ab44:	4002d97b 	.word	0x4002d97b
 800ab48:	413921fb 	.word	0x413921fb
 800ab4c:	0800bab8 	.word	0x0800bab8
 800ab50:	7fefffff 	.word	0x7fefffff
 800ab54:	0800bb38 	.word	0x0800bb38

0800ab58 <fabs>:
 800ab58:	ec51 0b10 	vmov	r0, r1, d0
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ab62:	ec43 2b10 	vmov	d0, r2, r3
 800ab66:	4770      	bx	lr

0800ab68 <__kernel_rem_pio2>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	ed2d 8b06 	vpush	{d8-d10}
 800ab70:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800ab74:	469b      	mov	fp, r3
 800ab76:	9001      	str	r0, [sp, #4]
 800ab78:	4bbb      	ldr	r3, [pc, #748]	@ (800ae68 <__kernel_rem_pio2+0x300>)
 800ab7a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800ab7c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800ab80:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800ab84:	f112 0f14 	cmn.w	r2, #20
 800ab88:	bfa8      	it	ge
 800ab8a:	1ed3      	subge	r3, r2, #3
 800ab8c:	f10b 3aff 	add.w	sl, fp, #4294967295
 800ab90:	bfb8      	it	lt
 800ab92:	2300      	movlt	r3, #0
 800ab94:	f06f 0517 	mvn.w	r5, #23
 800ab98:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800ae50 <__kernel_rem_pio2+0x2e8>
 800ab9c:	bfa4      	itt	ge
 800ab9e:	2018      	movge	r0, #24
 800aba0:	fb93 f3f0 	sdivge	r3, r3, r0
 800aba4:	fb03 5505 	mla	r5, r3, r5, r5
 800aba8:	eba3 040a 	sub.w	r4, r3, sl
 800abac:	4415      	add	r5, r2
 800abae:	460f      	mov	r7, r1
 800abb0:	eb09 060a 	add.w	r6, r9, sl
 800abb4:	a81a      	add	r0, sp, #104	@ 0x68
 800abb6:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800abba:	2200      	movs	r2, #0
 800abbc:	42b2      	cmp	r2, r6
 800abbe:	dd0e      	ble.n	800abde <__kernel_rem_pio2+0x76>
 800abc0:	aa1a      	add	r2, sp, #104	@ 0x68
 800abc2:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800abc6:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800abca:	2600      	movs	r6, #0
 800abcc:	454e      	cmp	r6, r9
 800abce:	dc25      	bgt.n	800ac1c <__kernel_rem_pio2+0xb4>
 800abd0:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800ae50 <__kernel_rem_pio2+0x2e8>
 800abd4:	f8dd c004 	ldr.w	ip, [sp, #4]
 800abd8:	4614      	mov	r4, r2
 800abda:	2000      	movs	r0, #0
 800abdc:	e015      	b.n	800ac0a <__kernel_rem_pio2+0xa2>
 800abde:	42d4      	cmn	r4, r2
 800abe0:	d409      	bmi.n	800abf6 <__kernel_rem_pio2+0x8e>
 800abe2:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800abe6:	ee07 1a90 	vmov	s15, r1
 800abea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800abee:	eca0 7b02 	vstmia	r0!, {d7}
 800abf2:	3201      	adds	r2, #1
 800abf4:	e7e2      	b.n	800abbc <__kernel_rem_pio2+0x54>
 800abf6:	eeb0 7b46 	vmov.f64	d7, d6
 800abfa:	e7f8      	b.n	800abee <__kernel_rem_pio2+0x86>
 800abfc:	ecbc 5b02 	vldmia	ip!, {d5}
 800ac00:	ed94 6b00 	vldr	d6, [r4]
 800ac04:	3001      	adds	r0, #1
 800ac06:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ac0a:	4550      	cmp	r0, sl
 800ac0c:	f1a4 0408 	sub.w	r4, r4, #8
 800ac10:	ddf4      	ble.n	800abfc <__kernel_rem_pio2+0x94>
 800ac12:	ecae 7b02 	vstmia	lr!, {d7}
 800ac16:	3601      	adds	r6, #1
 800ac18:	3208      	adds	r2, #8
 800ac1a:	e7d7      	b.n	800abcc <__kernel_rem_pio2+0x64>
 800ac1c:	aa06      	add	r2, sp, #24
 800ac1e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800ae58 <__kernel_rem_pio2+0x2f0>
 800ac22:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800ae60 <__kernel_rem_pio2+0x2f8>
 800ac26:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ac2a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800ac2e:	9203      	str	r2, [sp, #12]
 800ac30:	9302      	str	r3, [sp, #8]
 800ac32:	464c      	mov	r4, r9
 800ac34:	00e3      	lsls	r3, r4, #3
 800ac36:	9304      	str	r3, [sp, #16]
 800ac38:	ab92      	add	r3, sp, #584	@ 0x248
 800ac3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac3e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800ac42:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800ac44:	ab06      	add	r3, sp, #24
 800ac46:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ac4a:	461e      	mov	r6, r3
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	f1a2 0208 	sub.w	r2, r2, #8
 800ac54:	dc4a      	bgt.n	800acec <__kernel_rem_pio2+0x184>
 800ac56:	4628      	mov	r0, r5
 800ac58:	9305      	str	r3, [sp, #20]
 800ac5a:	f000 fa01 	bl	800b060 <scalbn>
 800ac5e:	eeb0 8b40 	vmov.f64	d8, d0
 800ac62:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800ac66:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ac6a:	f000 fa79 	bl	800b160 <floor>
 800ac6e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800ac72:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ac76:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ac7a:	2d00      	cmp	r5, #0
 800ac7c:	ee17 8a90 	vmov	r8, s15
 800ac80:	9b05      	ldr	r3, [sp, #20]
 800ac82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ac86:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ac8a:	dd41      	ble.n	800ad10 <__kernel_rem_pio2+0x1a8>
 800ac8c:	1e60      	subs	r0, r4, #1
 800ac8e:	aa06      	add	r2, sp, #24
 800ac90:	f1c5 0c18 	rsb	ip, r5, #24
 800ac94:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800ac98:	fa46 f20c 	asr.w	r2, r6, ip
 800ac9c:	4490      	add	r8, r2
 800ac9e:	fa02 f20c 	lsl.w	r2, r2, ip
 800aca2:	1ab6      	subs	r6, r6, r2
 800aca4:	aa06      	add	r2, sp, #24
 800aca6:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800acaa:	f1c5 0217 	rsb	r2, r5, #23
 800acae:	4116      	asrs	r6, r2
 800acb0:	2e00      	cmp	r6, #0
 800acb2:	dd3c      	ble.n	800ad2e <__kernel_rem_pio2+0x1c6>
 800acb4:	f04f 0c00 	mov.w	ip, #0
 800acb8:	f108 0801 	add.w	r8, r8, #1
 800acbc:	4660      	mov	r0, ip
 800acbe:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800acc2:	4564      	cmp	r4, ip
 800acc4:	dc66      	bgt.n	800ad94 <__kernel_rem_pio2+0x22c>
 800acc6:	2d00      	cmp	r5, #0
 800acc8:	dd03      	ble.n	800acd2 <__kernel_rem_pio2+0x16a>
 800acca:	2d01      	cmp	r5, #1
 800accc:	d072      	beq.n	800adb4 <__kernel_rem_pio2+0x24c>
 800acce:	2d02      	cmp	r5, #2
 800acd0:	d07a      	beq.n	800adc8 <__kernel_rem_pio2+0x260>
 800acd2:	2e02      	cmp	r6, #2
 800acd4:	d12b      	bne.n	800ad2e <__kernel_rem_pio2+0x1c6>
 800acd6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800acda:	ee30 8b48 	vsub.f64	d8, d0, d8
 800acde:	b330      	cbz	r0, 800ad2e <__kernel_rem_pio2+0x1c6>
 800ace0:	4628      	mov	r0, r5
 800ace2:	f000 f9bd 	bl	800b060 <scalbn>
 800ace6:	ee38 8b40 	vsub.f64	d8, d8, d0
 800acea:	e020      	b.n	800ad2e <__kernel_rem_pio2+0x1c6>
 800acec:	ee20 7b09 	vmul.f64	d7, d0, d9
 800acf0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800acf4:	3801      	subs	r0, #1
 800acf6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800acfa:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800acfe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ad02:	eca6 0a01 	vstmia	r6!, {s0}
 800ad06:	ed92 0b00 	vldr	d0, [r2]
 800ad0a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ad0e:	e79e      	b.n	800ac4e <__kernel_rem_pio2+0xe6>
 800ad10:	d105      	bne.n	800ad1e <__kernel_rem_pio2+0x1b6>
 800ad12:	1e62      	subs	r2, r4, #1
 800ad14:	a906      	add	r1, sp, #24
 800ad16:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800ad1a:	15f6      	asrs	r6, r6, #23
 800ad1c:	e7c8      	b.n	800acb0 <__kernel_rem_pio2+0x148>
 800ad1e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800ad22:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ad26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad2a:	da31      	bge.n	800ad90 <__kernel_rem_pio2+0x228>
 800ad2c:	2600      	movs	r6, #0
 800ad2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad36:	f040 809b 	bne.w	800ae70 <__kernel_rem_pio2+0x308>
 800ad3a:	1e62      	subs	r2, r4, #1
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	454a      	cmp	r2, r9
 800ad40:	da49      	bge.n	800add6 <__kernel_rem_pio2+0x26e>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d062      	beq.n	800ae0c <__kernel_rem_pio2+0x2a4>
 800ad46:	3c01      	subs	r4, #1
 800ad48:	ab06      	add	r3, sp, #24
 800ad4a:	3d18      	subs	r5, #24
 800ad4c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0f8      	beq.n	800ad46 <__kernel_rem_pio2+0x1de>
 800ad54:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ad58:	4628      	mov	r0, r5
 800ad5a:	f000 f981 	bl	800b060 <scalbn>
 800ad5e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800ae58 <__kernel_rem_pio2+0x2f0>
 800ad62:	1c62      	adds	r2, r4, #1
 800ad64:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ad66:	00d3      	lsls	r3, r2, #3
 800ad68:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ad6c:	4622      	mov	r2, r4
 800ad6e:	2a00      	cmp	r2, #0
 800ad70:	f280 80a8 	bge.w	800aec4 <__kernel_rem_pio2+0x35c>
 800ad74:	4622      	mov	r2, r4
 800ad76:	2a00      	cmp	r2, #0
 800ad78:	f2c0 80c6 	blt.w	800af08 <__kernel_rem_pio2+0x3a0>
 800ad7c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ad7e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ad82:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800ae50 <__kernel_rem_pio2+0x2e8>
 800ad86:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800ae6c <__kernel_rem_pio2+0x304>
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	1aa1      	subs	r1, r4, r2
 800ad8e:	e0b0      	b.n	800aef2 <__kernel_rem_pio2+0x38a>
 800ad90:	2602      	movs	r6, #2
 800ad92:	e78f      	b.n	800acb4 <__kernel_rem_pio2+0x14c>
 800ad94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad98:	b948      	cbnz	r0, 800adae <__kernel_rem_pio2+0x246>
 800ad9a:	b122      	cbz	r2, 800ada6 <__kernel_rem_pio2+0x23e>
 800ad9c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800ada0:	f843 2c04 	str.w	r2, [r3, #-4]
 800ada4:	2201      	movs	r2, #1
 800ada6:	f10c 0c01 	add.w	ip, ip, #1
 800adaa:	4610      	mov	r0, r2
 800adac:	e789      	b.n	800acc2 <__kernel_rem_pio2+0x15a>
 800adae:	ebae 0202 	sub.w	r2, lr, r2
 800adb2:	e7f5      	b.n	800ada0 <__kernel_rem_pio2+0x238>
 800adb4:	1e62      	subs	r2, r4, #1
 800adb6:	ab06      	add	r3, sp, #24
 800adb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800adc0:	a906      	add	r1, sp, #24
 800adc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800adc6:	e784      	b.n	800acd2 <__kernel_rem_pio2+0x16a>
 800adc8:	1e62      	subs	r2, r4, #1
 800adca:	ab06      	add	r3, sp, #24
 800adcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800add4:	e7f4      	b.n	800adc0 <__kernel_rem_pio2+0x258>
 800add6:	ab06      	add	r3, sp, #24
 800add8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800addc:	3a01      	subs	r2, #1
 800adde:	4318      	orrs	r0, r3
 800ade0:	e7ad      	b.n	800ad3e <__kernel_rem_pio2+0x1d6>
 800ade2:	3301      	adds	r3, #1
 800ade4:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800ade8:	2800      	cmp	r0, #0
 800adea:	d0fa      	beq.n	800ade2 <__kernel_rem_pio2+0x27a>
 800adec:	9a04      	ldr	r2, [sp, #16]
 800adee:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800adf2:	446a      	add	r2, sp
 800adf4:	eb04 000b 	add.w	r0, r4, fp
 800adf8:	a91a      	add	r1, sp, #104	@ 0x68
 800adfa:	1c66      	adds	r6, r4, #1
 800adfc:	3a98      	subs	r2, #152	@ 0x98
 800adfe:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800ae02:	4423      	add	r3, r4
 800ae04:	42b3      	cmp	r3, r6
 800ae06:	da04      	bge.n	800ae12 <__kernel_rem_pio2+0x2aa>
 800ae08:	461c      	mov	r4, r3
 800ae0a:	e713      	b.n	800ac34 <__kernel_rem_pio2+0xcc>
 800ae0c:	9a03      	ldr	r2, [sp, #12]
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e7e8      	b.n	800ade4 <__kernel_rem_pio2+0x27c>
 800ae12:	9902      	ldr	r1, [sp, #8]
 800ae14:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ae18:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800ae1c:	9104      	str	r1, [sp, #16]
 800ae1e:	ee07 1a90 	vmov	s15, r1
 800ae22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae26:	2400      	movs	r4, #0
 800ae28:	eca0 7b02 	vstmia	r0!, {d7}
 800ae2c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800ae50 <__kernel_rem_pio2+0x2e8>
 800ae30:	4686      	mov	lr, r0
 800ae32:	4554      	cmp	r4, sl
 800ae34:	dd03      	ble.n	800ae3e <__kernel_rem_pio2+0x2d6>
 800ae36:	eca2 7b02 	vstmia	r2!, {d7}
 800ae3a:	3601      	adds	r6, #1
 800ae3c:	e7e2      	b.n	800ae04 <__kernel_rem_pio2+0x29c>
 800ae3e:	ecbc 5b02 	vldmia	ip!, {d5}
 800ae42:	ed3e 6b02 	vldmdb	lr!, {d6}
 800ae46:	3401      	adds	r4, #1
 800ae48:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ae4c:	e7f1      	b.n	800ae32 <__kernel_rem_pio2+0x2ca>
 800ae4e:	bf00      	nop
	...
 800ae5c:	3e700000 	.word	0x3e700000
 800ae60:	00000000 	.word	0x00000000
 800ae64:	41700000 	.word	0x41700000
 800ae68:	0800bc80 	.word	0x0800bc80
 800ae6c:	0800bc40 	.word	0x0800bc40
 800ae70:	4268      	negs	r0, r5
 800ae72:	eeb0 0b48 	vmov.f64	d0, d8
 800ae76:	f000 f8f3 	bl	800b060 <scalbn>
 800ae7a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800b048 <__kernel_rem_pio2+0x4e0>
 800ae7e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ae82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae86:	db17      	blt.n	800aeb8 <__kernel_rem_pio2+0x350>
 800ae88:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800b050 <__kernel_rem_pio2+0x4e8>
 800ae8c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ae90:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ae94:	aa06      	add	r2, sp, #24
 800ae96:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800ae9a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800ae9e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800aea2:	3518      	adds	r5, #24
 800aea4:	ee10 3a10 	vmov	r3, s0
 800aea8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800aeac:	ee17 3a10 	vmov	r3, s14
 800aeb0:	3401      	adds	r4, #1
 800aeb2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800aeb6:	e74d      	b.n	800ad54 <__kernel_rem_pio2+0x1ec>
 800aeb8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800aebc:	aa06      	add	r2, sp, #24
 800aebe:	ee10 3a10 	vmov	r3, s0
 800aec2:	e7f6      	b.n	800aeb2 <__kernel_rem_pio2+0x34a>
 800aec4:	a806      	add	r0, sp, #24
 800aec6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800aeca:	9001      	str	r0, [sp, #4]
 800aecc:	ee07 0a90 	vmov	s15, r0
 800aed0:	3a01      	subs	r2, #1
 800aed2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aed6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800aeda:	ee20 0b06 	vmul.f64	d0, d0, d6
 800aede:	ed21 7b02 	vstmdb	r1!, {d7}
 800aee2:	e744      	b.n	800ad6e <__kernel_rem_pio2+0x206>
 800aee4:	ecbc 5b02 	vldmia	ip!, {d5}
 800aee8:	ecb5 6b02 	vldmia	r5!, {d6}
 800aeec:	3001      	adds	r0, #1
 800aeee:	eea5 7b06 	vfma.f64	d7, d5, d6
 800aef2:	4548      	cmp	r0, r9
 800aef4:	dc01      	bgt.n	800aefa <__kernel_rem_pio2+0x392>
 800aef6:	4281      	cmp	r1, r0
 800aef8:	daf4      	bge.n	800aee4 <__kernel_rem_pio2+0x37c>
 800aefa:	a842      	add	r0, sp, #264	@ 0x108
 800aefc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800af00:	ed81 7b00 	vstr	d7, [r1]
 800af04:	3a01      	subs	r2, #1
 800af06:	e736      	b.n	800ad76 <__kernel_rem_pio2+0x20e>
 800af08:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800af0a:	2a02      	cmp	r2, #2
 800af0c:	dc0a      	bgt.n	800af24 <__kernel_rem_pio2+0x3bc>
 800af0e:	2a00      	cmp	r2, #0
 800af10:	dc2d      	bgt.n	800af6e <__kernel_rem_pio2+0x406>
 800af12:	d046      	beq.n	800afa2 <__kernel_rem_pio2+0x43a>
 800af14:	f008 0007 	and.w	r0, r8, #7
 800af18:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800af1c:	ecbd 8b06 	vpop	{d8-d10}
 800af20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af24:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800af26:	2a03      	cmp	r2, #3
 800af28:	d1f4      	bne.n	800af14 <__kernel_rem_pio2+0x3ac>
 800af2a:	a942      	add	r1, sp, #264	@ 0x108
 800af2c:	f1a3 0208 	sub.w	r2, r3, #8
 800af30:	440a      	add	r2, r1
 800af32:	4611      	mov	r1, r2
 800af34:	4620      	mov	r0, r4
 800af36:	2800      	cmp	r0, #0
 800af38:	f1a1 0108 	sub.w	r1, r1, #8
 800af3c:	dc52      	bgt.n	800afe4 <__kernel_rem_pio2+0x47c>
 800af3e:	4621      	mov	r1, r4
 800af40:	2901      	cmp	r1, #1
 800af42:	f1a2 0208 	sub.w	r2, r2, #8
 800af46:	dc5d      	bgt.n	800b004 <__kernel_rem_pio2+0x49c>
 800af48:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800b058 <__kernel_rem_pio2+0x4f0>
 800af4c:	aa42      	add	r2, sp, #264	@ 0x108
 800af4e:	4413      	add	r3, r2
 800af50:	2c01      	cmp	r4, #1
 800af52:	dc67      	bgt.n	800b024 <__kernel_rem_pio2+0x4bc>
 800af54:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800af58:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800af5c:	2e00      	cmp	r6, #0
 800af5e:	d167      	bne.n	800b030 <__kernel_rem_pio2+0x4c8>
 800af60:	ed87 5b00 	vstr	d5, [r7]
 800af64:	ed87 6b02 	vstr	d6, [r7, #8]
 800af68:	ed87 7b04 	vstr	d7, [r7, #16]
 800af6c:	e7d2      	b.n	800af14 <__kernel_rem_pio2+0x3ac>
 800af6e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800b058 <__kernel_rem_pio2+0x4f0>
 800af72:	aa42      	add	r2, sp, #264	@ 0x108
 800af74:	4413      	add	r3, r2
 800af76:	4622      	mov	r2, r4
 800af78:	2a00      	cmp	r2, #0
 800af7a:	da24      	bge.n	800afc6 <__kernel_rem_pio2+0x45e>
 800af7c:	b34e      	cbz	r6, 800afd2 <__kernel_rem_pio2+0x46a>
 800af7e:	eeb1 7b46 	vneg.f64	d7, d6
 800af82:	ed87 7b00 	vstr	d7, [r7]
 800af86:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800af8a:	aa44      	add	r2, sp, #272	@ 0x110
 800af8c:	2301      	movs	r3, #1
 800af8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800af92:	429c      	cmp	r4, r3
 800af94:	da20      	bge.n	800afd8 <__kernel_rem_pio2+0x470>
 800af96:	b10e      	cbz	r6, 800af9c <__kernel_rem_pio2+0x434>
 800af98:	eeb1 7b47 	vneg.f64	d7, d7
 800af9c:	ed87 7b02 	vstr	d7, [r7, #8]
 800afa0:	e7b8      	b.n	800af14 <__kernel_rem_pio2+0x3ac>
 800afa2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800b058 <__kernel_rem_pio2+0x4f0>
 800afa6:	aa42      	add	r2, sp, #264	@ 0x108
 800afa8:	4413      	add	r3, r2
 800afaa:	2c00      	cmp	r4, #0
 800afac:	da05      	bge.n	800afba <__kernel_rem_pio2+0x452>
 800afae:	b10e      	cbz	r6, 800afb4 <__kernel_rem_pio2+0x44c>
 800afb0:	eeb1 7b47 	vneg.f64	d7, d7
 800afb4:	ed87 7b00 	vstr	d7, [r7]
 800afb8:	e7ac      	b.n	800af14 <__kernel_rem_pio2+0x3ac>
 800afba:	ed33 6b02 	vldmdb	r3!, {d6}
 800afbe:	3c01      	subs	r4, #1
 800afc0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800afc4:	e7f1      	b.n	800afaa <__kernel_rem_pio2+0x442>
 800afc6:	ed33 7b02 	vldmdb	r3!, {d7}
 800afca:	3a01      	subs	r2, #1
 800afcc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800afd0:	e7d2      	b.n	800af78 <__kernel_rem_pio2+0x410>
 800afd2:	eeb0 7b46 	vmov.f64	d7, d6
 800afd6:	e7d4      	b.n	800af82 <__kernel_rem_pio2+0x41a>
 800afd8:	ecb2 6b02 	vldmia	r2!, {d6}
 800afdc:	3301      	adds	r3, #1
 800afde:	ee37 7b06 	vadd.f64	d7, d7, d6
 800afe2:	e7d6      	b.n	800af92 <__kernel_rem_pio2+0x42a>
 800afe4:	ed91 7b00 	vldr	d7, [r1]
 800afe8:	ed91 5b02 	vldr	d5, [r1, #8]
 800afec:	3801      	subs	r0, #1
 800afee:	ee37 6b05 	vadd.f64	d6, d7, d5
 800aff2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aff6:	ed81 6b00 	vstr	d6, [r1]
 800affa:	ee37 7b05 	vadd.f64	d7, d7, d5
 800affe:	ed81 7b02 	vstr	d7, [r1, #8]
 800b002:	e798      	b.n	800af36 <__kernel_rem_pio2+0x3ce>
 800b004:	ed92 7b00 	vldr	d7, [r2]
 800b008:	ed92 5b02 	vldr	d5, [r2, #8]
 800b00c:	3901      	subs	r1, #1
 800b00e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b012:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b016:	ed82 6b00 	vstr	d6, [r2]
 800b01a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b01e:	ed82 7b02 	vstr	d7, [r2, #8]
 800b022:	e78d      	b.n	800af40 <__kernel_rem_pio2+0x3d8>
 800b024:	ed33 6b02 	vldmdb	r3!, {d6}
 800b028:	3c01      	subs	r4, #1
 800b02a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b02e:	e78f      	b.n	800af50 <__kernel_rem_pio2+0x3e8>
 800b030:	eeb1 5b45 	vneg.f64	d5, d5
 800b034:	eeb1 6b46 	vneg.f64	d6, d6
 800b038:	ed87 5b00 	vstr	d5, [r7]
 800b03c:	eeb1 7b47 	vneg.f64	d7, d7
 800b040:	ed87 6b02 	vstr	d6, [r7, #8]
 800b044:	e790      	b.n	800af68 <__kernel_rem_pio2+0x400>
 800b046:	bf00      	nop
 800b048:	00000000 	.word	0x00000000
 800b04c:	41700000 	.word	0x41700000
 800b050:	00000000 	.word	0x00000000
 800b054:	3e700000 	.word	0x3e700000
	...

0800b060 <scalbn>:
 800b060:	ee10 1a90 	vmov	r1, s1
 800b064:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b068:	b98b      	cbnz	r3, 800b08e <scalbn+0x2e>
 800b06a:	ee10 3a10 	vmov	r3, s0
 800b06e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800b072:	4319      	orrs	r1, r3
 800b074:	d00a      	beq.n	800b08c <scalbn+0x2c>
 800b076:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800b128 <scalbn+0xc8>
 800b07a:	4b37      	ldr	r3, [pc, #220]	@ (800b158 <scalbn+0xf8>)
 800b07c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b080:	4298      	cmp	r0, r3
 800b082:	da0b      	bge.n	800b09c <scalbn+0x3c>
 800b084:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b130 <scalbn+0xd0>
 800b088:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b08c:	4770      	bx	lr
 800b08e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b092:	4293      	cmp	r3, r2
 800b094:	d107      	bne.n	800b0a6 <scalbn+0x46>
 800b096:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b09a:	4770      	bx	lr
 800b09c:	ee10 1a90 	vmov	r1, s1
 800b0a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b0a4:	3b36      	subs	r3, #54	@ 0x36
 800b0a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b0aa:	4290      	cmp	r0, r2
 800b0ac:	dd0d      	ble.n	800b0ca <scalbn+0x6a>
 800b0ae:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b138 <scalbn+0xd8>
 800b0b2:	ee10 3a90 	vmov	r3, s1
 800b0b6:	eeb0 6b47 	vmov.f64	d6, d7
 800b0ba:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800b140 <scalbn+0xe0>
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	fe27 7b05 	vselge.f64	d7, d7, d5
 800b0c4:	ee27 0b06 	vmul.f64	d0, d7, d6
 800b0c8:	4770      	bx	lr
 800b0ca:	4418      	add	r0, r3
 800b0cc:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800b0d0:	4298      	cmp	r0, r3
 800b0d2:	dcec      	bgt.n	800b0ae <scalbn+0x4e>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	dd0a      	ble.n	800b0ee <scalbn+0x8e>
 800b0d8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800b0dc:	ec53 2b10 	vmov	r2, r3, d0
 800b0e0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800b0e4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b0e8:	ec43 2b10 	vmov	d0, r2, r3
 800b0ec:	4770      	bx	lr
 800b0ee:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800b0f2:	da09      	bge.n	800b108 <scalbn+0xa8>
 800b0f4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800b130 <scalbn+0xd0>
 800b0f8:	ee10 3a90 	vmov	r3, s1
 800b0fc:	eeb0 6b47 	vmov.f64	d6, d7
 800b100:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800b148 <scalbn+0xe8>
 800b104:	2b00      	cmp	r3, #0
 800b106:	e7db      	b.n	800b0c0 <scalbn+0x60>
 800b108:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800b10c:	ec53 2b10 	vmov	r2, r3, d0
 800b110:	3036      	adds	r0, #54	@ 0x36
 800b112:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800b116:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b11a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800b150 <scalbn+0xf0>
 800b11e:	ec43 2b10 	vmov	d0, r2, r3
 800b122:	e7b1      	b.n	800b088 <scalbn+0x28>
 800b124:	f3af 8000 	nop.w
 800b128:	00000000 	.word	0x00000000
 800b12c:	43500000 	.word	0x43500000
 800b130:	c2f8f359 	.word	0xc2f8f359
 800b134:	01a56e1f 	.word	0x01a56e1f
 800b138:	8800759c 	.word	0x8800759c
 800b13c:	7e37e43c 	.word	0x7e37e43c
 800b140:	8800759c 	.word	0x8800759c
 800b144:	fe37e43c 	.word	0xfe37e43c
 800b148:	c2f8f359 	.word	0xc2f8f359
 800b14c:	81a56e1f 	.word	0x81a56e1f
 800b150:	00000000 	.word	0x00000000
 800b154:	3c900000 	.word	0x3c900000
 800b158:	ffff3cb0 	.word	0xffff3cb0
 800b15c:	00000000 	.word	0x00000000

0800b160 <floor>:
 800b160:	ee10 3a90 	vmov	r3, s1
 800b164:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800b168:	ee10 2a10 	vmov	r2, s0
 800b16c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800b170:	2913      	cmp	r1, #19
 800b172:	b530      	push	{r4, r5, lr}
 800b174:	4615      	mov	r5, r2
 800b176:	dc33      	bgt.n	800b1e0 <floor+0x80>
 800b178:	2900      	cmp	r1, #0
 800b17a:	da18      	bge.n	800b1ae <floor+0x4e>
 800b17c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800b240 <floor+0xe0>
 800b180:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b184:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b18c:	dd0a      	ble.n	800b1a4 <floor+0x44>
 800b18e:	2b00      	cmp	r3, #0
 800b190:	da50      	bge.n	800b234 <floor+0xd4>
 800b192:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b196:	4313      	orrs	r3, r2
 800b198:	2200      	movs	r2, #0
 800b19a:	4293      	cmp	r3, r2
 800b19c:	4b2a      	ldr	r3, [pc, #168]	@ (800b248 <floor+0xe8>)
 800b19e:	bf08      	it	eq
 800b1a0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	4610      	mov	r0, r2
 800b1a8:	ec41 0b10 	vmov	d0, r0, r1
 800b1ac:	e01f      	b.n	800b1ee <floor+0x8e>
 800b1ae:	4827      	ldr	r0, [pc, #156]	@ (800b24c <floor+0xec>)
 800b1b0:	4108      	asrs	r0, r1
 800b1b2:	ea03 0400 	and.w	r4, r3, r0
 800b1b6:	4314      	orrs	r4, r2
 800b1b8:	d019      	beq.n	800b1ee <floor+0x8e>
 800b1ba:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b240 <floor+0xe0>
 800b1be:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b1c2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ca:	ddeb      	ble.n	800b1a4 <floor+0x44>
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	bfbe      	ittt	lt
 800b1d0:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800b1d4:	410a      	asrlt	r2, r1
 800b1d6:	189b      	addlt	r3, r3, r2
 800b1d8:	ea23 0300 	bic.w	r3, r3, r0
 800b1dc:	2200      	movs	r2, #0
 800b1de:	e7e1      	b.n	800b1a4 <floor+0x44>
 800b1e0:	2933      	cmp	r1, #51	@ 0x33
 800b1e2:	dd05      	ble.n	800b1f0 <floor+0x90>
 800b1e4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b1e8:	d101      	bne.n	800b1ee <floor+0x8e>
 800b1ea:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b1ee:	bd30      	pop	{r4, r5, pc}
 800b1f0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800b1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f8:	40e0      	lsrs	r0, r4
 800b1fa:	4210      	tst	r0, r2
 800b1fc:	d0f7      	beq.n	800b1ee <floor+0x8e>
 800b1fe:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800b240 <floor+0xe0>
 800b202:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b206:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b20e:	ddc9      	ble.n	800b1a4 <floor+0x44>
 800b210:	2b00      	cmp	r3, #0
 800b212:	da02      	bge.n	800b21a <floor+0xba>
 800b214:	2914      	cmp	r1, #20
 800b216:	d103      	bne.n	800b220 <floor+0xc0>
 800b218:	3301      	adds	r3, #1
 800b21a:	ea22 0200 	bic.w	r2, r2, r0
 800b21e:	e7c1      	b.n	800b1a4 <floor+0x44>
 800b220:	2401      	movs	r4, #1
 800b222:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800b226:	fa04 f101 	lsl.w	r1, r4, r1
 800b22a:	440a      	add	r2, r1
 800b22c:	42aa      	cmp	r2, r5
 800b22e:	bf38      	it	cc
 800b230:	191b      	addcc	r3, r3, r4
 800b232:	e7f2      	b.n	800b21a <floor+0xba>
 800b234:	2200      	movs	r2, #0
 800b236:	4613      	mov	r3, r2
 800b238:	e7b4      	b.n	800b1a4 <floor+0x44>
 800b23a:	bf00      	nop
 800b23c:	f3af 8000 	nop.w
 800b240:	8800759c 	.word	0x8800759c
 800b244:	7e37e43c 	.word	0x7e37e43c
 800b248:	bff00000 	.word	0xbff00000
 800b24c:	000fffff 	.word	0x000fffff

0800b250 <_init>:
 800b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b252:	bf00      	nop
 800b254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b256:	bc08      	pop	{r3}
 800b258:	469e      	mov	lr, r3
 800b25a:	4770      	bx	lr

0800b25c <_fini>:
 800b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25e:	bf00      	nop
 800b260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b262:	bc08      	pop	{r3}
 800b264:	469e      	mov	lr, r3
 800b266:	4770      	bx	lr
